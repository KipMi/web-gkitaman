
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Renungan
 * 
 */
export type Renungan = $Result.DefaultSelection<Prisma.$RenunganPayload>
/**
 * Model Jemaat
 * 
 */
export type Jemaat = $Result.DefaultSelection<Prisma.$JemaatPayload>
/**
 * Model Ibadah
 * 
 */
export type Ibadah = $Result.DefaultSelection<Prisma.$IbadahPayload>
/**
 * Model Doa
 * 
 */
export type Doa = $Result.DefaultSelection<Prisma.$DoaPayload>
/**
 * Model LayananBaptis
 * 
 */
export type LayananBaptis = $Result.DefaultSelection<Prisma.$LayananBaptisPayload>
/**
 * Model LayananPernikahan
 * 
 */
export type LayananPernikahan = $Result.DefaultSelection<Prisma.$LayananPernikahanPayload>
/**
 * Model KonselingPendeta
 * 
 */
export type KonselingPendeta = $Result.DefaultSelection<Prisma.$KonselingPendetaPayload>
/**
 * Model OrangTua
 * 
 */
export type OrangTua = $Result.DefaultSelection<Prisma.$OrangTuaPayload>
/**
 * Model Kegiatan
 * 
 */
export type Kegiatan = $Result.DefaultSelection<Prisma.$KegiatanPayload>
/**
 * Model Karyawan
 * 
 */
export type Karyawan = $Result.DefaultSelection<Prisma.$KaryawanPayload>
/**
 * Model Pendeta
 * 
 */
export type Pendeta = $Result.DefaultSelection<Prisma.$PendetaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const userRole: {
  SUPERADMIN: 'SUPERADMIN',
  ADMIN: 'ADMIN',
  KOMISIANAK: 'KOMISIANAK',
  KOMISIREMAJA: 'KOMISIREMAJA',
  KOMISIPEMUDA: 'KOMISIPEMUDA',
  KOMISIDEWASA: 'KOMISIDEWASA',
  KOMISILANSIA: 'KOMISILANSIA',
  KOMISIKESENIAN: 'KOMISIKESENIAN',
  KOMISIMULTIMEDIA: 'KOMISIMULTIMEDIA'
};

export type userRole = (typeof userRole)[keyof typeof userRole]


export const CategoryPernikahan: {
  Katekisasi: 'Katekisasi',
  Konseling: 'Konseling',
  Pemberkatan: 'Pemberkatan'
};

export type CategoryPernikahan = (typeof CategoryPernikahan)[keyof typeof CategoryPernikahan]


export const posisiKaryawan: {
  PENDETA: 'PENDETA',
  STAFFKANTOR: 'STAFFKANTOR',
  KOMISI: 'KOMISI'
};

export type posisiKaryawan = (typeof posisiKaryawan)[keyof typeof posisiKaryawan]


export const status: {
  AKTIF: 'AKTIF',
  TIDAKAKTIF: 'TIDAKAKTIF'
};

export type status = (typeof status)[keyof typeof status]

}

export type userRole = $Enums.userRole

export const userRole: typeof $Enums.userRole

export type CategoryPernikahan = $Enums.CategoryPernikahan

export const CategoryPernikahan: typeof $Enums.CategoryPernikahan

export type posisiKaryawan = $Enums.posisiKaryawan

export const posisiKaryawan: typeof $Enums.posisiKaryawan

export type status = $Enums.status

export const status: typeof $Enums.status

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.renungan`: Exposes CRUD operations for the **Renungan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Renungans
    * const renungans = await prisma.renungan.findMany()
    * ```
    */
  get renungan(): Prisma.RenunganDelegate<ExtArgs>;

  /**
   * `prisma.jemaat`: Exposes CRUD operations for the **Jemaat** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jemaats
    * const jemaats = await prisma.jemaat.findMany()
    * ```
    */
  get jemaat(): Prisma.JemaatDelegate<ExtArgs>;

  /**
   * `prisma.ibadah`: Exposes CRUD operations for the **Ibadah** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ibadahs
    * const ibadahs = await prisma.ibadah.findMany()
    * ```
    */
  get ibadah(): Prisma.IbadahDelegate<ExtArgs>;

  /**
   * `prisma.doa`: Exposes CRUD operations for the **Doa** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Doas
    * const doas = await prisma.doa.findMany()
    * ```
    */
  get doa(): Prisma.DoaDelegate<ExtArgs>;

  /**
   * `prisma.layananBaptis`: Exposes CRUD operations for the **LayananBaptis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LayananBaptis
    * const layananBaptis = await prisma.layananBaptis.findMany()
    * ```
    */
  get layananBaptis(): Prisma.LayananBaptisDelegate<ExtArgs>;

  /**
   * `prisma.layananPernikahan`: Exposes CRUD operations for the **LayananPernikahan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LayananPernikahans
    * const layananPernikahans = await prisma.layananPernikahan.findMany()
    * ```
    */
  get layananPernikahan(): Prisma.LayananPernikahanDelegate<ExtArgs>;

  /**
   * `prisma.konselingPendeta`: Exposes CRUD operations for the **KonselingPendeta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KonselingPendetas
    * const konselingPendetas = await prisma.konselingPendeta.findMany()
    * ```
    */
  get konselingPendeta(): Prisma.KonselingPendetaDelegate<ExtArgs>;

  /**
   * `prisma.orangTua`: Exposes CRUD operations for the **OrangTua** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrangTuas
    * const orangTuas = await prisma.orangTua.findMany()
    * ```
    */
  get orangTua(): Prisma.OrangTuaDelegate<ExtArgs>;

  /**
   * `prisma.kegiatan`: Exposes CRUD operations for the **Kegiatan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kegiatans
    * const kegiatans = await prisma.kegiatan.findMany()
    * ```
    */
  get kegiatan(): Prisma.KegiatanDelegate<ExtArgs>;

  /**
   * `prisma.karyawan`: Exposes CRUD operations for the **Karyawan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Karyawans
    * const karyawans = await prisma.karyawan.findMany()
    * ```
    */
  get karyawan(): Prisma.KaryawanDelegate<ExtArgs>;

  /**
   * `prisma.pendeta`: Exposes CRUD operations for the **Pendeta** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pendetas
    * const pendetas = await prisma.pendeta.findMany()
    * ```
    */
  get pendeta(): Prisma.PendetaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.2
   * Query Engine version: ac9d7041ed77bcc8a8dbd2ab6616b39013829574
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Renungan: 'Renungan',
    Jemaat: 'Jemaat',
    Ibadah: 'Ibadah',
    Doa: 'Doa',
    LayananBaptis: 'LayananBaptis',
    LayananPernikahan: 'LayananPernikahan',
    KonselingPendeta: 'KonselingPendeta',
    OrangTua: 'OrangTua',
    Kegiatan: 'Kegiatan',
    Karyawan: 'Karyawan',
    Pendeta: 'Pendeta'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'renungan' | 'jemaat' | 'ibadah' | 'doa' | 'layananBaptis' | 'layananPernikahan' | 'konselingPendeta' | 'orangTua' | 'kegiatan' | 'karyawan' | 'pendeta'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Renungan: {
        payload: Prisma.$RenunganPayload<ExtArgs>
        fields: Prisma.RenunganFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RenunganFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RenunganFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload>
          }
          findFirst: {
            args: Prisma.RenunganFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RenunganFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload>
          }
          findMany: {
            args: Prisma.RenunganFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload>[]
          }
          create: {
            args: Prisma.RenunganCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload>
          }
          createMany: {
            args: Prisma.RenunganCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.RenunganDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload>
          }
          update: {
            args: Prisma.RenunganUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload>
          }
          deleteMany: {
            args: Prisma.RenunganDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.RenunganUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.RenunganUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$RenunganPayload>
          }
          aggregate: {
            args: Prisma.RenunganAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateRenungan>
          }
          groupBy: {
            args: Prisma.RenunganGroupByArgs<ExtArgs>,
            result: $Utils.Optional<RenunganGroupByOutputType>[]
          }
          count: {
            args: Prisma.RenunganCountArgs<ExtArgs>,
            result: $Utils.Optional<RenunganCountAggregateOutputType> | number
          }
        }
      }
      Jemaat: {
        payload: Prisma.$JemaatPayload<ExtArgs>
        fields: Prisma.JemaatFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JemaatFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JemaatFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload>
          }
          findFirst: {
            args: Prisma.JemaatFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JemaatFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload>
          }
          findMany: {
            args: Prisma.JemaatFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload>[]
          }
          create: {
            args: Prisma.JemaatCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload>
          }
          createMany: {
            args: Prisma.JemaatCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.JemaatDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload>
          }
          update: {
            args: Prisma.JemaatUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload>
          }
          deleteMany: {
            args: Prisma.JemaatDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.JemaatUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.JemaatUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$JemaatPayload>
          }
          aggregate: {
            args: Prisma.JemaatAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateJemaat>
          }
          groupBy: {
            args: Prisma.JemaatGroupByArgs<ExtArgs>,
            result: $Utils.Optional<JemaatGroupByOutputType>[]
          }
          count: {
            args: Prisma.JemaatCountArgs<ExtArgs>,
            result: $Utils.Optional<JemaatCountAggregateOutputType> | number
          }
        }
      }
      Ibadah: {
        payload: Prisma.$IbadahPayload<ExtArgs>
        fields: Prisma.IbadahFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IbadahFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IbadahFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload>
          }
          findFirst: {
            args: Prisma.IbadahFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IbadahFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload>
          }
          findMany: {
            args: Prisma.IbadahFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload>[]
          }
          create: {
            args: Prisma.IbadahCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload>
          }
          createMany: {
            args: Prisma.IbadahCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.IbadahDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload>
          }
          update: {
            args: Prisma.IbadahUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload>
          }
          deleteMany: {
            args: Prisma.IbadahDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.IbadahUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.IbadahUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$IbadahPayload>
          }
          aggregate: {
            args: Prisma.IbadahAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateIbadah>
          }
          groupBy: {
            args: Prisma.IbadahGroupByArgs<ExtArgs>,
            result: $Utils.Optional<IbadahGroupByOutputType>[]
          }
          count: {
            args: Prisma.IbadahCountArgs<ExtArgs>,
            result: $Utils.Optional<IbadahCountAggregateOutputType> | number
          }
        }
      }
      Doa: {
        payload: Prisma.$DoaPayload<ExtArgs>
        fields: Prisma.DoaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DoaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DoaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload>
          }
          findFirst: {
            args: Prisma.DoaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DoaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload>
          }
          findMany: {
            args: Prisma.DoaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload>[]
          }
          create: {
            args: Prisma.DoaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload>
          }
          createMany: {
            args: Prisma.DoaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.DoaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload>
          }
          update: {
            args: Prisma.DoaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload>
          }
          deleteMany: {
            args: Prisma.DoaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.DoaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.DoaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$DoaPayload>
          }
          aggregate: {
            args: Prisma.DoaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateDoa>
          }
          groupBy: {
            args: Prisma.DoaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<DoaGroupByOutputType>[]
          }
          count: {
            args: Prisma.DoaCountArgs<ExtArgs>,
            result: $Utils.Optional<DoaCountAggregateOutputType> | number
          }
        }
      }
      LayananBaptis: {
        payload: Prisma.$LayananBaptisPayload<ExtArgs>
        fields: Prisma.LayananBaptisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LayananBaptisFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LayananBaptisFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload>
          }
          findFirst: {
            args: Prisma.LayananBaptisFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LayananBaptisFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload>
          }
          findMany: {
            args: Prisma.LayananBaptisFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload>[]
          }
          create: {
            args: Prisma.LayananBaptisCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload>
          }
          createMany: {
            args: Prisma.LayananBaptisCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LayananBaptisDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload>
          }
          update: {
            args: Prisma.LayananBaptisUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload>
          }
          deleteMany: {
            args: Prisma.LayananBaptisDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LayananBaptisUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LayananBaptisUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananBaptisPayload>
          }
          aggregate: {
            args: Prisma.LayananBaptisAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLayananBaptis>
          }
          groupBy: {
            args: Prisma.LayananBaptisGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LayananBaptisGroupByOutputType>[]
          }
          count: {
            args: Prisma.LayananBaptisCountArgs<ExtArgs>,
            result: $Utils.Optional<LayananBaptisCountAggregateOutputType> | number
          }
        }
      }
      LayananPernikahan: {
        payload: Prisma.$LayananPernikahanPayload<ExtArgs>
        fields: Prisma.LayananPernikahanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LayananPernikahanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LayananPernikahanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload>
          }
          findFirst: {
            args: Prisma.LayananPernikahanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LayananPernikahanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload>
          }
          findMany: {
            args: Prisma.LayananPernikahanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload>[]
          }
          create: {
            args: Prisma.LayananPernikahanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload>
          }
          createMany: {
            args: Prisma.LayananPernikahanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.LayananPernikahanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload>
          }
          update: {
            args: Prisma.LayananPernikahanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload>
          }
          deleteMany: {
            args: Prisma.LayananPernikahanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.LayananPernikahanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.LayananPernikahanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$LayananPernikahanPayload>
          }
          aggregate: {
            args: Prisma.LayananPernikahanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateLayananPernikahan>
          }
          groupBy: {
            args: Prisma.LayananPernikahanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<LayananPernikahanGroupByOutputType>[]
          }
          count: {
            args: Prisma.LayananPernikahanCountArgs<ExtArgs>,
            result: $Utils.Optional<LayananPernikahanCountAggregateOutputType> | number
          }
        }
      }
      KonselingPendeta: {
        payload: Prisma.$KonselingPendetaPayload<ExtArgs>
        fields: Prisma.KonselingPendetaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KonselingPendetaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KonselingPendetaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload>
          }
          findFirst: {
            args: Prisma.KonselingPendetaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KonselingPendetaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload>
          }
          findMany: {
            args: Prisma.KonselingPendetaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload>[]
          }
          create: {
            args: Prisma.KonselingPendetaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload>
          }
          createMany: {
            args: Prisma.KonselingPendetaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KonselingPendetaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload>
          }
          update: {
            args: Prisma.KonselingPendetaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload>
          }
          deleteMany: {
            args: Prisma.KonselingPendetaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KonselingPendetaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KonselingPendetaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KonselingPendetaPayload>
          }
          aggregate: {
            args: Prisma.KonselingPendetaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKonselingPendeta>
          }
          groupBy: {
            args: Prisma.KonselingPendetaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KonselingPendetaGroupByOutputType>[]
          }
          count: {
            args: Prisma.KonselingPendetaCountArgs<ExtArgs>,
            result: $Utils.Optional<KonselingPendetaCountAggregateOutputType> | number
          }
        }
      }
      OrangTua: {
        payload: Prisma.$OrangTuaPayload<ExtArgs>
        fields: Prisma.OrangTuaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrangTuaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrangTuaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload>
          }
          findFirst: {
            args: Prisma.OrangTuaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrangTuaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload>
          }
          findMany: {
            args: Prisma.OrangTuaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload>[]
          }
          create: {
            args: Prisma.OrangTuaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload>
          }
          createMany: {
            args: Prisma.OrangTuaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrangTuaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload>
          }
          update: {
            args: Prisma.OrangTuaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload>
          }
          deleteMany: {
            args: Prisma.OrangTuaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrangTuaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrangTuaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$OrangTuaPayload>
          }
          aggregate: {
            args: Prisma.OrangTuaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrangTua>
          }
          groupBy: {
            args: Prisma.OrangTuaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrangTuaGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrangTuaCountArgs<ExtArgs>,
            result: $Utils.Optional<OrangTuaCountAggregateOutputType> | number
          }
        }
      }
      Kegiatan: {
        payload: Prisma.$KegiatanPayload<ExtArgs>
        fields: Prisma.KegiatanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KegiatanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KegiatanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload>
          }
          findFirst: {
            args: Prisma.KegiatanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KegiatanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload>
          }
          findMany: {
            args: Prisma.KegiatanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload>[]
          }
          create: {
            args: Prisma.KegiatanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload>
          }
          createMany: {
            args: Prisma.KegiatanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KegiatanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload>
          }
          update: {
            args: Prisma.KegiatanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload>
          }
          deleteMany: {
            args: Prisma.KegiatanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KegiatanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KegiatanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KegiatanPayload>
          }
          aggregate: {
            args: Prisma.KegiatanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKegiatan>
          }
          groupBy: {
            args: Prisma.KegiatanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KegiatanGroupByOutputType>[]
          }
          count: {
            args: Prisma.KegiatanCountArgs<ExtArgs>,
            result: $Utils.Optional<KegiatanCountAggregateOutputType> | number
          }
        }
      }
      Karyawan: {
        payload: Prisma.$KaryawanPayload<ExtArgs>
        fields: Prisma.KaryawanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.KaryawanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.KaryawanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload>
          }
          findFirst: {
            args: Prisma.KaryawanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.KaryawanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload>
          }
          findMany: {
            args: Prisma.KaryawanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload>[]
          }
          create: {
            args: Prisma.KaryawanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload>
          }
          createMany: {
            args: Prisma.KaryawanCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.KaryawanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload>
          }
          update: {
            args: Prisma.KaryawanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload>
          }
          deleteMany: {
            args: Prisma.KaryawanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.KaryawanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.KaryawanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$KaryawanPayload>
          }
          aggregate: {
            args: Prisma.KaryawanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateKaryawan>
          }
          groupBy: {
            args: Prisma.KaryawanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<KaryawanGroupByOutputType>[]
          }
          count: {
            args: Prisma.KaryawanCountArgs<ExtArgs>,
            result: $Utils.Optional<KaryawanCountAggregateOutputType> | number
          }
        }
      }
      Pendeta: {
        payload: Prisma.$PendetaPayload<ExtArgs>
        fields: Prisma.PendetaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PendetaFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PendetaFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload>
          }
          findFirst: {
            args: Prisma.PendetaFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PendetaFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload>
          }
          findMany: {
            args: Prisma.PendetaFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload>[]
          }
          create: {
            args: Prisma.PendetaCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload>
          }
          createMany: {
            args: Prisma.PendetaCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PendetaDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload>
          }
          update: {
            args: Prisma.PendetaUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload>
          }
          deleteMany: {
            args: Prisma.PendetaDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PendetaUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PendetaUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PendetaPayload>
          }
          aggregate: {
            args: Prisma.PendetaAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePendeta>
          }
          groupBy: {
            args: Prisma.PendetaGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PendetaGroupByOutputType>[]
          }
          count: {
            args: Prisma.PendetaCountArgs<ExtArgs>,
            result: $Utils.Optional<PendetaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type OrangTuaCountOutputType
   */

  export type OrangTuaCountOutputType = {
    ayah: number
    ibu: number
  }

  export type OrangTuaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ayah?: boolean | OrangTuaCountOutputTypeCountAyahArgs
    ibu?: boolean | OrangTuaCountOutputTypeCountIbuArgs
  }

  // Custom InputTypes

  /**
   * OrangTuaCountOutputType without action
   */
  export type OrangTuaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTuaCountOutputType
     */
    select?: OrangTuaCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrangTuaCountOutputType without action
   */
  export type OrangTuaCountOutputTypeCountAyahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JemaatWhereInput
  }


  /**
   * OrangTuaCountOutputType without action
   */
  export type OrangTuaCountOutputTypeCountIbuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JemaatWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    role: $Enums.userRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    role: $Enums.userRole | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    role: $Enums.userRole
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      role: $Enums.userRole
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'userRole'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
  }



  /**
   * Model Renungan
   */

  export type AggregateRenungan = {
    _count: RenunganCountAggregateOutputType | null
    _avg: RenunganAvgAggregateOutputType | null
    _sum: RenunganSumAggregateOutputType | null
    _min: RenunganMinAggregateOutputType | null
    _max: RenunganMaxAggregateOutputType | null
  }

  export type RenunganAvgAggregateOutputType = {
    id: number | null
  }

  export type RenunganSumAggregateOutputType = {
    id: number | null
  }

  export type RenunganMinAggregateOutputType = {
    id: number | null
    title: string | null
    kitab: string | null
    ayat: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RenunganMaxAggregateOutputType = {
    id: number | null
    title: string | null
    kitab: string | null
    ayat: string | null
    content: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RenunganCountAggregateOutputType = {
    id: number
    title: number
    kitab: number
    ayat: number
    content: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RenunganAvgAggregateInputType = {
    id?: true
  }

  export type RenunganSumAggregateInputType = {
    id?: true
  }

  export type RenunganMinAggregateInputType = {
    id?: true
    title?: true
    kitab?: true
    ayat?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RenunganMaxAggregateInputType = {
    id?: true
    title?: true
    kitab?: true
    ayat?: true
    content?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RenunganCountAggregateInputType = {
    id?: true
    title?: true
    kitab?: true
    ayat?: true
    content?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RenunganAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Renungan to aggregate.
     */
    where?: RenunganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renungans to fetch.
     */
    orderBy?: RenunganOrderByWithRelationInput | RenunganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RenunganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renungans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renungans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Renungans
    **/
    _count?: true | RenunganCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RenunganAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RenunganSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RenunganMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RenunganMaxAggregateInputType
  }

  export type GetRenunganAggregateType<T extends RenunganAggregateArgs> = {
        [P in keyof T & keyof AggregateRenungan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRenungan[P]>
      : GetScalarType<T[P], AggregateRenungan[P]>
  }




  export type RenunganGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenunganWhereInput
    orderBy?: RenunganOrderByWithAggregationInput | RenunganOrderByWithAggregationInput[]
    by: RenunganScalarFieldEnum[] | RenunganScalarFieldEnum
    having?: RenunganScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RenunganCountAggregateInputType | true
    _avg?: RenunganAvgAggregateInputType
    _sum?: RenunganSumAggregateInputType
    _min?: RenunganMinAggregateInputType
    _max?: RenunganMaxAggregateInputType
  }

  export type RenunganGroupByOutputType = {
    id: number
    title: string
    kitab: string
    ayat: string
    content: string
    createdAt: Date
    updatedAt: Date
    _count: RenunganCountAggregateOutputType | null
    _avg: RenunganAvgAggregateOutputType | null
    _sum: RenunganSumAggregateOutputType | null
    _min: RenunganMinAggregateOutputType | null
    _max: RenunganMaxAggregateOutputType | null
  }

  type GetRenunganGroupByPayload<T extends RenunganGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RenunganGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RenunganGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RenunganGroupByOutputType[P]>
            : GetScalarType<T[P], RenunganGroupByOutputType[P]>
        }
      >
    >


  export type RenunganSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    kitab?: boolean
    ayat?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["renungan"]>

  export type RenunganSelectScalar = {
    id?: boolean
    title?: boolean
    kitab?: boolean
    ayat?: boolean
    content?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $RenunganPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Renungan"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      title: string
      kitab: string
      ayat: string
      content: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["renungan"]>
    composites: {}
  }


  type RenunganGetPayload<S extends boolean | null | undefined | RenunganDefaultArgs> = $Result.GetResult<Prisma.$RenunganPayload, S>

  type RenunganCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RenunganFindManyArgs, 'select' | 'include'> & {
      select?: RenunganCountAggregateInputType | true
    }

  export interface RenunganDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Renungan'], meta: { name: 'Renungan' } }
    /**
     * Find zero or one Renungan that matches the filter.
     * @param {RenunganFindUniqueArgs} args - Arguments to find a Renungan
     * @example
     * // Get one Renungan
     * const renungan = await prisma.renungan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RenunganFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, RenunganFindUniqueArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Renungan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {RenunganFindUniqueOrThrowArgs} args - Arguments to find a Renungan
     * @example
     * // Get one Renungan
     * const renungan = await prisma.renungan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends RenunganFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RenunganFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Renungan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenunganFindFirstArgs} args - Arguments to find a Renungan
     * @example
     * // Get one Renungan
     * const renungan = await prisma.renungan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RenunganFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, RenunganFindFirstArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Renungan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenunganFindFirstOrThrowArgs} args - Arguments to find a Renungan
     * @example
     * // Get one Renungan
     * const renungan = await prisma.renungan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends RenunganFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, RenunganFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Renungans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenunganFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Renungans
     * const renungans = await prisma.renungan.findMany()
     * 
     * // Get first 10 Renungans
     * const renungans = await prisma.renungan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const renunganWithIdOnly = await prisma.renungan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RenunganFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RenunganFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Renungan.
     * @param {RenunganCreateArgs} args - Arguments to create a Renungan.
     * @example
     * // Create one Renungan
     * const Renungan = await prisma.renungan.create({
     *   data: {
     *     // ... data to create a Renungan
     *   }
     * })
     * 
    **/
    create<T extends RenunganCreateArgs<ExtArgs>>(
      args: SelectSubset<T, RenunganCreateArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Renungans.
     *     @param {RenunganCreateManyArgs} args - Arguments to create many Renungans.
     *     @example
     *     // Create many Renungans
     *     const renungan = await prisma.renungan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends RenunganCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RenunganCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Renungan.
     * @param {RenunganDeleteArgs} args - Arguments to delete one Renungan.
     * @example
     * // Delete one Renungan
     * const Renungan = await prisma.renungan.delete({
     *   where: {
     *     // ... filter to delete one Renungan
     *   }
     * })
     * 
    **/
    delete<T extends RenunganDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, RenunganDeleteArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Renungan.
     * @param {RenunganUpdateArgs} args - Arguments to update one Renungan.
     * @example
     * // Update one Renungan
     * const renungan = await prisma.renungan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RenunganUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, RenunganUpdateArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Renungans.
     * @param {RenunganDeleteManyArgs} args - Arguments to filter Renungans to delete.
     * @example
     * // Delete a few Renungans
     * const { count } = await prisma.renungan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RenunganDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, RenunganDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Renungans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenunganUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Renungans
     * const renungan = await prisma.renungan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RenunganUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, RenunganUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Renungan.
     * @param {RenunganUpsertArgs} args - Arguments to update or create a Renungan.
     * @example
     * // Update or create a Renungan
     * const renungan = await prisma.renungan.upsert({
     *   create: {
     *     // ... data to create a Renungan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Renungan we want to update
     *   }
     * })
    **/
    upsert<T extends RenunganUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, RenunganUpsertArgs<ExtArgs>>
    ): Prisma__RenunganClient<$Result.GetResult<Prisma.$RenunganPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Renungans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenunganCountArgs} args - Arguments to filter Renungans to count.
     * @example
     * // Count the number of Renungans
     * const count = await prisma.renungan.count({
     *   where: {
     *     // ... the filter for the Renungans we want to count
     *   }
     * })
    **/
    count<T extends RenunganCountArgs>(
      args?: Subset<T, RenunganCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RenunganCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Renungan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenunganAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RenunganAggregateArgs>(args: Subset<T, RenunganAggregateArgs>): Prisma.PrismaPromise<GetRenunganAggregateType<T>>

    /**
     * Group by Renungan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenunganGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RenunganGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RenunganGroupByArgs['orderBy'] }
        : { orderBy?: RenunganGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RenunganGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRenunganGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Renungan model
   */
  readonly fields: RenunganFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Renungan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RenunganClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Renungan model
   */ 
  interface RenunganFieldRefs {
    readonly id: FieldRef<"Renungan", 'Int'>
    readonly title: FieldRef<"Renungan", 'String'>
    readonly kitab: FieldRef<"Renungan", 'String'>
    readonly ayat: FieldRef<"Renungan", 'String'>
    readonly content: FieldRef<"Renungan", 'String'>
    readonly createdAt: FieldRef<"Renungan", 'DateTime'>
    readonly updatedAt: FieldRef<"Renungan", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Renungan findUnique
   */
  export type RenunganFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * Filter, which Renungan to fetch.
     */
    where: RenunganWhereUniqueInput
  }


  /**
   * Renungan findUniqueOrThrow
   */
  export type RenunganFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * Filter, which Renungan to fetch.
     */
    where: RenunganWhereUniqueInput
  }


  /**
   * Renungan findFirst
   */
  export type RenunganFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * Filter, which Renungan to fetch.
     */
    where?: RenunganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renungans to fetch.
     */
    orderBy?: RenunganOrderByWithRelationInput | RenunganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Renungans.
     */
    cursor?: RenunganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renungans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renungans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Renungans.
     */
    distinct?: RenunganScalarFieldEnum | RenunganScalarFieldEnum[]
  }


  /**
   * Renungan findFirstOrThrow
   */
  export type RenunganFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * Filter, which Renungan to fetch.
     */
    where?: RenunganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renungans to fetch.
     */
    orderBy?: RenunganOrderByWithRelationInput | RenunganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Renungans.
     */
    cursor?: RenunganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renungans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renungans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Renungans.
     */
    distinct?: RenunganScalarFieldEnum | RenunganScalarFieldEnum[]
  }


  /**
   * Renungan findMany
   */
  export type RenunganFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * Filter, which Renungans to fetch.
     */
    where?: RenunganWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renungans to fetch.
     */
    orderBy?: RenunganOrderByWithRelationInput | RenunganOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Renungans.
     */
    cursor?: RenunganWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renungans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renungans.
     */
    skip?: number
    distinct?: RenunganScalarFieldEnum | RenunganScalarFieldEnum[]
  }


  /**
   * Renungan create
   */
  export type RenunganCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * The data needed to create a Renungan.
     */
    data: XOR<RenunganCreateInput, RenunganUncheckedCreateInput>
  }


  /**
   * Renungan createMany
   */
  export type RenunganCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Renungans.
     */
    data: RenunganCreateManyInput | RenunganCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Renungan update
   */
  export type RenunganUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * The data needed to update a Renungan.
     */
    data: XOR<RenunganUpdateInput, RenunganUncheckedUpdateInput>
    /**
     * Choose, which Renungan to update.
     */
    where: RenunganWhereUniqueInput
  }


  /**
   * Renungan updateMany
   */
  export type RenunganUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Renungans.
     */
    data: XOR<RenunganUpdateManyMutationInput, RenunganUncheckedUpdateManyInput>
    /**
     * Filter which Renungans to update
     */
    where?: RenunganWhereInput
  }


  /**
   * Renungan upsert
   */
  export type RenunganUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * The filter to search for the Renungan to update in case it exists.
     */
    where: RenunganWhereUniqueInput
    /**
     * In case the Renungan found by the `where` argument doesn't exist, create a new Renungan with this data.
     */
    create: XOR<RenunganCreateInput, RenunganUncheckedCreateInput>
    /**
     * In case the Renungan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RenunganUpdateInput, RenunganUncheckedUpdateInput>
  }


  /**
   * Renungan delete
   */
  export type RenunganDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
    /**
     * Filter which Renungan to delete.
     */
    where: RenunganWhereUniqueInput
  }


  /**
   * Renungan deleteMany
   */
  export type RenunganDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Renungans to delete
     */
    where?: RenunganWhereInput
  }


  /**
   * Renungan without action
   */
  export type RenunganDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Renungan
     */
    select?: RenunganSelect<ExtArgs> | null
  }



  /**
   * Model Jemaat
   */

  export type AggregateJemaat = {
    _count: JemaatCountAggregateOutputType | null
    _avg: JemaatAvgAggregateOutputType | null
    _sum: JemaatSumAggregateOutputType | null
    _min: JemaatMinAggregateOutputType | null
    _max: JemaatMaxAggregateOutputType | null
  }

  export type JemaatAvgAggregateOutputType = {
    id: number | null
    noAnggota: number | null
    noWA: number | null
    noTelpRumah: number | null
    ayahId: number | null
    ibuId: number | null
  }

  export type JemaatSumAggregateOutputType = {
    id: number | null
    noAnggota: number | null
    noWA: number | null
    noTelpRumah: number | null
    ayahId: number | null
    ibuId: number | null
  }

  export type JemaatMinAggregateOutputType = {
    id: number | null
    noAnggota: number | null
    namaDepan: string | null
    namaTengah: string | null
    namaKeluarga: string | null
    noWA: number | null
    noTelpRumah: number | null
    tempatLahir: string | null
    ayahId: number | null
    ibuId: number | null
    tanggalLahir: Date | null
    golonganDarah: string | null
    alamatRumah: string | null
    wilayah: string | null
    pekerjaan: string | null
    jabatan: string | null
    perusahaan: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JemaatMaxAggregateOutputType = {
    id: number | null
    noAnggota: number | null
    namaDepan: string | null
    namaTengah: string | null
    namaKeluarga: string | null
    noWA: number | null
    noTelpRumah: number | null
    tempatLahir: string | null
    ayahId: number | null
    ibuId: number | null
    tanggalLahir: Date | null
    golonganDarah: string | null
    alamatRumah: string | null
    wilayah: string | null
    pekerjaan: string | null
    jabatan: string | null
    perusahaan: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type JemaatCountAggregateOutputType = {
    id: number
    noAnggota: number
    namaDepan: number
    namaTengah: number
    namaKeluarga: number
    noWA: number
    noTelpRumah: number
    tempatLahir: number
    ayahId: number
    ibuId: number
    tanggalLahir: number
    golonganDarah: number
    alamatRumah: number
    wilayah: number
    pekerjaan: number
    jabatan: number
    perusahaan: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type JemaatAvgAggregateInputType = {
    id?: true
    noAnggota?: true
    noWA?: true
    noTelpRumah?: true
    ayahId?: true
    ibuId?: true
  }

  export type JemaatSumAggregateInputType = {
    id?: true
    noAnggota?: true
    noWA?: true
    noTelpRumah?: true
    ayahId?: true
    ibuId?: true
  }

  export type JemaatMinAggregateInputType = {
    id?: true
    noAnggota?: true
    namaDepan?: true
    namaTengah?: true
    namaKeluarga?: true
    noWA?: true
    noTelpRumah?: true
    tempatLahir?: true
    ayahId?: true
    ibuId?: true
    tanggalLahir?: true
    golonganDarah?: true
    alamatRumah?: true
    wilayah?: true
    pekerjaan?: true
    jabatan?: true
    perusahaan?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JemaatMaxAggregateInputType = {
    id?: true
    noAnggota?: true
    namaDepan?: true
    namaTengah?: true
    namaKeluarga?: true
    noWA?: true
    noTelpRumah?: true
    tempatLahir?: true
    ayahId?: true
    ibuId?: true
    tanggalLahir?: true
    golonganDarah?: true
    alamatRumah?: true
    wilayah?: true
    pekerjaan?: true
    jabatan?: true
    perusahaan?: true
    createdAt?: true
    updatedAt?: true
  }

  export type JemaatCountAggregateInputType = {
    id?: true
    noAnggota?: true
    namaDepan?: true
    namaTengah?: true
    namaKeluarga?: true
    noWA?: true
    noTelpRumah?: true
    tempatLahir?: true
    ayahId?: true
    ibuId?: true
    tanggalLahir?: true
    golonganDarah?: true
    alamatRumah?: true
    wilayah?: true
    pekerjaan?: true
    jabatan?: true
    perusahaan?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type JemaatAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jemaat to aggregate.
     */
    where?: JemaatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jemaats to fetch.
     */
    orderBy?: JemaatOrderByWithRelationInput | JemaatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JemaatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jemaats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jemaats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jemaats
    **/
    _count?: true | JemaatCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JemaatAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JemaatSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JemaatMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JemaatMaxAggregateInputType
  }

  export type GetJemaatAggregateType<T extends JemaatAggregateArgs> = {
        [P in keyof T & keyof AggregateJemaat]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJemaat[P]>
      : GetScalarType<T[P], AggregateJemaat[P]>
  }




  export type JemaatGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JemaatWhereInput
    orderBy?: JemaatOrderByWithAggregationInput | JemaatOrderByWithAggregationInput[]
    by: JemaatScalarFieldEnum[] | JemaatScalarFieldEnum
    having?: JemaatScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JemaatCountAggregateInputType | true
    _avg?: JemaatAvgAggregateInputType
    _sum?: JemaatSumAggregateInputType
    _min?: JemaatMinAggregateInputType
    _max?: JemaatMaxAggregateInputType
  }

  export type JemaatGroupByOutputType = {
    id: number
    noAnggota: number
    namaDepan: string
    namaTengah: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ayahId: number | null
    ibuId: number | null
    tanggalLahir: Date
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan: string | null
    jabatan: string | null
    perusahaan: string | null
    createdAt: Date
    updatedAt: Date
    _count: JemaatCountAggregateOutputType | null
    _avg: JemaatAvgAggregateOutputType | null
    _sum: JemaatSumAggregateOutputType | null
    _min: JemaatMinAggregateOutputType | null
    _max: JemaatMaxAggregateOutputType | null
  }

  type GetJemaatGroupByPayload<T extends JemaatGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JemaatGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JemaatGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JemaatGroupByOutputType[P]>
            : GetScalarType<T[P], JemaatGroupByOutputType[P]>
        }
      >
    >


  export type JemaatSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noAnggota?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    namaKeluarga?: boolean
    noWA?: boolean
    noTelpRumah?: boolean
    tempatLahir?: boolean
    ayahId?: boolean
    ibuId?: boolean
    tanggalLahir?: boolean
    golonganDarah?: boolean
    alamatRumah?: boolean
    wilayah?: boolean
    pekerjaan?: boolean
    jabatan?: boolean
    perusahaan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ayah?: boolean | Jemaat$ayahArgs<ExtArgs>
    ibu?: boolean | Jemaat$ibuArgs<ExtArgs>
    jemaat?: boolean | Jemaat$jemaatArgs<ExtArgs>
  }, ExtArgs["result"]["jemaat"]>

  export type JemaatSelectScalar = {
    id?: boolean
    noAnggota?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    namaKeluarga?: boolean
    noWA?: boolean
    noTelpRumah?: boolean
    tempatLahir?: boolean
    ayahId?: boolean
    ibuId?: boolean
    tanggalLahir?: boolean
    golonganDarah?: boolean
    alamatRumah?: boolean
    wilayah?: boolean
    pekerjaan?: boolean
    jabatan?: boolean
    perusahaan?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type JemaatInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    ayah?: boolean | Jemaat$ayahArgs<ExtArgs>
    ibu?: boolean | Jemaat$ibuArgs<ExtArgs>
    jemaat?: boolean | Jemaat$jemaatArgs<ExtArgs>
  }


  export type $JemaatPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Jemaat"
    objects: {
      ayah: Prisma.$OrangTuaPayload<ExtArgs> | null
      ibu: Prisma.$OrangTuaPayload<ExtArgs> | null
      jemaat: Prisma.$OrangTuaPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      noAnggota: number
      namaDepan: string
      namaTengah: string | null
      namaKeluarga: string
      noWA: number
      noTelpRumah: number
      tempatLahir: string
      ayahId: number | null
      ibuId: number | null
      tanggalLahir: Date
      golonganDarah: string
      alamatRumah: string
      wilayah: string
      pekerjaan: string | null
      jabatan: string | null
      perusahaan: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["jemaat"]>
    composites: {}
  }


  type JemaatGetPayload<S extends boolean | null | undefined | JemaatDefaultArgs> = $Result.GetResult<Prisma.$JemaatPayload, S>

  type JemaatCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JemaatFindManyArgs, 'select' | 'include'> & {
      select?: JemaatCountAggregateInputType | true
    }

  export interface JemaatDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Jemaat'], meta: { name: 'Jemaat' } }
    /**
     * Find zero or one Jemaat that matches the filter.
     * @param {JemaatFindUniqueArgs} args - Arguments to find a Jemaat
     * @example
     * // Get one Jemaat
     * const jemaat = await prisma.jemaat.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends JemaatFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, JemaatFindUniqueArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Jemaat that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {JemaatFindUniqueOrThrowArgs} args - Arguments to find a Jemaat
     * @example
     * // Get one Jemaat
     * const jemaat = await prisma.jemaat.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends JemaatFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JemaatFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Jemaat that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JemaatFindFirstArgs} args - Arguments to find a Jemaat
     * @example
     * // Get one Jemaat
     * const jemaat = await prisma.jemaat.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends JemaatFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, JemaatFindFirstArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Jemaat that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JemaatFindFirstOrThrowArgs} args - Arguments to find a Jemaat
     * @example
     * // Get one Jemaat
     * const jemaat = await prisma.jemaat.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends JemaatFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, JemaatFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Jemaats that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JemaatFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jemaats
     * const jemaats = await prisma.jemaat.findMany()
     * 
     * // Get first 10 Jemaats
     * const jemaats = await prisma.jemaat.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jemaatWithIdOnly = await prisma.jemaat.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends JemaatFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JemaatFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Jemaat.
     * @param {JemaatCreateArgs} args - Arguments to create a Jemaat.
     * @example
     * // Create one Jemaat
     * const Jemaat = await prisma.jemaat.create({
     *   data: {
     *     // ... data to create a Jemaat
     *   }
     * })
     * 
    **/
    create<T extends JemaatCreateArgs<ExtArgs>>(
      args: SelectSubset<T, JemaatCreateArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Jemaats.
     *     @param {JemaatCreateManyArgs} args - Arguments to create many Jemaats.
     *     @example
     *     // Create many Jemaats
     *     const jemaat = await prisma.jemaat.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends JemaatCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JemaatCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Jemaat.
     * @param {JemaatDeleteArgs} args - Arguments to delete one Jemaat.
     * @example
     * // Delete one Jemaat
     * const Jemaat = await prisma.jemaat.delete({
     *   where: {
     *     // ... filter to delete one Jemaat
     *   }
     * })
     * 
    **/
    delete<T extends JemaatDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, JemaatDeleteArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Jemaat.
     * @param {JemaatUpdateArgs} args - Arguments to update one Jemaat.
     * @example
     * // Update one Jemaat
     * const jemaat = await prisma.jemaat.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends JemaatUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, JemaatUpdateArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Jemaats.
     * @param {JemaatDeleteManyArgs} args - Arguments to filter Jemaats to delete.
     * @example
     * // Delete a few Jemaats
     * const { count } = await prisma.jemaat.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends JemaatDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, JemaatDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jemaats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JemaatUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jemaats
     * const jemaat = await prisma.jemaat.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends JemaatUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, JemaatUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Jemaat.
     * @param {JemaatUpsertArgs} args - Arguments to update or create a Jemaat.
     * @example
     * // Update or create a Jemaat
     * const jemaat = await prisma.jemaat.upsert({
     *   create: {
     *     // ... data to create a Jemaat
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jemaat we want to update
     *   }
     * })
    **/
    upsert<T extends JemaatUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, JemaatUpsertArgs<ExtArgs>>
    ): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Jemaats.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JemaatCountArgs} args - Arguments to filter Jemaats to count.
     * @example
     * // Count the number of Jemaats
     * const count = await prisma.jemaat.count({
     *   where: {
     *     // ... the filter for the Jemaats we want to count
     *   }
     * })
    **/
    count<T extends JemaatCountArgs>(
      args?: Subset<T, JemaatCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JemaatCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jemaat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JemaatAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JemaatAggregateArgs>(args: Subset<T, JemaatAggregateArgs>): Prisma.PrismaPromise<GetJemaatAggregateType<T>>

    /**
     * Group by Jemaat.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JemaatGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JemaatGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JemaatGroupByArgs['orderBy'] }
        : { orderBy?: JemaatGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JemaatGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJemaatGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Jemaat model
   */
  readonly fields: JemaatFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Jemaat.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JemaatClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    ayah<T extends Jemaat$ayahArgs<ExtArgs> = {}>(args?: Subset<T, Jemaat$ayahArgs<ExtArgs>>): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ibu<T extends Jemaat$ibuArgs<ExtArgs> = {}>(args?: Subset<T, Jemaat$ibuArgs<ExtArgs>>): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    jemaat<T extends Jemaat$jemaatArgs<ExtArgs> = {}>(args?: Subset<T, Jemaat$jemaatArgs<ExtArgs>>): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Jemaat model
   */ 
  interface JemaatFieldRefs {
    readonly id: FieldRef<"Jemaat", 'Int'>
    readonly noAnggota: FieldRef<"Jemaat", 'Int'>
    readonly namaDepan: FieldRef<"Jemaat", 'String'>
    readonly namaTengah: FieldRef<"Jemaat", 'String'>
    readonly namaKeluarga: FieldRef<"Jemaat", 'String'>
    readonly noWA: FieldRef<"Jemaat", 'Int'>
    readonly noTelpRumah: FieldRef<"Jemaat", 'Int'>
    readonly tempatLahir: FieldRef<"Jemaat", 'String'>
    readonly ayahId: FieldRef<"Jemaat", 'Int'>
    readonly ibuId: FieldRef<"Jemaat", 'Int'>
    readonly tanggalLahir: FieldRef<"Jemaat", 'DateTime'>
    readonly golonganDarah: FieldRef<"Jemaat", 'String'>
    readonly alamatRumah: FieldRef<"Jemaat", 'String'>
    readonly wilayah: FieldRef<"Jemaat", 'String'>
    readonly pekerjaan: FieldRef<"Jemaat", 'String'>
    readonly jabatan: FieldRef<"Jemaat", 'String'>
    readonly perusahaan: FieldRef<"Jemaat", 'String'>
    readonly createdAt: FieldRef<"Jemaat", 'DateTime'>
    readonly updatedAt: FieldRef<"Jemaat", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Jemaat findUnique
   */
  export type JemaatFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * Filter, which Jemaat to fetch.
     */
    where: JemaatWhereUniqueInput
  }


  /**
   * Jemaat findUniqueOrThrow
   */
  export type JemaatFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * Filter, which Jemaat to fetch.
     */
    where: JemaatWhereUniqueInput
  }


  /**
   * Jemaat findFirst
   */
  export type JemaatFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * Filter, which Jemaat to fetch.
     */
    where?: JemaatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jemaats to fetch.
     */
    orderBy?: JemaatOrderByWithRelationInput | JemaatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jemaats.
     */
    cursor?: JemaatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jemaats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jemaats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jemaats.
     */
    distinct?: JemaatScalarFieldEnum | JemaatScalarFieldEnum[]
  }


  /**
   * Jemaat findFirstOrThrow
   */
  export type JemaatFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * Filter, which Jemaat to fetch.
     */
    where?: JemaatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jemaats to fetch.
     */
    orderBy?: JemaatOrderByWithRelationInput | JemaatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jemaats.
     */
    cursor?: JemaatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jemaats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jemaats.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jemaats.
     */
    distinct?: JemaatScalarFieldEnum | JemaatScalarFieldEnum[]
  }


  /**
   * Jemaat findMany
   */
  export type JemaatFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * Filter, which Jemaats to fetch.
     */
    where?: JemaatWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jemaats to fetch.
     */
    orderBy?: JemaatOrderByWithRelationInput | JemaatOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jemaats.
     */
    cursor?: JemaatWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jemaats from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jemaats.
     */
    skip?: number
    distinct?: JemaatScalarFieldEnum | JemaatScalarFieldEnum[]
  }


  /**
   * Jemaat create
   */
  export type JemaatCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * The data needed to create a Jemaat.
     */
    data: XOR<JemaatCreateInput, JemaatUncheckedCreateInput>
  }


  /**
   * Jemaat createMany
   */
  export type JemaatCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jemaats.
     */
    data: JemaatCreateManyInput | JemaatCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Jemaat update
   */
  export type JemaatUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * The data needed to update a Jemaat.
     */
    data: XOR<JemaatUpdateInput, JemaatUncheckedUpdateInput>
    /**
     * Choose, which Jemaat to update.
     */
    where: JemaatWhereUniqueInput
  }


  /**
   * Jemaat updateMany
   */
  export type JemaatUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jemaats.
     */
    data: XOR<JemaatUpdateManyMutationInput, JemaatUncheckedUpdateManyInput>
    /**
     * Filter which Jemaats to update
     */
    where?: JemaatWhereInput
  }


  /**
   * Jemaat upsert
   */
  export type JemaatUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * The filter to search for the Jemaat to update in case it exists.
     */
    where: JemaatWhereUniqueInput
    /**
     * In case the Jemaat found by the `where` argument doesn't exist, create a new Jemaat with this data.
     */
    create: XOR<JemaatCreateInput, JemaatUncheckedCreateInput>
    /**
     * In case the Jemaat was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JemaatUpdateInput, JemaatUncheckedUpdateInput>
  }


  /**
   * Jemaat delete
   */
  export type JemaatDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    /**
     * Filter which Jemaat to delete.
     */
    where: JemaatWhereUniqueInput
  }


  /**
   * Jemaat deleteMany
   */
  export type JemaatDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jemaats to delete
     */
    where?: JemaatWhereInput
  }


  /**
   * Jemaat.ayah
   */
  export type Jemaat$ayahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    where?: OrangTuaWhereInput
  }


  /**
   * Jemaat.ibu
   */
  export type Jemaat$ibuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    where?: OrangTuaWhereInput
  }


  /**
   * Jemaat.jemaat
   */
  export type Jemaat$jemaatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    where?: OrangTuaWhereInput
  }


  /**
   * Jemaat without action
   */
  export type JemaatDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
  }



  /**
   * Model Ibadah
   */

  export type AggregateIbadah = {
    _count: IbadahCountAggregateOutputType | null
    _avg: IbadahAvgAggregateOutputType | null
    _sum: IbadahSumAggregateOutputType | null
    _min: IbadahMinAggregateOutputType | null
    _max: IbadahMaxAggregateOutputType | null
  }

  export type IbadahAvgAggregateOutputType = {
    id: number | null
  }

  export type IbadahSumAggregateOutputType = {
    id: number | null
  }

  export type IbadahMinAggregateOutputType = {
    id: number | null
    category: string | null
    temaIbadah: string | null
    pemimpin: string | null
    linkVideo: string | null
    infoTambahan: string | null
    waktuMulai: Date | null
    waktuSelesai: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IbadahMaxAggregateOutputType = {
    id: number | null
    category: string | null
    temaIbadah: string | null
    pemimpin: string | null
    linkVideo: string | null
    infoTambahan: string | null
    waktuMulai: Date | null
    waktuSelesai: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type IbadahCountAggregateOutputType = {
    id: number
    category: number
    temaIbadah: number
    pemimpin: number
    linkVideo: number
    infoTambahan: number
    waktuMulai: number
    waktuSelesai: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type IbadahAvgAggregateInputType = {
    id?: true
  }

  export type IbadahSumAggregateInputType = {
    id?: true
  }

  export type IbadahMinAggregateInputType = {
    id?: true
    category?: true
    temaIbadah?: true
    pemimpin?: true
    linkVideo?: true
    infoTambahan?: true
    waktuMulai?: true
    waktuSelesai?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IbadahMaxAggregateInputType = {
    id?: true
    category?: true
    temaIbadah?: true
    pemimpin?: true
    linkVideo?: true
    infoTambahan?: true
    waktuMulai?: true
    waktuSelesai?: true
    createdAt?: true
    updatedAt?: true
  }

  export type IbadahCountAggregateInputType = {
    id?: true
    category?: true
    temaIbadah?: true
    pemimpin?: true
    linkVideo?: true
    infoTambahan?: true
    waktuMulai?: true
    waktuSelesai?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type IbadahAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ibadah to aggregate.
     */
    where?: IbadahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ibadahs to fetch.
     */
    orderBy?: IbadahOrderByWithRelationInput | IbadahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IbadahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ibadahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ibadahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ibadahs
    **/
    _count?: true | IbadahCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: IbadahAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: IbadahSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IbadahMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IbadahMaxAggregateInputType
  }

  export type GetIbadahAggregateType<T extends IbadahAggregateArgs> = {
        [P in keyof T & keyof AggregateIbadah]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIbadah[P]>
      : GetScalarType<T[P], AggregateIbadah[P]>
  }




  export type IbadahGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IbadahWhereInput
    orderBy?: IbadahOrderByWithAggregationInput | IbadahOrderByWithAggregationInput[]
    by: IbadahScalarFieldEnum[] | IbadahScalarFieldEnum
    having?: IbadahScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IbadahCountAggregateInputType | true
    _avg?: IbadahAvgAggregateInputType
    _sum?: IbadahSumAggregateInputType
    _min?: IbadahMinAggregateInputType
    _max?: IbadahMaxAggregateInputType
  }

  export type IbadahGroupByOutputType = {
    id: number
    category: string
    temaIbadah: string
    pemimpin: string
    linkVideo: string
    infoTambahan: string
    waktuMulai: Date
    waktuSelesai: Date
    createdAt: Date
    updatedAt: Date
    _count: IbadahCountAggregateOutputType | null
    _avg: IbadahAvgAggregateOutputType | null
    _sum: IbadahSumAggregateOutputType | null
    _min: IbadahMinAggregateOutputType | null
    _max: IbadahMaxAggregateOutputType | null
  }

  type GetIbadahGroupByPayload<T extends IbadahGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IbadahGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IbadahGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IbadahGroupByOutputType[P]>
            : GetScalarType<T[P], IbadahGroupByOutputType[P]>
        }
      >
    >


  export type IbadahSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    temaIbadah?: boolean
    pemimpin?: boolean
    linkVideo?: boolean
    infoTambahan?: boolean
    waktuMulai?: boolean
    waktuSelesai?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["ibadah"]>

  export type IbadahSelectScalar = {
    id?: boolean
    category?: boolean
    temaIbadah?: boolean
    pemimpin?: boolean
    linkVideo?: boolean
    infoTambahan?: boolean
    waktuMulai?: boolean
    waktuSelesai?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $IbadahPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Ibadah"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category: string
      temaIbadah: string
      pemimpin: string
      linkVideo: string
      infoTambahan: string
      waktuMulai: Date
      waktuSelesai: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["ibadah"]>
    composites: {}
  }


  type IbadahGetPayload<S extends boolean | null | undefined | IbadahDefaultArgs> = $Result.GetResult<Prisma.$IbadahPayload, S>

  type IbadahCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<IbadahFindManyArgs, 'select' | 'include'> & {
      select?: IbadahCountAggregateInputType | true
    }

  export interface IbadahDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Ibadah'], meta: { name: 'Ibadah' } }
    /**
     * Find zero or one Ibadah that matches the filter.
     * @param {IbadahFindUniqueArgs} args - Arguments to find a Ibadah
     * @example
     * // Get one Ibadah
     * const ibadah = await prisma.ibadah.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends IbadahFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, IbadahFindUniqueArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Ibadah that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {IbadahFindUniqueOrThrowArgs} args - Arguments to find a Ibadah
     * @example
     * // Get one Ibadah
     * const ibadah = await prisma.ibadah.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends IbadahFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IbadahFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Ibadah that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IbadahFindFirstArgs} args - Arguments to find a Ibadah
     * @example
     * // Get one Ibadah
     * const ibadah = await prisma.ibadah.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends IbadahFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, IbadahFindFirstArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Ibadah that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IbadahFindFirstOrThrowArgs} args - Arguments to find a Ibadah
     * @example
     * // Get one Ibadah
     * const ibadah = await prisma.ibadah.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends IbadahFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, IbadahFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Ibadahs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IbadahFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ibadahs
     * const ibadahs = await prisma.ibadah.findMany()
     * 
     * // Get first 10 Ibadahs
     * const ibadahs = await prisma.ibadah.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ibadahWithIdOnly = await prisma.ibadah.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends IbadahFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IbadahFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Ibadah.
     * @param {IbadahCreateArgs} args - Arguments to create a Ibadah.
     * @example
     * // Create one Ibadah
     * const Ibadah = await prisma.ibadah.create({
     *   data: {
     *     // ... data to create a Ibadah
     *   }
     * })
     * 
    **/
    create<T extends IbadahCreateArgs<ExtArgs>>(
      args: SelectSubset<T, IbadahCreateArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Ibadahs.
     *     @param {IbadahCreateManyArgs} args - Arguments to create many Ibadahs.
     *     @example
     *     // Create many Ibadahs
     *     const ibadah = await prisma.ibadah.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends IbadahCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IbadahCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Ibadah.
     * @param {IbadahDeleteArgs} args - Arguments to delete one Ibadah.
     * @example
     * // Delete one Ibadah
     * const Ibadah = await prisma.ibadah.delete({
     *   where: {
     *     // ... filter to delete one Ibadah
     *   }
     * })
     * 
    **/
    delete<T extends IbadahDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, IbadahDeleteArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Ibadah.
     * @param {IbadahUpdateArgs} args - Arguments to update one Ibadah.
     * @example
     * // Update one Ibadah
     * const ibadah = await prisma.ibadah.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends IbadahUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, IbadahUpdateArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Ibadahs.
     * @param {IbadahDeleteManyArgs} args - Arguments to filter Ibadahs to delete.
     * @example
     * // Delete a few Ibadahs
     * const { count } = await prisma.ibadah.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends IbadahDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, IbadahDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ibadahs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IbadahUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ibadahs
     * const ibadah = await prisma.ibadah.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends IbadahUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, IbadahUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Ibadah.
     * @param {IbadahUpsertArgs} args - Arguments to update or create a Ibadah.
     * @example
     * // Update or create a Ibadah
     * const ibadah = await prisma.ibadah.upsert({
     *   create: {
     *     // ... data to create a Ibadah
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Ibadah we want to update
     *   }
     * })
    **/
    upsert<T extends IbadahUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, IbadahUpsertArgs<ExtArgs>>
    ): Prisma__IbadahClient<$Result.GetResult<Prisma.$IbadahPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Ibadahs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IbadahCountArgs} args - Arguments to filter Ibadahs to count.
     * @example
     * // Count the number of Ibadahs
     * const count = await prisma.ibadah.count({
     *   where: {
     *     // ... the filter for the Ibadahs we want to count
     *   }
     * })
    **/
    count<T extends IbadahCountArgs>(
      args?: Subset<T, IbadahCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IbadahCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Ibadah.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IbadahAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IbadahAggregateArgs>(args: Subset<T, IbadahAggregateArgs>): Prisma.PrismaPromise<GetIbadahAggregateType<T>>

    /**
     * Group by Ibadah.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IbadahGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IbadahGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IbadahGroupByArgs['orderBy'] }
        : { orderBy?: IbadahGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IbadahGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIbadahGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Ibadah model
   */
  readonly fields: IbadahFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Ibadah.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IbadahClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Ibadah model
   */ 
  interface IbadahFieldRefs {
    readonly id: FieldRef<"Ibadah", 'Int'>
    readonly category: FieldRef<"Ibadah", 'String'>
    readonly temaIbadah: FieldRef<"Ibadah", 'String'>
    readonly pemimpin: FieldRef<"Ibadah", 'String'>
    readonly linkVideo: FieldRef<"Ibadah", 'String'>
    readonly infoTambahan: FieldRef<"Ibadah", 'String'>
    readonly waktuMulai: FieldRef<"Ibadah", 'DateTime'>
    readonly waktuSelesai: FieldRef<"Ibadah", 'DateTime'>
    readonly createdAt: FieldRef<"Ibadah", 'DateTime'>
    readonly updatedAt: FieldRef<"Ibadah", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Ibadah findUnique
   */
  export type IbadahFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * Filter, which Ibadah to fetch.
     */
    where: IbadahWhereUniqueInput
  }


  /**
   * Ibadah findUniqueOrThrow
   */
  export type IbadahFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * Filter, which Ibadah to fetch.
     */
    where: IbadahWhereUniqueInput
  }


  /**
   * Ibadah findFirst
   */
  export type IbadahFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * Filter, which Ibadah to fetch.
     */
    where?: IbadahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ibadahs to fetch.
     */
    orderBy?: IbadahOrderByWithRelationInput | IbadahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ibadahs.
     */
    cursor?: IbadahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ibadahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ibadahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ibadahs.
     */
    distinct?: IbadahScalarFieldEnum | IbadahScalarFieldEnum[]
  }


  /**
   * Ibadah findFirstOrThrow
   */
  export type IbadahFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * Filter, which Ibadah to fetch.
     */
    where?: IbadahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ibadahs to fetch.
     */
    orderBy?: IbadahOrderByWithRelationInput | IbadahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ibadahs.
     */
    cursor?: IbadahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ibadahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ibadahs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ibadahs.
     */
    distinct?: IbadahScalarFieldEnum | IbadahScalarFieldEnum[]
  }


  /**
   * Ibadah findMany
   */
  export type IbadahFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * Filter, which Ibadahs to fetch.
     */
    where?: IbadahWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ibadahs to fetch.
     */
    orderBy?: IbadahOrderByWithRelationInput | IbadahOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ibadahs.
     */
    cursor?: IbadahWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ibadahs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ibadahs.
     */
    skip?: number
    distinct?: IbadahScalarFieldEnum | IbadahScalarFieldEnum[]
  }


  /**
   * Ibadah create
   */
  export type IbadahCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * The data needed to create a Ibadah.
     */
    data: XOR<IbadahCreateInput, IbadahUncheckedCreateInput>
  }


  /**
   * Ibadah createMany
   */
  export type IbadahCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ibadahs.
     */
    data: IbadahCreateManyInput | IbadahCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Ibadah update
   */
  export type IbadahUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * The data needed to update a Ibadah.
     */
    data: XOR<IbadahUpdateInput, IbadahUncheckedUpdateInput>
    /**
     * Choose, which Ibadah to update.
     */
    where: IbadahWhereUniqueInput
  }


  /**
   * Ibadah updateMany
   */
  export type IbadahUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ibadahs.
     */
    data: XOR<IbadahUpdateManyMutationInput, IbadahUncheckedUpdateManyInput>
    /**
     * Filter which Ibadahs to update
     */
    where?: IbadahWhereInput
  }


  /**
   * Ibadah upsert
   */
  export type IbadahUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * The filter to search for the Ibadah to update in case it exists.
     */
    where: IbadahWhereUniqueInput
    /**
     * In case the Ibadah found by the `where` argument doesn't exist, create a new Ibadah with this data.
     */
    create: XOR<IbadahCreateInput, IbadahUncheckedCreateInput>
    /**
     * In case the Ibadah was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IbadahUpdateInput, IbadahUncheckedUpdateInput>
  }


  /**
   * Ibadah delete
   */
  export type IbadahDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
    /**
     * Filter which Ibadah to delete.
     */
    where: IbadahWhereUniqueInput
  }


  /**
   * Ibadah deleteMany
   */
  export type IbadahDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ibadahs to delete
     */
    where?: IbadahWhereInput
  }


  /**
   * Ibadah without action
   */
  export type IbadahDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Ibadah
     */
    select?: IbadahSelect<ExtArgs> | null
  }



  /**
   * Model Doa
   */

  export type AggregateDoa = {
    _count: DoaCountAggregateOutputType | null
    _avg: DoaAvgAggregateOutputType | null
    _sum: DoaSumAggregateOutputType | null
    _min: DoaMinAggregateOutputType | null
    _max: DoaMaxAggregateOutputType | null
  }

  export type DoaAvgAggregateOutputType = {
    id: number | null
  }

  export type DoaSumAggregateOutputType = {
    id: number | null
  }

  export type DoaMinAggregateOutputType = {
    id: number | null
    category: string | null
    tema: string | null
    pemimpin: string | null
    infoTambahan: string | null
    waktuMulai: Date | null
    waktuSelesai: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoaMaxAggregateOutputType = {
    id: number | null
    category: string | null
    tema: string | null
    pemimpin: string | null
    infoTambahan: string | null
    waktuMulai: Date | null
    waktuSelesai: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DoaCountAggregateOutputType = {
    id: number
    category: number
    tema: number
    pemimpin: number
    infoTambahan: number
    waktuMulai: number
    waktuSelesai: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DoaAvgAggregateInputType = {
    id?: true
  }

  export type DoaSumAggregateInputType = {
    id?: true
  }

  export type DoaMinAggregateInputType = {
    id?: true
    category?: true
    tema?: true
    pemimpin?: true
    infoTambahan?: true
    waktuMulai?: true
    waktuSelesai?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoaMaxAggregateInputType = {
    id?: true
    category?: true
    tema?: true
    pemimpin?: true
    infoTambahan?: true
    waktuMulai?: true
    waktuSelesai?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DoaCountAggregateInputType = {
    id?: true
    category?: true
    tema?: true
    pemimpin?: true
    infoTambahan?: true
    waktuMulai?: true
    waktuSelesai?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DoaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doa to aggregate.
     */
    where?: DoaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doas to fetch.
     */
    orderBy?: DoaOrderByWithRelationInput | DoaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DoaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Doas
    **/
    _count?: true | DoaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DoaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DoaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DoaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DoaMaxAggregateInputType
  }

  export type GetDoaAggregateType<T extends DoaAggregateArgs> = {
        [P in keyof T & keyof AggregateDoa]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDoa[P]>
      : GetScalarType<T[P], AggregateDoa[P]>
  }




  export type DoaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DoaWhereInput
    orderBy?: DoaOrderByWithAggregationInput | DoaOrderByWithAggregationInput[]
    by: DoaScalarFieldEnum[] | DoaScalarFieldEnum
    having?: DoaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DoaCountAggregateInputType | true
    _avg?: DoaAvgAggregateInputType
    _sum?: DoaSumAggregateInputType
    _min?: DoaMinAggregateInputType
    _max?: DoaMaxAggregateInputType
  }

  export type DoaGroupByOutputType = {
    id: number
    category: string
    tema: string
    pemimpin: string
    infoTambahan: string
    waktuMulai: Date
    waktuSelesai: Date
    createdAt: Date
    updatedAt: Date
    _count: DoaCountAggregateOutputType | null
    _avg: DoaAvgAggregateOutputType | null
    _sum: DoaSumAggregateOutputType | null
    _min: DoaMinAggregateOutputType | null
    _max: DoaMaxAggregateOutputType | null
  }

  type GetDoaGroupByPayload<T extends DoaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DoaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DoaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DoaGroupByOutputType[P]>
            : GetScalarType<T[P], DoaGroupByOutputType[P]>
        }
      >
    >


  export type DoaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    tema?: boolean
    pemimpin?: boolean
    infoTambahan?: boolean
    waktuMulai?: boolean
    waktuSelesai?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["doa"]>

  export type DoaSelectScalar = {
    id?: boolean
    category?: boolean
    tema?: boolean
    pemimpin?: boolean
    infoTambahan?: boolean
    waktuMulai?: boolean
    waktuSelesai?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $DoaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Doa"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category: string
      tema: string
      pemimpin: string
      infoTambahan: string
      waktuMulai: Date
      waktuSelesai: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["doa"]>
    composites: {}
  }


  type DoaGetPayload<S extends boolean | null | undefined | DoaDefaultArgs> = $Result.GetResult<Prisma.$DoaPayload, S>

  type DoaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DoaFindManyArgs, 'select' | 'include'> & {
      select?: DoaCountAggregateInputType | true
    }

  export interface DoaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Doa'], meta: { name: 'Doa' } }
    /**
     * Find zero or one Doa that matches the filter.
     * @param {DoaFindUniqueArgs} args - Arguments to find a Doa
     * @example
     * // Get one Doa
     * const doa = await prisma.doa.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends DoaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, DoaFindUniqueArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Doa that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {DoaFindUniqueOrThrowArgs} args - Arguments to find a Doa
     * @example
     * // Get one Doa
     * const doa = await prisma.doa.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends DoaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Doa that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoaFindFirstArgs} args - Arguments to find a Doa
     * @example
     * // Get one Doa
     * const doa = await prisma.doa.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends DoaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, DoaFindFirstArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Doa that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoaFindFirstOrThrowArgs} args - Arguments to find a Doa
     * @example
     * // Get one Doa
     * const doa = await prisma.doa.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends DoaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, DoaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Doas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Doas
     * const doas = await prisma.doa.findMany()
     * 
     * // Get first 10 Doas
     * const doas = await prisma.doa.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const doaWithIdOnly = await prisma.doa.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends DoaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Doa.
     * @param {DoaCreateArgs} args - Arguments to create a Doa.
     * @example
     * // Create one Doa
     * const Doa = await prisma.doa.create({
     *   data: {
     *     // ... data to create a Doa
     *   }
     * })
     * 
    **/
    create<T extends DoaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, DoaCreateArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Doas.
     *     @param {DoaCreateManyArgs} args - Arguments to create many Doas.
     *     @example
     *     // Create many Doas
     *     const doa = await prisma.doa.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends DoaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Doa.
     * @param {DoaDeleteArgs} args - Arguments to delete one Doa.
     * @example
     * // Delete one Doa
     * const Doa = await prisma.doa.delete({
     *   where: {
     *     // ... filter to delete one Doa
     *   }
     * })
     * 
    **/
    delete<T extends DoaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, DoaDeleteArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Doa.
     * @param {DoaUpdateArgs} args - Arguments to update one Doa.
     * @example
     * // Update one Doa
     * const doa = await prisma.doa.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends DoaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, DoaUpdateArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Doas.
     * @param {DoaDeleteManyArgs} args - Arguments to filter Doas to delete.
     * @example
     * // Delete a few Doas
     * const { count } = await prisma.doa.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends DoaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, DoaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Doas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Doas
     * const doa = await prisma.doa.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends DoaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, DoaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Doa.
     * @param {DoaUpsertArgs} args - Arguments to update or create a Doa.
     * @example
     * // Update or create a Doa
     * const doa = await prisma.doa.upsert({
     *   create: {
     *     // ... data to create a Doa
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Doa we want to update
     *   }
     * })
    **/
    upsert<T extends DoaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, DoaUpsertArgs<ExtArgs>>
    ): Prisma__DoaClient<$Result.GetResult<Prisma.$DoaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Doas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoaCountArgs} args - Arguments to filter Doas to count.
     * @example
     * // Count the number of Doas
     * const count = await prisma.doa.count({
     *   where: {
     *     // ... the filter for the Doas we want to count
     *   }
     * })
    **/
    count<T extends DoaCountArgs>(
      args?: Subset<T, DoaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DoaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Doa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DoaAggregateArgs>(args: Subset<T, DoaAggregateArgs>): Prisma.PrismaPromise<GetDoaAggregateType<T>>

    /**
     * Group by Doa.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DoaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DoaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DoaGroupByArgs['orderBy'] }
        : { orderBy?: DoaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DoaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDoaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Doa model
   */
  readonly fields: DoaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Doa.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DoaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Doa model
   */ 
  interface DoaFieldRefs {
    readonly id: FieldRef<"Doa", 'Int'>
    readonly category: FieldRef<"Doa", 'String'>
    readonly tema: FieldRef<"Doa", 'String'>
    readonly pemimpin: FieldRef<"Doa", 'String'>
    readonly infoTambahan: FieldRef<"Doa", 'String'>
    readonly waktuMulai: FieldRef<"Doa", 'DateTime'>
    readonly waktuSelesai: FieldRef<"Doa", 'DateTime'>
    readonly createdAt: FieldRef<"Doa", 'DateTime'>
    readonly updatedAt: FieldRef<"Doa", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Doa findUnique
   */
  export type DoaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * Filter, which Doa to fetch.
     */
    where: DoaWhereUniqueInput
  }


  /**
   * Doa findUniqueOrThrow
   */
  export type DoaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * Filter, which Doa to fetch.
     */
    where: DoaWhereUniqueInput
  }


  /**
   * Doa findFirst
   */
  export type DoaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * Filter, which Doa to fetch.
     */
    where?: DoaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doas to fetch.
     */
    orderBy?: DoaOrderByWithRelationInput | DoaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doas.
     */
    cursor?: DoaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doas.
     */
    distinct?: DoaScalarFieldEnum | DoaScalarFieldEnum[]
  }


  /**
   * Doa findFirstOrThrow
   */
  export type DoaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * Filter, which Doa to fetch.
     */
    where?: DoaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doas to fetch.
     */
    orderBy?: DoaOrderByWithRelationInput | DoaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Doas.
     */
    cursor?: DoaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Doas.
     */
    distinct?: DoaScalarFieldEnum | DoaScalarFieldEnum[]
  }


  /**
   * Doa findMany
   */
  export type DoaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * Filter, which Doas to fetch.
     */
    where?: DoaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Doas to fetch.
     */
    orderBy?: DoaOrderByWithRelationInput | DoaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Doas.
     */
    cursor?: DoaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Doas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Doas.
     */
    skip?: number
    distinct?: DoaScalarFieldEnum | DoaScalarFieldEnum[]
  }


  /**
   * Doa create
   */
  export type DoaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * The data needed to create a Doa.
     */
    data: XOR<DoaCreateInput, DoaUncheckedCreateInput>
  }


  /**
   * Doa createMany
   */
  export type DoaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Doas.
     */
    data: DoaCreateManyInput | DoaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Doa update
   */
  export type DoaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * The data needed to update a Doa.
     */
    data: XOR<DoaUpdateInput, DoaUncheckedUpdateInput>
    /**
     * Choose, which Doa to update.
     */
    where: DoaWhereUniqueInput
  }


  /**
   * Doa updateMany
   */
  export type DoaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Doas.
     */
    data: XOR<DoaUpdateManyMutationInput, DoaUncheckedUpdateManyInput>
    /**
     * Filter which Doas to update
     */
    where?: DoaWhereInput
  }


  /**
   * Doa upsert
   */
  export type DoaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * The filter to search for the Doa to update in case it exists.
     */
    where: DoaWhereUniqueInput
    /**
     * In case the Doa found by the `where` argument doesn't exist, create a new Doa with this data.
     */
    create: XOR<DoaCreateInput, DoaUncheckedCreateInput>
    /**
     * In case the Doa was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DoaUpdateInput, DoaUncheckedUpdateInput>
  }


  /**
   * Doa delete
   */
  export type DoaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
    /**
     * Filter which Doa to delete.
     */
    where: DoaWhereUniqueInput
  }


  /**
   * Doa deleteMany
   */
  export type DoaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Doas to delete
     */
    where?: DoaWhereInput
  }


  /**
   * Doa without action
   */
  export type DoaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Doa
     */
    select?: DoaSelect<ExtArgs> | null
  }



  /**
   * Model LayananBaptis
   */

  export type AggregateLayananBaptis = {
    _count: LayananBaptisCountAggregateOutputType | null
    _avg: LayananBaptisAvgAggregateOutputType | null
    _sum: LayananBaptisSumAggregateOutputType | null
    _min: LayananBaptisMinAggregateOutputType | null
    _max: LayananBaptisMaxAggregateOutputType | null
  }

  export type LayananBaptisAvgAggregateOutputType = {
    id: number | null
  }

  export type LayananBaptisSumAggregateOutputType = {
    id: number | null
  }

  export type LayananBaptisMinAggregateOutputType = {
    id: number | null
    category: string | null
    infoPendaftaran: string | null
    jadwal: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LayananBaptisMaxAggregateOutputType = {
    id: number | null
    category: string | null
    infoPendaftaran: string | null
    jadwal: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LayananBaptisCountAggregateOutputType = {
    id: number
    category: number
    infoPendaftaran: number
    jadwal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LayananBaptisAvgAggregateInputType = {
    id?: true
  }

  export type LayananBaptisSumAggregateInputType = {
    id?: true
  }

  export type LayananBaptisMinAggregateInputType = {
    id?: true
    category?: true
    infoPendaftaran?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LayananBaptisMaxAggregateInputType = {
    id?: true
    category?: true
    infoPendaftaran?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LayananBaptisCountAggregateInputType = {
    id?: true
    category?: true
    infoPendaftaran?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LayananBaptisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LayananBaptis to aggregate.
     */
    where?: LayananBaptisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananBaptis to fetch.
     */
    orderBy?: LayananBaptisOrderByWithRelationInput | LayananBaptisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LayananBaptisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananBaptis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananBaptis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LayananBaptis
    **/
    _count?: true | LayananBaptisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LayananBaptisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LayananBaptisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LayananBaptisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LayananBaptisMaxAggregateInputType
  }

  export type GetLayananBaptisAggregateType<T extends LayananBaptisAggregateArgs> = {
        [P in keyof T & keyof AggregateLayananBaptis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLayananBaptis[P]>
      : GetScalarType<T[P], AggregateLayananBaptis[P]>
  }




  export type LayananBaptisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LayananBaptisWhereInput
    orderBy?: LayananBaptisOrderByWithAggregationInput | LayananBaptisOrderByWithAggregationInput[]
    by: LayananBaptisScalarFieldEnum[] | LayananBaptisScalarFieldEnum
    having?: LayananBaptisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LayananBaptisCountAggregateInputType | true
    _avg?: LayananBaptisAvgAggregateInputType
    _sum?: LayananBaptisSumAggregateInputType
    _min?: LayananBaptisMinAggregateInputType
    _max?: LayananBaptisMaxAggregateInputType
  }

  export type LayananBaptisGroupByOutputType = {
    id: number
    category: string
    infoPendaftaran: string
    jadwal: Date
    createdAt: Date
    updatedAt: Date
    _count: LayananBaptisCountAggregateOutputType | null
    _avg: LayananBaptisAvgAggregateOutputType | null
    _sum: LayananBaptisSumAggregateOutputType | null
    _min: LayananBaptisMinAggregateOutputType | null
    _max: LayananBaptisMaxAggregateOutputType | null
  }

  type GetLayananBaptisGroupByPayload<T extends LayananBaptisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LayananBaptisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LayananBaptisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LayananBaptisGroupByOutputType[P]>
            : GetScalarType<T[P], LayananBaptisGroupByOutputType[P]>
        }
      >
    >


  export type LayananBaptisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    infoPendaftaran?: boolean
    jadwal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["layananBaptis"]>

  export type LayananBaptisSelectScalar = {
    id?: boolean
    category?: boolean
    infoPendaftaran?: boolean
    jadwal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $LayananBaptisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LayananBaptis"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category: string
      infoPendaftaran: string
      jadwal: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["layananBaptis"]>
    composites: {}
  }


  type LayananBaptisGetPayload<S extends boolean | null | undefined | LayananBaptisDefaultArgs> = $Result.GetResult<Prisma.$LayananBaptisPayload, S>

  type LayananBaptisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LayananBaptisFindManyArgs, 'select' | 'include'> & {
      select?: LayananBaptisCountAggregateInputType | true
    }

  export interface LayananBaptisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LayananBaptis'], meta: { name: 'LayananBaptis' } }
    /**
     * Find zero or one LayananBaptis that matches the filter.
     * @param {LayananBaptisFindUniqueArgs} args - Arguments to find a LayananBaptis
     * @example
     * // Get one LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LayananBaptisFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LayananBaptisFindUniqueArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LayananBaptis that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LayananBaptisFindUniqueOrThrowArgs} args - Arguments to find a LayananBaptis
     * @example
     * // Get one LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LayananBaptisFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananBaptisFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LayananBaptis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananBaptisFindFirstArgs} args - Arguments to find a LayananBaptis
     * @example
     * // Get one LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LayananBaptisFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananBaptisFindFirstArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LayananBaptis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananBaptisFindFirstOrThrowArgs} args - Arguments to find a LayananBaptis
     * @example
     * // Get one LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LayananBaptisFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananBaptisFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LayananBaptis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananBaptisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.findMany()
     * 
     * // Get first 10 LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const layananBaptisWithIdOnly = await prisma.layananBaptis.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LayananBaptisFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananBaptisFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LayananBaptis.
     * @param {LayananBaptisCreateArgs} args - Arguments to create a LayananBaptis.
     * @example
     * // Create one LayananBaptis
     * const LayananBaptis = await prisma.layananBaptis.create({
     *   data: {
     *     // ... data to create a LayananBaptis
     *   }
     * })
     * 
    **/
    create<T extends LayananBaptisCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LayananBaptisCreateArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LayananBaptis.
     *     @param {LayananBaptisCreateManyArgs} args - Arguments to create many LayananBaptis.
     *     @example
     *     // Create many LayananBaptis
     *     const layananBaptis = await prisma.layananBaptis.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LayananBaptisCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananBaptisCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LayananBaptis.
     * @param {LayananBaptisDeleteArgs} args - Arguments to delete one LayananBaptis.
     * @example
     * // Delete one LayananBaptis
     * const LayananBaptis = await prisma.layananBaptis.delete({
     *   where: {
     *     // ... filter to delete one LayananBaptis
     *   }
     * })
     * 
    **/
    delete<T extends LayananBaptisDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LayananBaptisDeleteArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LayananBaptis.
     * @param {LayananBaptisUpdateArgs} args - Arguments to update one LayananBaptis.
     * @example
     * // Update one LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LayananBaptisUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LayananBaptisUpdateArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LayananBaptis.
     * @param {LayananBaptisDeleteManyArgs} args - Arguments to filter LayananBaptis to delete.
     * @example
     * // Delete a few LayananBaptis
     * const { count } = await prisma.layananBaptis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LayananBaptisDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananBaptisDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LayananBaptis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananBaptisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LayananBaptisUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LayananBaptisUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LayananBaptis.
     * @param {LayananBaptisUpsertArgs} args - Arguments to update or create a LayananBaptis.
     * @example
     * // Update or create a LayananBaptis
     * const layananBaptis = await prisma.layananBaptis.upsert({
     *   create: {
     *     // ... data to create a LayananBaptis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LayananBaptis we want to update
     *   }
     * })
    **/
    upsert<T extends LayananBaptisUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LayananBaptisUpsertArgs<ExtArgs>>
    ): Prisma__LayananBaptisClient<$Result.GetResult<Prisma.$LayananBaptisPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LayananBaptis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananBaptisCountArgs} args - Arguments to filter LayananBaptis to count.
     * @example
     * // Count the number of LayananBaptis
     * const count = await prisma.layananBaptis.count({
     *   where: {
     *     // ... the filter for the LayananBaptis we want to count
     *   }
     * })
    **/
    count<T extends LayananBaptisCountArgs>(
      args?: Subset<T, LayananBaptisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LayananBaptisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LayananBaptis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananBaptisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LayananBaptisAggregateArgs>(args: Subset<T, LayananBaptisAggregateArgs>): Prisma.PrismaPromise<GetLayananBaptisAggregateType<T>>

    /**
     * Group by LayananBaptis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananBaptisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LayananBaptisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LayananBaptisGroupByArgs['orderBy'] }
        : { orderBy?: LayananBaptisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LayananBaptisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLayananBaptisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LayananBaptis model
   */
  readonly fields: LayananBaptisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LayananBaptis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LayananBaptisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LayananBaptis model
   */ 
  interface LayananBaptisFieldRefs {
    readonly id: FieldRef<"LayananBaptis", 'Int'>
    readonly category: FieldRef<"LayananBaptis", 'String'>
    readonly infoPendaftaran: FieldRef<"LayananBaptis", 'String'>
    readonly jadwal: FieldRef<"LayananBaptis", 'DateTime'>
    readonly createdAt: FieldRef<"LayananBaptis", 'DateTime'>
    readonly updatedAt: FieldRef<"LayananBaptis", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * LayananBaptis findUnique
   */
  export type LayananBaptisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * Filter, which LayananBaptis to fetch.
     */
    where: LayananBaptisWhereUniqueInput
  }


  /**
   * LayananBaptis findUniqueOrThrow
   */
  export type LayananBaptisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * Filter, which LayananBaptis to fetch.
     */
    where: LayananBaptisWhereUniqueInput
  }


  /**
   * LayananBaptis findFirst
   */
  export type LayananBaptisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * Filter, which LayananBaptis to fetch.
     */
    where?: LayananBaptisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananBaptis to fetch.
     */
    orderBy?: LayananBaptisOrderByWithRelationInput | LayananBaptisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LayananBaptis.
     */
    cursor?: LayananBaptisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananBaptis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananBaptis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LayananBaptis.
     */
    distinct?: LayananBaptisScalarFieldEnum | LayananBaptisScalarFieldEnum[]
  }


  /**
   * LayananBaptis findFirstOrThrow
   */
  export type LayananBaptisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * Filter, which LayananBaptis to fetch.
     */
    where?: LayananBaptisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananBaptis to fetch.
     */
    orderBy?: LayananBaptisOrderByWithRelationInput | LayananBaptisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LayananBaptis.
     */
    cursor?: LayananBaptisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananBaptis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananBaptis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LayananBaptis.
     */
    distinct?: LayananBaptisScalarFieldEnum | LayananBaptisScalarFieldEnum[]
  }


  /**
   * LayananBaptis findMany
   */
  export type LayananBaptisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * Filter, which LayananBaptis to fetch.
     */
    where?: LayananBaptisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananBaptis to fetch.
     */
    orderBy?: LayananBaptisOrderByWithRelationInput | LayananBaptisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LayananBaptis.
     */
    cursor?: LayananBaptisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananBaptis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananBaptis.
     */
    skip?: number
    distinct?: LayananBaptisScalarFieldEnum | LayananBaptisScalarFieldEnum[]
  }


  /**
   * LayananBaptis create
   */
  export type LayananBaptisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * The data needed to create a LayananBaptis.
     */
    data: XOR<LayananBaptisCreateInput, LayananBaptisUncheckedCreateInput>
  }


  /**
   * LayananBaptis createMany
   */
  export type LayananBaptisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LayananBaptis.
     */
    data: LayananBaptisCreateManyInput | LayananBaptisCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LayananBaptis update
   */
  export type LayananBaptisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * The data needed to update a LayananBaptis.
     */
    data: XOR<LayananBaptisUpdateInput, LayananBaptisUncheckedUpdateInput>
    /**
     * Choose, which LayananBaptis to update.
     */
    where: LayananBaptisWhereUniqueInput
  }


  /**
   * LayananBaptis updateMany
   */
  export type LayananBaptisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LayananBaptis.
     */
    data: XOR<LayananBaptisUpdateManyMutationInput, LayananBaptisUncheckedUpdateManyInput>
    /**
     * Filter which LayananBaptis to update
     */
    where?: LayananBaptisWhereInput
  }


  /**
   * LayananBaptis upsert
   */
  export type LayananBaptisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * The filter to search for the LayananBaptis to update in case it exists.
     */
    where: LayananBaptisWhereUniqueInput
    /**
     * In case the LayananBaptis found by the `where` argument doesn't exist, create a new LayananBaptis with this data.
     */
    create: XOR<LayananBaptisCreateInput, LayananBaptisUncheckedCreateInput>
    /**
     * In case the LayananBaptis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LayananBaptisUpdateInput, LayananBaptisUncheckedUpdateInput>
  }


  /**
   * LayananBaptis delete
   */
  export type LayananBaptisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
    /**
     * Filter which LayananBaptis to delete.
     */
    where: LayananBaptisWhereUniqueInput
  }


  /**
   * LayananBaptis deleteMany
   */
  export type LayananBaptisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LayananBaptis to delete
     */
    where?: LayananBaptisWhereInput
  }


  /**
   * LayananBaptis without action
   */
  export type LayananBaptisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananBaptis
     */
    select?: LayananBaptisSelect<ExtArgs> | null
  }



  /**
   * Model LayananPernikahan
   */

  export type AggregateLayananPernikahan = {
    _count: LayananPernikahanCountAggregateOutputType | null
    _avg: LayananPernikahanAvgAggregateOutputType | null
    _sum: LayananPernikahanSumAggregateOutputType | null
    _min: LayananPernikahanMinAggregateOutputType | null
    _max: LayananPernikahanMaxAggregateOutputType | null
  }

  export type LayananPernikahanAvgAggregateOutputType = {
    id: number | null
  }

  export type LayananPernikahanSumAggregateOutputType = {
    id: number | null
  }

  export type LayananPernikahanMinAggregateOutputType = {
    id: number | null
    category: $Enums.CategoryPernikahan | null
    infoPendaftaran: string | null
    jadwal: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LayananPernikahanMaxAggregateOutputType = {
    id: number | null
    category: $Enums.CategoryPernikahan | null
    infoPendaftaran: string | null
    jadwal: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LayananPernikahanCountAggregateOutputType = {
    id: number
    category: number
    infoPendaftaran: number
    jadwal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LayananPernikahanAvgAggregateInputType = {
    id?: true
  }

  export type LayananPernikahanSumAggregateInputType = {
    id?: true
  }

  export type LayananPernikahanMinAggregateInputType = {
    id?: true
    category?: true
    infoPendaftaran?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LayananPernikahanMaxAggregateInputType = {
    id?: true
    category?: true
    infoPendaftaran?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LayananPernikahanCountAggregateInputType = {
    id?: true
    category?: true
    infoPendaftaran?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LayananPernikahanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LayananPernikahan to aggregate.
     */
    where?: LayananPernikahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananPernikahans to fetch.
     */
    orderBy?: LayananPernikahanOrderByWithRelationInput | LayananPernikahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LayananPernikahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananPernikahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananPernikahans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LayananPernikahans
    **/
    _count?: true | LayananPernikahanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LayananPernikahanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LayananPernikahanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LayananPernikahanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LayananPernikahanMaxAggregateInputType
  }

  export type GetLayananPernikahanAggregateType<T extends LayananPernikahanAggregateArgs> = {
        [P in keyof T & keyof AggregateLayananPernikahan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLayananPernikahan[P]>
      : GetScalarType<T[P], AggregateLayananPernikahan[P]>
  }




  export type LayananPernikahanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LayananPernikahanWhereInput
    orderBy?: LayananPernikahanOrderByWithAggregationInput | LayananPernikahanOrderByWithAggregationInput[]
    by: LayananPernikahanScalarFieldEnum[] | LayananPernikahanScalarFieldEnum
    having?: LayananPernikahanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LayananPernikahanCountAggregateInputType | true
    _avg?: LayananPernikahanAvgAggregateInputType
    _sum?: LayananPernikahanSumAggregateInputType
    _min?: LayananPernikahanMinAggregateInputType
    _max?: LayananPernikahanMaxAggregateInputType
  }

  export type LayananPernikahanGroupByOutputType = {
    id: number
    category: $Enums.CategoryPernikahan
    infoPendaftaran: string
    jadwal: Date
    createdAt: Date
    updatedAt: Date
    _count: LayananPernikahanCountAggregateOutputType | null
    _avg: LayananPernikahanAvgAggregateOutputType | null
    _sum: LayananPernikahanSumAggregateOutputType | null
    _min: LayananPernikahanMinAggregateOutputType | null
    _max: LayananPernikahanMaxAggregateOutputType | null
  }

  type GetLayananPernikahanGroupByPayload<T extends LayananPernikahanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LayananPernikahanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LayananPernikahanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LayananPernikahanGroupByOutputType[P]>
            : GetScalarType<T[P], LayananPernikahanGroupByOutputType[P]>
        }
      >
    >


  export type LayananPernikahanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    category?: boolean
    infoPendaftaran?: boolean
    jadwal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["layananPernikahan"]>

  export type LayananPernikahanSelectScalar = {
    id?: boolean
    category?: boolean
    infoPendaftaran?: boolean
    jadwal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $LayananPernikahanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "LayananPernikahan"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      category: $Enums.CategoryPernikahan
      infoPendaftaran: string
      jadwal: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["layananPernikahan"]>
    composites: {}
  }


  type LayananPernikahanGetPayload<S extends boolean | null | undefined | LayananPernikahanDefaultArgs> = $Result.GetResult<Prisma.$LayananPernikahanPayload, S>

  type LayananPernikahanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LayananPernikahanFindManyArgs, 'select' | 'include'> & {
      select?: LayananPernikahanCountAggregateInputType | true
    }

  export interface LayananPernikahanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['LayananPernikahan'], meta: { name: 'LayananPernikahan' } }
    /**
     * Find zero or one LayananPernikahan that matches the filter.
     * @param {LayananPernikahanFindUniqueArgs} args - Arguments to find a LayananPernikahan
     * @example
     * // Get one LayananPernikahan
     * const layananPernikahan = await prisma.layananPernikahan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LayananPernikahanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, LayananPernikahanFindUniqueArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one LayananPernikahan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {LayananPernikahanFindUniqueOrThrowArgs} args - Arguments to find a LayananPernikahan
     * @example
     * // Get one LayananPernikahan
     * const layananPernikahan = await prisma.layananPernikahan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends LayananPernikahanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananPernikahanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first LayananPernikahan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananPernikahanFindFirstArgs} args - Arguments to find a LayananPernikahan
     * @example
     * // Get one LayananPernikahan
     * const layananPernikahan = await prisma.layananPernikahan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LayananPernikahanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananPernikahanFindFirstArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first LayananPernikahan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananPernikahanFindFirstOrThrowArgs} args - Arguments to find a LayananPernikahan
     * @example
     * // Get one LayananPernikahan
     * const layananPernikahan = await prisma.layananPernikahan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends LayananPernikahanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananPernikahanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more LayananPernikahans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananPernikahanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LayananPernikahans
     * const layananPernikahans = await prisma.layananPernikahan.findMany()
     * 
     * // Get first 10 LayananPernikahans
     * const layananPernikahans = await prisma.layananPernikahan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const layananPernikahanWithIdOnly = await prisma.layananPernikahan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LayananPernikahanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananPernikahanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a LayananPernikahan.
     * @param {LayananPernikahanCreateArgs} args - Arguments to create a LayananPernikahan.
     * @example
     * // Create one LayananPernikahan
     * const LayananPernikahan = await prisma.layananPernikahan.create({
     *   data: {
     *     // ... data to create a LayananPernikahan
     *   }
     * })
     * 
    **/
    create<T extends LayananPernikahanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, LayananPernikahanCreateArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many LayananPernikahans.
     *     @param {LayananPernikahanCreateManyArgs} args - Arguments to create many LayananPernikahans.
     *     @example
     *     // Create many LayananPernikahans
     *     const layananPernikahan = await prisma.layananPernikahan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends LayananPernikahanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananPernikahanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a LayananPernikahan.
     * @param {LayananPernikahanDeleteArgs} args - Arguments to delete one LayananPernikahan.
     * @example
     * // Delete one LayananPernikahan
     * const LayananPernikahan = await prisma.layananPernikahan.delete({
     *   where: {
     *     // ... filter to delete one LayananPernikahan
     *   }
     * })
     * 
    **/
    delete<T extends LayananPernikahanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, LayananPernikahanDeleteArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one LayananPernikahan.
     * @param {LayananPernikahanUpdateArgs} args - Arguments to update one LayananPernikahan.
     * @example
     * // Update one LayananPernikahan
     * const layananPernikahan = await prisma.layananPernikahan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LayananPernikahanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, LayananPernikahanUpdateArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more LayananPernikahans.
     * @param {LayananPernikahanDeleteManyArgs} args - Arguments to filter LayananPernikahans to delete.
     * @example
     * // Delete a few LayananPernikahans
     * const { count } = await prisma.layananPernikahan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LayananPernikahanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, LayananPernikahanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more LayananPernikahans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananPernikahanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LayananPernikahans
     * const layananPernikahan = await prisma.layananPernikahan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LayananPernikahanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, LayananPernikahanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one LayananPernikahan.
     * @param {LayananPernikahanUpsertArgs} args - Arguments to update or create a LayananPernikahan.
     * @example
     * // Update or create a LayananPernikahan
     * const layananPernikahan = await prisma.layananPernikahan.upsert({
     *   create: {
     *     // ... data to create a LayananPernikahan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LayananPernikahan we want to update
     *   }
     * })
    **/
    upsert<T extends LayananPernikahanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, LayananPernikahanUpsertArgs<ExtArgs>>
    ): Prisma__LayananPernikahanClient<$Result.GetResult<Prisma.$LayananPernikahanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of LayananPernikahans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananPernikahanCountArgs} args - Arguments to filter LayananPernikahans to count.
     * @example
     * // Count the number of LayananPernikahans
     * const count = await prisma.layananPernikahan.count({
     *   where: {
     *     // ... the filter for the LayananPernikahans we want to count
     *   }
     * })
    **/
    count<T extends LayananPernikahanCountArgs>(
      args?: Subset<T, LayananPernikahanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LayananPernikahanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LayananPernikahan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananPernikahanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LayananPernikahanAggregateArgs>(args: Subset<T, LayananPernikahanAggregateArgs>): Prisma.PrismaPromise<GetLayananPernikahanAggregateType<T>>

    /**
     * Group by LayananPernikahan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LayananPernikahanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LayananPernikahanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LayananPernikahanGroupByArgs['orderBy'] }
        : { orderBy?: LayananPernikahanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LayananPernikahanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLayananPernikahanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the LayananPernikahan model
   */
  readonly fields: LayananPernikahanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for LayananPernikahan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LayananPernikahanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the LayananPernikahan model
   */ 
  interface LayananPernikahanFieldRefs {
    readonly id: FieldRef<"LayananPernikahan", 'Int'>
    readonly category: FieldRef<"LayananPernikahan", 'CategoryPernikahan'>
    readonly infoPendaftaran: FieldRef<"LayananPernikahan", 'String'>
    readonly jadwal: FieldRef<"LayananPernikahan", 'DateTime'>
    readonly createdAt: FieldRef<"LayananPernikahan", 'DateTime'>
    readonly updatedAt: FieldRef<"LayananPernikahan", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * LayananPernikahan findUnique
   */
  export type LayananPernikahanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * Filter, which LayananPernikahan to fetch.
     */
    where: LayananPernikahanWhereUniqueInput
  }


  /**
   * LayananPernikahan findUniqueOrThrow
   */
  export type LayananPernikahanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * Filter, which LayananPernikahan to fetch.
     */
    where: LayananPernikahanWhereUniqueInput
  }


  /**
   * LayananPernikahan findFirst
   */
  export type LayananPernikahanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * Filter, which LayananPernikahan to fetch.
     */
    where?: LayananPernikahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananPernikahans to fetch.
     */
    orderBy?: LayananPernikahanOrderByWithRelationInput | LayananPernikahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LayananPernikahans.
     */
    cursor?: LayananPernikahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananPernikahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananPernikahans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LayananPernikahans.
     */
    distinct?: LayananPernikahanScalarFieldEnum | LayananPernikahanScalarFieldEnum[]
  }


  /**
   * LayananPernikahan findFirstOrThrow
   */
  export type LayananPernikahanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * Filter, which LayananPernikahan to fetch.
     */
    where?: LayananPernikahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananPernikahans to fetch.
     */
    orderBy?: LayananPernikahanOrderByWithRelationInput | LayananPernikahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LayananPernikahans.
     */
    cursor?: LayananPernikahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananPernikahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananPernikahans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LayananPernikahans.
     */
    distinct?: LayananPernikahanScalarFieldEnum | LayananPernikahanScalarFieldEnum[]
  }


  /**
   * LayananPernikahan findMany
   */
  export type LayananPernikahanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * Filter, which LayananPernikahans to fetch.
     */
    where?: LayananPernikahanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LayananPernikahans to fetch.
     */
    orderBy?: LayananPernikahanOrderByWithRelationInput | LayananPernikahanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LayananPernikahans.
     */
    cursor?: LayananPernikahanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LayananPernikahans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LayananPernikahans.
     */
    skip?: number
    distinct?: LayananPernikahanScalarFieldEnum | LayananPernikahanScalarFieldEnum[]
  }


  /**
   * LayananPernikahan create
   */
  export type LayananPernikahanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * The data needed to create a LayananPernikahan.
     */
    data: XOR<LayananPernikahanCreateInput, LayananPernikahanUncheckedCreateInput>
  }


  /**
   * LayananPernikahan createMany
   */
  export type LayananPernikahanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many LayananPernikahans.
     */
    data: LayananPernikahanCreateManyInput | LayananPernikahanCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * LayananPernikahan update
   */
  export type LayananPernikahanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * The data needed to update a LayananPernikahan.
     */
    data: XOR<LayananPernikahanUpdateInput, LayananPernikahanUncheckedUpdateInput>
    /**
     * Choose, which LayananPernikahan to update.
     */
    where: LayananPernikahanWhereUniqueInput
  }


  /**
   * LayananPernikahan updateMany
   */
  export type LayananPernikahanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update LayananPernikahans.
     */
    data: XOR<LayananPernikahanUpdateManyMutationInput, LayananPernikahanUncheckedUpdateManyInput>
    /**
     * Filter which LayananPernikahans to update
     */
    where?: LayananPernikahanWhereInput
  }


  /**
   * LayananPernikahan upsert
   */
  export type LayananPernikahanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * The filter to search for the LayananPernikahan to update in case it exists.
     */
    where: LayananPernikahanWhereUniqueInput
    /**
     * In case the LayananPernikahan found by the `where` argument doesn't exist, create a new LayananPernikahan with this data.
     */
    create: XOR<LayananPernikahanCreateInput, LayananPernikahanUncheckedCreateInput>
    /**
     * In case the LayananPernikahan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LayananPernikahanUpdateInput, LayananPernikahanUncheckedUpdateInput>
  }


  /**
   * LayananPernikahan delete
   */
  export type LayananPernikahanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
    /**
     * Filter which LayananPernikahan to delete.
     */
    where: LayananPernikahanWhereUniqueInput
  }


  /**
   * LayananPernikahan deleteMany
   */
  export type LayananPernikahanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which LayananPernikahans to delete
     */
    where?: LayananPernikahanWhereInput
  }


  /**
   * LayananPernikahan without action
   */
  export type LayananPernikahanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LayananPernikahan
     */
    select?: LayananPernikahanSelect<ExtArgs> | null
  }



  /**
   * Model KonselingPendeta
   */

  export type AggregateKonselingPendeta = {
    _count: KonselingPendetaCountAggregateOutputType | null
    _avg: KonselingPendetaAvgAggregateOutputType | null
    _sum: KonselingPendetaSumAggregateOutputType | null
    _min: KonselingPendetaMinAggregateOutputType | null
    _max: KonselingPendetaMaxAggregateOutputType | null
  }

  export type KonselingPendetaAvgAggregateOutputType = {
    id: number | null
  }

  export type KonselingPendetaSumAggregateOutputType = {
    id: number | null
  }

  export type KonselingPendetaMinAggregateOutputType = {
    id: number | null
    info: string | null
    jadwal: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KonselingPendetaMaxAggregateOutputType = {
    id: number | null
    info: string | null
    jadwal: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KonselingPendetaCountAggregateOutputType = {
    id: number
    info: number
    jadwal: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KonselingPendetaAvgAggregateInputType = {
    id?: true
  }

  export type KonselingPendetaSumAggregateInputType = {
    id?: true
  }

  export type KonselingPendetaMinAggregateInputType = {
    id?: true
    info?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KonselingPendetaMaxAggregateInputType = {
    id?: true
    info?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KonselingPendetaCountAggregateInputType = {
    id?: true
    info?: true
    jadwal?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KonselingPendetaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KonselingPendeta to aggregate.
     */
    where?: KonselingPendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KonselingPendetas to fetch.
     */
    orderBy?: KonselingPendetaOrderByWithRelationInput | KonselingPendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KonselingPendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KonselingPendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KonselingPendetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned KonselingPendetas
    **/
    _count?: true | KonselingPendetaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KonselingPendetaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KonselingPendetaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KonselingPendetaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KonselingPendetaMaxAggregateInputType
  }

  export type GetKonselingPendetaAggregateType<T extends KonselingPendetaAggregateArgs> = {
        [P in keyof T & keyof AggregateKonselingPendeta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKonselingPendeta[P]>
      : GetScalarType<T[P], AggregateKonselingPendeta[P]>
  }




  export type KonselingPendetaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KonselingPendetaWhereInput
    orderBy?: KonselingPendetaOrderByWithAggregationInput | KonselingPendetaOrderByWithAggregationInput[]
    by: KonselingPendetaScalarFieldEnum[] | KonselingPendetaScalarFieldEnum
    having?: KonselingPendetaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KonselingPendetaCountAggregateInputType | true
    _avg?: KonselingPendetaAvgAggregateInputType
    _sum?: KonselingPendetaSumAggregateInputType
    _min?: KonselingPendetaMinAggregateInputType
    _max?: KonselingPendetaMaxAggregateInputType
  }

  export type KonselingPendetaGroupByOutputType = {
    id: number
    info: string
    jadwal: Date
    createdAt: Date
    updatedAt: Date
    _count: KonselingPendetaCountAggregateOutputType | null
    _avg: KonselingPendetaAvgAggregateOutputType | null
    _sum: KonselingPendetaSumAggregateOutputType | null
    _min: KonselingPendetaMinAggregateOutputType | null
    _max: KonselingPendetaMaxAggregateOutputType | null
  }

  type GetKonselingPendetaGroupByPayload<T extends KonselingPendetaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KonselingPendetaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KonselingPendetaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KonselingPendetaGroupByOutputType[P]>
            : GetScalarType<T[P], KonselingPendetaGroupByOutputType[P]>
        }
      >
    >


  export type KonselingPendetaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    info?: boolean
    jadwal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["konselingPendeta"]>

  export type KonselingPendetaSelectScalar = {
    id?: boolean
    info?: boolean
    jadwal?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $KonselingPendetaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "KonselingPendeta"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      info: string
      jadwal: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["konselingPendeta"]>
    composites: {}
  }


  type KonselingPendetaGetPayload<S extends boolean | null | undefined | KonselingPendetaDefaultArgs> = $Result.GetResult<Prisma.$KonselingPendetaPayload, S>

  type KonselingPendetaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KonselingPendetaFindManyArgs, 'select' | 'include'> & {
      select?: KonselingPendetaCountAggregateInputType | true
    }

  export interface KonselingPendetaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['KonselingPendeta'], meta: { name: 'KonselingPendeta' } }
    /**
     * Find zero or one KonselingPendeta that matches the filter.
     * @param {KonselingPendetaFindUniqueArgs} args - Arguments to find a KonselingPendeta
     * @example
     * // Get one KonselingPendeta
     * const konselingPendeta = await prisma.konselingPendeta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KonselingPendetaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KonselingPendetaFindUniqueArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one KonselingPendeta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KonselingPendetaFindUniqueOrThrowArgs} args - Arguments to find a KonselingPendeta
     * @example
     * // Get one KonselingPendeta
     * const konselingPendeta = await prisma.konselingPendeta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KonselingPendetaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KonselingPendetaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first KonselingPendeta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonselingPendetaFindFirstArgs} args - Arguments to find a KonselingPendeta
     * @example
     * // Get one KonselingPendeta
     * const konselingPendeta = await prisma.konselingPendeta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KonselingPendetaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KonselingPendetaFindFirstArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first KonselingPendeta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonselingPendetaFindFirstOrThrowArgs} args - Arguments to find a KonselingPendeta
     * @example
     * // Get one KonselingPendeta
     * const konselingPendeta = await prisma.konselingPendeta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KonselingPendetaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KonselingPendetaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more KonselingPendetas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonselingPendetaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KonselingPendetas
     * const konselingPendetas = await prisma.konselingPendeta.findMany()
     * 
     * // Get first 10 KonselingPendetas
     * const konselingPendetas = await prisma.konselingPendeta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const konselingPendetaWithIdOnly = await prisma.konselingPendeta.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KonselingPendetaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KonselingPendetaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a KonselingPendeta.
     * @param {KonselingPendetaCreateArgs} args - Arguments to create a KonselingPendeta.
     * @example
     * // Create one KonselingPendeta
     * const KonselingPendeta = await prisma.konselingPendeta.create({
     *   data: {
     *     // ... data to create a KonselingPendeta
     *   }
     * })
     * 
    **/
    create<T extends KonselingPendetaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KonselingPendetaCreateArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many KonselingPendetas.
     *     @param {KonselingPendetaCreateManyArgs} args - Arguments to create many KonselingPendetas.
     *     @example
     *     // Create many KonselingPendetas
     *     const konselingPendeta = await prisma.konselingPendeta.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KonselingPendetaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KonselingPendetaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a KonselingPendeta.
     * @param {KonselingPendetaDeleteArgs} args - Arguments to delete one KonselingPendeta.
     * @example
     * // Delete one KonselingPendeta
     * const KonselingPendeta = await prisma.konselingPendeta.delete({
     *   where: {
     *     // ... filter to delete one KonselingPendeta
     *   }
     * })
     * 
    **/
    delete<T extends KonselingPendetaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KonselingPendetaDeleteArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one KonselingPendeta.
     * @param {KonselingPendetaUpdateArgs} args - Arguments to update one KonselingPendeta.
     * @example
     * // Update one KonselingPendeta
     * const konselingPendeta = await prisma.konselingPendeta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KonselingPendetaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KonselingPendetaUpdateArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more KonselingPendetas.
     * @param {KonselingPendetaDeleteManyArgs} args - Arguments to filter KonselingPendetas to delete.
     * @example
     * // Delete a few KonselingPendetas
     * const { count } = await prisma.konselingPendeta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KonselingPendetaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KonselingPendetaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KonselingPendetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonselingPendetaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KonselingPendetas
     * const konselingPendeta = await prisma.konselingPendeta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KonselingPendetaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KonselingPendetaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one KonselingPendeta.
     * @param {KonselingPendetaUpsertArgs} args - Arguments to update or create a KonselingPendeta.
     * @example
     * // Update or create a KonselingPendeta
     * const konselingPendeta = await prisma.konselingPendeta.upsert({
     *   create: {
     *     // ... data to create a KonselingPendeta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KonselingPendeta we want to update
     *   }
     * })
    **/
    upsert<T extends KonselingPendetaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KonselingPendetaUpsertArgs<ExtArgs>>
    ): Prisma__KonselingPendetaClient<$Result.GetResult<Prisma.$KonselingPendetaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of KonselingPendetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonselingPendetaCountArgs} args - Arguments to filter KonselingPendetas to count.
     * @example
     * // Count the number of KonselingPendetas
     * const count = await prisma.konselingPendeta.count({
     *   where: {
     *     // ... the filter for the KonselingPendetas we want to count
     *   }
     * })
    **/
    count<T extends KonselingPendetaCountArgs>(
      args?: Subset<T, KonselingPendetaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KonselingPendetaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KonselingPendeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonselingPendetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KonselingPendetaAggregateArgs>(args: Subset<T, KonselingPendetaAggregateArgs>): Prisma.PrismaPromise<GetKonselingPendetaAggregateType<T>>

    /**
     * Group by KonselingPendeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KonselingPendetaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KonselingPendetaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KonselingPendetaGroupByArgs['orderBy'] }
        : { orderBy?: KonselingPendetaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KonselingPendetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKonselingPendetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the KonselingPendeta model
   */
  readonly fields: KonselingPendetaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for KonselingPendeta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KonselingPendetaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the KonselingPendeta model
   */ 
  interface KonselingPendetaFieldRefs {
    readonly id: FieldRef<"KonselingPendeta", 'Int'>
    readonly info: FieldRef<"KonselingPendeta", 'String'>
    readonly jadwal: FieldRef<"KonselingPendeta", 'DateTime'>
    readonly createdAt: FieldRef<"KonselingPendeta", 'DateTime'>
    readonly updatedAt: FieldRef<"KonselingPendeta", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * KonselingPendeta findUnique
   */
  export type KonselingPendetaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * Filter, which KonselingPendeta to fetch.
     */
    where: KonselingPendetaWhereUniqueInput
  }


  /**
   * KonselingPendeta findUniqueOrThrow
   */
  export type KonselingPendetaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * Filter, which KonselingPendeta to fetch.
     */
    where: KonselingPendetaWhereUniqueInput
  }


  /**
   * KonselingPendeta findFirst
   */
  export type KonselingPendetaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * Filter, which KonselingPendeta to fetch.
     */
    where?: KonselingPendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KonselingPendetas to fetch.
     */
    orderBy?: KonselingPendetaOrderByWithRelationInput | KonselingPendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KonselingPendetas.
     */
    cursor?: KonselingPendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KonselingPendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KonselingPendetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KonselingPendetas.
     */
    distinct?: KonselingPendetaScalarFieldEnum | KonselingPendetaScalarFieldEnum[]
  }


  /**
   * KonselingPendeta findFirstOrThrow
   */
  export type KonselingPendetaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * Filter, which KonselingPendeta to fetch.
     */
    where?: KonselingPendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KonselingPendetas to fetch.
     */
    orderBy?: KonselingPendetaOrderByWithRelationInput | KonselingPendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for KonselingPendetas.
     */
    cursor?: KonselingPendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KonselingPendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KonselingPendetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of KonselingPendetas.
     */
    distinct?: KonselingPendetaScalarFieldEnum | KonselingPendetaScalarFieldEnum[]
  }


  /**
   * KonselingPendeta findMany
   */
  export type KonselingPendetaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * Filter, which KonselingPendetas to fetch.
     */
    where?: KonselingPendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of KonselingPendetas to fetch.
     */
    orderBy?: KonselingPendetaOrderByWithRelationInput | KonselingPendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing KonselingPendetas.
     */
    cursor?: KonselingPendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` KonselingPendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` KonselingPendetas.
     */
    skip?: number
    distinct?: KonselingPendetaScalarFieldEnum | KonselingPendetaScalarFieldEnum[]
  }


  /**
   * KonselingPendeta create
   */
  export type KonselingPendetaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * The data needed to create a KonselingPendeta.
     */
    data: XOR<KonselingPendetaCreateInput, KonselingPendetaUncheckedCreateInput>
  }


  /**
   * KonselingPendeta createMany
   */
  export type KonselingPendetaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many KonselingPendetas.
     */
    data: KonselingPendetaCreateManyInput | KonselingPendetaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * KonselingPendeta update
   */
  export type KonselingPendetaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * The data needed to update a KonselingPendeta.
     */
    data: XOR<KonselingPendetaUpdateInput, KonselingPendetaUncheckedUpdateInput>
    /**
     * Choose, which KonselingPendeta to update.
     */
    where: KonselingPendetaWhereUniqueInput
  }


  /**
   * KonselingPendeta updateMany
   */
  export type KonselingPendetaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update KonselingPendetas.
     */
    data: XOR<KonselingPendetaUpdateManyMutationInput, KonselingPendetaUncheckedUpdateManyInput>
    /**
     * Filter which KonselingPendetas to update
     */
    where?: KonselingPendetaWhereInput
  }


  /**
   * KonselingPendeta upsert
   */
  export type KonselingPendetaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * The filter to search for the KonselingPendeta to update in case it exists.
     */
    where: KonselingPendetaWhereUniqueInput
    /**
     * In case the KonselingPendeta found by the `where` argument doesn't exist, create a new KonselingPendeta with this data.
     */
    create: XOR<KonselingPendetaCreateInput, KonselingPendetaUncheckedCreateInput>
    /**
     * In case the KonselingPendeta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KonselingPendetaUpdateInput, KonselingPendetaUncheckedUpdateInput>
  }


  /**
   * KonselingPendeta delete
   */
  export type KonselingPendetaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
    /**
     * Filter which KonselingPendeta to delete.
     */
    where: KonselingPendetaWhereUniqueInput
  }


  /**
   * KonselingPendeta deleteMany
   */
  export type KonselingPendetaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which KonselingPendetas to delete
     */
    where?: KonselingPendetaWhereInput
  }


  /**
   * KonselingPendeta without action
   */
  export type KonselingPendetaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KonselingPendeta
     */
    select?: KonselingPendetaSelect<ExtArgs> | null
  }



  /**
   * Model OrangTua
   */

  export type AggregateOrangTua = {
    _count: OrangTuaCountAggregateOutputType | null
    _avg: OrangTuaAvgAggregateOutputType | null
    _sum: OrangTuaSumAggregateOutputType | null
    _min: OrangTuaMinAggregateOutputType | null
    _max: OrangTuaMaxAggregateOutputType | null
  }

  export type OrangTuaAvgAggregateOutputType = {
    id: number | null
    noAnggota: number | null
  }

  export type OrangTuaSumAggregateOutputType = {
    id: number | null
    noAnggota: number | null
  }

  export type OrangTuaMinAggregateOutputType = {
    id: number | null
    noAnggota: number | null
    namaDepan: string | null
    namaTengah: string | null
    namaKeluarga: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrangTuaMaxAggregateOutputType = {
    id: number | null
    noAnggota: number | null
    namaDepan: string | null
    namaTengah: string | null
    namaKeluarga: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type OrangTuaCountAggregateOutputType = {
    id: number
    noAnggota: number
    namaDepan: number
    namaTengah: number
    namaKeluarga: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type OrangTuaAvgAggregateInputType = {
    id?: true
    noAnggota?: true
  }

  export type OrangTuaSumAggregateInputType = {
    id?: true
    noAnggota?: true
  }

  export type OrangTuaMinAggregateInputType = {
    id?: true
    noAnggota?: true
    namaDepan?: true
    namaTengah?: true
    namaKeluarga?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrangTuaMaxAggregateInputType = {
    id?: true
    noAnggota?: true
    namaDepan?: true
    namaTengah?: true
    namaKeluarga?: true
    createdAt?: true
    updatedAt?: true
  }

  export type OrangTuaCountAggregateInputType = {
    id?: true
    noAnggota?: true
    namaDepan?: true
    namaTengah?: true
    namaKeluarga?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OrangTuaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrangTua to aggregate.
     */
    where?: OrangTuaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrangTuas to fetch.
     */
    orderBy?: OrangTuaOrderByWithRelationInput | OrangTuaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrangTuaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrangTuas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrangTuas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrangTuas
    **/
    _count?: true | OrangTuaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrangTuaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrangTuaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrangTuaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrangTuaMaxAggregateInputType
  }

  export type GetOrangTuaAggregateType<T extends OrangTuaAggregateArgs> = {
        [P in keyof T & keyof AggregateOrangTua]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrangTua[P]>
      : GetScalarType<T[P], AggregateOrangTua[P]>
  }




  export type OrangTuaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrangTuaWhereInput
    orderBy?: OrangTuaOrderByWithAggregationInput | OrangTuaOrderByWithAggregationInput[]
    by: OrangTuaScalarFieldEnum[] | OrangTuaScalarFieldEnum
    having?: OrangTuaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrangTuaCountAggregateInputType | true
    _avg?: OrangTuaAvgAggregateInputType
    _sum?: OrangTuaSumAggregateInputType
    _min?: OrangTuaMinAggregateInputType
    _max?: OrangTuaMaxAggregateInputType
  }

  export type OrangTuaGroupByOutputType = {
    id: number
    noAnggota: number | null
    namaDepan: string
    namaTengah: string | null
    namaKeluarga: string
    createdAt: Date
    updatedAt: Date
    _count: OrangTuaCountAggregateOutputType | null
    _avg: OrangTuaAvgAggregateOutputType | null
    _sum: OrangTuaSumAggregateOutputType | null
    _min: OrangTuaMinAggregateOutputType | null
    _max: OrangTuaMaxAggregateOutputType | null
  }

  type GetOrangTuaGroupByPayload<T extends OrangTuaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrangTuaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrangTuaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrangTuaGroupByOutputType[P]>
            : GetScalarType<T[P], OrangTuaGroupByOutputType[P]>
        }
      >
    >


  export type OrangTuaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    noAnggota?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    namaKeluarga?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    jemaat?: boolean | OrangTua$jemaatArgs<ExtArgs>
    ayah?: boolean | OrangTua$ayahArgs<ExtArgs>
    ibu?: boolean | OrangTua$ibuArgs<ExtArgs>
    _count?: boolean | OrangTuaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["orangTua"]>

  export type OrangTuaSelectScalar = {
    id?: boolean
    noAnggota?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    namaKeluarga?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type OrangTuaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    jemaat?: boolean | OrangTua$jemaatArgs<ExtArgs>
    ayah?: boolean | OrangTua$ayahArgs<ExtArgs>
    ibu?: boolean | OrangTua$ibuArgs<ExtArgs>
    _count?: boolean | OrangTuaCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $OrangTuaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OrangTua"
    objects: {
      jemaat: Prisma.$JemaatPayload<ExtArgs> | null
      ayah: Prisma.$JemaatPayload<ExtArgs>[]
      ibu: Prisma.$JemaatPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      noAnggota: number | null
      namaDepan: string
      namaTengah: string | null
      namaKeluarga: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["orangTua"]>
    composites: {}
  }


  type OrangTuaGetPayload<S extends boolean | null | undefined | OrangTuaDefaultArgs> = $Result.GetResult<Prisma.$OrangTuaPayload, S>

  type OrangTuaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OrangTuaFindManyArgs, 'select' | 'include'> & {
      select?: OrangTuaCountAggregateInputType | true
    }

  export interface OrangTuaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrangTua'], meta: { name: 'OrangTua' } }
    /**
     * Find zero or one OrangTua that matches the filter.
     * @param {OrangTuaFindUniqueArgs} args - Arguments to find a OrangTua
     * @example
     * // Get one OrangTua
     * const orangTua = await prisma.orangTua.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrangTuaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, OrangTuaFindUniqueArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one OrangTua that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrangTuaFindUniqueOrThrowArgs} args - Arguments to find a OrangTua
     * @example
     * // Get one OrangTua
     * const orangTua = await prisma.orangTua.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrangTuaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrangTuaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first OrangTua that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrangTuaFindFirstArgs} args - Arguments to find a OrangTua
     * @example
     * // Get one OrangTua
     * const orangTua = await prisma.orangTua.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrangTuaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, OrangTuaFindFirstArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first OrangTua that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrangTuaFindFirstOrThrowArgs} args - Arguments to find a OrangTua
     * @example
     * // Get one OrangTua
     * const orangTua = await prisma.orangTua.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrangTuaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrangTuaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more OrangTuas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrangTuaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrangTuas
     * const orangTuas = await prisma.orangTua.findMany()
     * 
     * // Get first 10 OrangTuas
     * const orangTuas = await prisma.orangTua.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const orangTuaWithIdOnly = await prisma.orangTua.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrangTuaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrangTuaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a OrangTua.
     * @param {OrangTuaCreateArgs} args - Arguments to create a OrangTua.
     * @example
     * // Create one OrangTua
     * const OrangTua = await prisma.orangTua.create({
     *   data: {
     *     // ... data to create a OrangTua
     *   }
     * })
     * 
    **/
    create<T extends OrangTuaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrangTuaCreateArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many OrangTuas.
     *     @param {OrangTuaCreateManyArgs} args - Arguments to create many OrangTuas.
     *     @example
     *     // Create many OrangTuas
     *     const orangTua = await prisma.orangTua.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrangTuaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrangTuaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrangTua.
     * @param {OrangTuaDeleteArgs} args - Arguments to delete one OrangTua.
     * @example
     * // Delete one OrangTua
     * const OrangTua = await prisma.orangTua.delete({
     *   where: {
     *     // ... filter to delete one OrangTua
     *   }
     * })
     * 
    **/
    delete<T extends OrangTuaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrangTuaDeleteArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one OrangTua.
     * @param {OrangTuaUpdateArgs} args - Arguments to update one OrangTua.
     * @example
     * // Update one OrangTua
     * const orangTua = await prisma.orangTua.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrangTuaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrangTuaUpdateArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more OrangTuas.
     * @param {OrangTuaDeleteManyArgs} args - Arguments to filter OrangTuas to delete.
     * @example
     * // Delete a few OrangTuas
     * const { count } = await prisma.orangTua.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrangTuaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrangTuaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrangTuas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrangTuaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrangTuas
     * const orangTua = await prisma.orangTua.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrangTuaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrangTuaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrangTua.
     * @param {OrangTuaUpsertArgs} args - Arguments to update or create a OrangTua.
     * @example
     * // Update or create a OrangTua
     * const orangTua = await prisma.orangTua.upsert({
     *   create: {
     *     // ... data to create a OrangTua
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrangTua we want to update
     *   }
     * })
    **/
    upsert<T extends OrangTuaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrangTuaUpsertArgs<ExtArgs>>
    ): Prisma__OrangTuaClient<$Result.GetResult<Prisma.$OrangTuaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of OrangTuas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrangTuaCountArgs} args - Arguments to filter OrangTuas to count.
     * @example
     * // Count the number of OrangTuas
     * const count = await prisma.orangTua.count({
     *   where: {
     *     // ... the filter for the OrangTuas we want to count
     *   }
     * })
    **/
    count<T extends OrangTuaCountArgs>(
      args?: Subset<T, OrangTuaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrangTuaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrangTua.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrangTuaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrangTuaAggregateArgs>(args: Subset<T, OrangTuaAggregateArgs>): Prisma.PrismaPromise<GetOrangTuaAggregateType<T>>

    /**
     * Group by OrangTua.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrangTuaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrangTuaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrangTuaGroupByArgs['orderBy'] }
        : { orderBy?: OrangTuaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrangTuaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrangTuaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OrangTua model
   */
  readonly fields: OrangTuaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OrangTua.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrangTuaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    jemaat<T extends OrangTua$jemaatArgs<ExtArgs> = {}>(args?: Subset<T, OrangTua$jemaatArgs<ExtArgs>>): Prisma__JemaatClient<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    ayah<T extends OrangTua$ayahArgs<ExtArgs> = {}>(args?: Subset<T, OrangTua$ayahArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findMany'> | Null>;

    ibu<T extends OrangTua$ibuArgs<ExtArgs> = {}>(args?: Subset<T, OrangTua$ibuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JemaatPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the OrangTua model
   */ 
  interface OrangTuaFieldRefs {
    readonly id: FieldRef<"OrangTua", 'Int'>
    readonly noAnggota: FieldRef<"OrangTua", 'Int'>
    readonly namaDepan: FieldRef<"OrangTua", 'String'>
    readonly namaTengah: FieldRef<"OrangTua", 'String'>
    readonly namaKeluarga: FieldRef<"OrangTua", 'String'>
    readonly createdAt: FieldRef<"OrangTua", 'DateTime'>
    readonly updatedAt: FieldRef<"OrangTua", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * OrangTua findUnique
   */
  export type OrangTuaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * Filter, which OrangTua to fetch.
     */
    where: OrangTuaWhereUniqueInput
  }


  /**
   * OrangTua findUniqueOrThrow
   */
  export type OrangTuaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * Filter, which OrangTua to fetch.
     */
    where: OrangTuaWhereUniqueInput
  }


  /**
   * OrangTua findFirst
   */
  export type OrangTuaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * Filter, which OrangTua to fetch.
     */
    where?: OrangTuaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrangTuas to fetch.
     */
    orderBy?: OrangTuaOrderByWithRelationInput | OrangTuaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrangTuas.
     */
    cursor?: OrangTuaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrangTuas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrangTuas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrangTuas.
     */
    distinct?: OrangTuaScalarFieldEnum | OrangTuaScalarFieldEnum[]
  }


  /**
   * OrangTua findFirstOrThrow
   */
  export type OrangTuaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * Filter, which OrangTua to fetch.
     */
    where?: OrangTuaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrangTuas to fetch.
     */
    orderBy?: OrangTuaOrderByWithRelationInput | OrangTuaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrangTuas.
     */
    cursor?: OrangTuaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrangTuas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrangTuas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrangTuas.
     */
    distinct?: OrangTuaScalarFieldEnum | OrangTuaScalarFieldEnum[]
  }


  /**
   * OrangTua findMany
   */
  export type OrangTuaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * Filter, which OrangTuas to fetch.
     */
    where?: OrangTuaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrangTuas to fetch.
     */
    orderBy?: OrangTuaOrderByWithRelationInput | OrangTuaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrangTuas.
     */
    cursor?: OrangTuaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrangTuas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrangTuas.
     */
    skip?: number
    distinct?: OrangTuaScalarFieldEnum | OrangTuaScalarFieldEnum[]
  }


  /**
   * OrangTua create
   */
  export type OrangTuaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * The data needed to create a OrangTua.
     */
    data: XOR<OrangTuaCreateInput, OrangTuaUncheckedCreateInput>
  }


  /**
   * OrangTua createMany
   */
  export type OrangTuaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrangTuas.
     */
    data: OrangTuaCreateManyInput | OrangTuaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * OrangTua update
   */
  export type OrangTuaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * The data needed to update a OrangTua.
     */
    data: XOR<OrangTuaUpdateInput, OrangTuaUncheckedUpdateInput>
    /**
     * Choose, which OrangTua to update.
     */
    where: OrangTuaWhereUniqueInput
  }


  /**
   * OrangTua updateMany
   */
  export type OrangTuaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrangTuas.
     */
    data: XOR<OrangTuaUpdateManyMutationInput, OrangTuaUncheckedUpdateManyInput>
    /**
     * Filter which OrangTuas to update
     */
    where?: OrangTuaWhereInput
  }


  /**
   * OrangTua upsert
   */
  export type OrangTuaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * The filter to search for the OrangTua to update in case it exists.
     */
    where: OrangTuaWhereUniqueInput
    /**
     * In case the OrangTua found by the `where` argument doesn't exist, create a new OrangTua with this data.
     */
    create: XOR<OrangTuaCreateInput, OrangTuaUncheckedCreateInput>
    /**
     * In case the OrangTua was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrangTuaUpdateInput, OrangTuaUncheckedUpdateInput>
  }


  /**
   * OrangTua delete
   */
  export type OrangTuaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
    /**
     * Filter which OrangTua to delete.
     */
    where: OrangTuaWhereUniqueInput
  }


  /**
   * OrangTua deleteMany
   */
  export type OrangTuaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrangTuas to delete
     */
    where?: OrangTuaWhereInput
  }


  /**
   * OrangTua.jemaat
   */
  export type OrangTua$jemaatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    where?: JemaatWhereInput
  }


  /**
   * OrangTua.ayah
   */
  export type OrangTua$ayahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    where?: JemaatWhereInput
    orderBy?: JemaatOrderByWithRelationInput | JemaatOrderByWithRelationInput[]
    cursor?: JemaatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JemaatScalarFieldEnum | JemaatScalarFieldEnum[]
  }


  /**
   * OrangTua.ibu
   */
  export type OrangTua$ibuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Jemaat
     */
    select?: JemaatSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: JemaatInclude<ExtArgs> | null
    where?: JemaatWhereInput
    orderBy?: JemaatOrderByWithRelationInput | JemaatOrderByWithRelationInput[]
    cursor?: JemaatWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JemaatScalarFieldEnum | JemaatScalarFieldEnum[]
  }


  /**
   * OrangTua without action
   */
  export type OrangTuaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrangTua
     */
    select?: OrangTuaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrangTuaInclude<ExtArgs> | null
  }



  /**
   * Model Kegiatan
   */

  export type AggregateKegiatan = {
    _count: KegiatanCountAggregateOutputType | null
    _avg: KegiatanAvgAggregateOutputType | null
    _sum: KegiatanSumAggregateOutputType | null
    _min: KegiatanMinAggregateOutputType | null
    _max: KegiatanMaxAggregateOutputType | null
  }

  export type KegiatanAvgAggregateOutputType = {
    id: number | null
  }

  export type KegiatanSumAggregateOutputType = {
    id: number | null
  }

  export type KegiatanMinAggregateOutputType = {
    id: number | null
    komisi: string | null
    judulKegiatan: string | null
    deskripsiKegiatan: string | null
    imageURL: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KegiatanMaxAggregateOutputType = {
    id: number | null
    komisi: string | null
    judulKegiatan: string | null
    deskripsiKegiatan: string | null
    imageURL: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KegiatanCountAggregateOutputType = {
    id: number
    komisi: number
    judulKegiatan: number
    deskripsiKegiatan: number
    imageURL: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KegiatanAvgAggregateInputType = {
    id?: true
  }

  export type KegiatanSumAggregateInputType = {
    id?: true
  }

  export type KegiatanMinAggregateInputType = {
    id?: true
    komisi?: true
    judulKegiatan?: true
    deskripsiKegiatan?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KegiatanMaxAggregateInputType = {
    id?: true
    komisi?: true
    judulKegiatan?: true
    deskripsiKegiatan?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KegiatanCountAggregateInputType = {
    id?: true
    komisi?: true
    judulKegiatan?: true
    deskripsiKegiatan?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KegiatanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kegiatan to aggregate.
     */
    where?: KegiatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kegiatans to fetch.
     */
    orderBy?: KegiatanOrderByWithRelationInput | KegiatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KegiatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kegiatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kegiatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Kegiatans
    **/
    _count?: true | KegiatanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KegiatanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KegiatanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KegiatanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KegiatanMaxAggregateInputType
  }

  export type GetKegiatanAggregateType<T extends KegiatanAggregateArgs> = {
        [P in keyof T & keyof AggregateKegiatan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKegiatan[P]>
      : GetScalarType<T[P], AggregateKegiatan[P]>
  }




  export type KegiatanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KegiatanWhereInput
    orderBy?: KegiatanOrderByWithAggregationInput | KegiatanOrderByWithAggregationInput[]
    by: KegiatanScalarFieldEnum[] | KegiatanScalarFieldEnum
    having?: KegiatanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KegiatanCountAggregateInputType | true
    _avg?: KegiatanAvgAggregateInputType
    _sum?: KegiatanSumAggregateInputType
    _min?: KegiatanMinAggregateInputType
    _max?: KegiatanMaxAggregateInputType
  }

  export type KegiatanGroupByOutputType = {
    id: number
    komisi: string
    judulKegiatan: string
    deskripsiKegiatan: string
    imageURL: string
    createdAt: Date
    updatedAt: Date
    _count: KegiatanCountAggregateOutputType | null
    _avg: KegiatanAvgAggregateOutputType | null
    _sum: KegiatanSumAggregateOutputType | null
    _min: KegiatanMinAggregateOutputType | null
    _max: KegiatanMaxAggregateOutputType | null
  }

  type GetKegiatanGroupByPayload<T extends KegiatanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KegiatanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KegiatanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KegiatanGroupByOutputType[P]>
            : GetScalarType<T[P], KegiatanGroupByOutputType[P]>
        }
      >
    >


  export type KegiatanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    komisi?: boolean
    judulKegiatan?: boolean
    deskripsiKegiatan?: boolean
    imageURL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["kegiatan"]>

  export type KegiatanSelectScalar = {
    id?: boolean
    komisi?: boolean
    judulKegiatan?: boolean
    deskripsiKegiatan?: boolean
    imageURL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $KegiatanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Kegiatan"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      komisi: string
      judulKegiatan: string
      deskripsiKegiatan: string
      imageURL: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["kegiatan"]>
    composites: {}
  }


  type KegiatanGetPayload<S extends boolean | null | undefined | KegiatanDefaultArgs> = $Result.GetResult<Prisma.$KegiatanPayload, S>

  type KegiatanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KegiatanFindManyArgs, 'select' | 'include'> & {
      select?: KegiatanCountAggregateInputType | true
    }

  export interface KegiatanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Kegiatan'], meta: { name: 'Kegiatan' } }
    /**
     * Find zero or one Kegiatan that matches the filter.
     * @param {KegiatanFindUniqueArgs} args - Arguments to find a Kegiatan
     * @example
     * // Get one Kegiatan
     * const kegiatan = await prisma.kegiatan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KegiatanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KegiatanFindUniqueArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Kegiatan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KegiatanFindUniqueOrThrowArgs} args - Arguments to find a Kegiatan
     * @example
     * // Get one Kegiatan
     * const kegiatan = await prisma.kegiatan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KegiatanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KegiatanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Kegiatan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KegiatanFindFirstArgs} args - Arguments to find a Kegiatan
     * @example
     * // Get one Kegiatan
     * const kegiatan = await prisma.kegiatan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KegiatanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KegiatanFindFirstArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Kegiatan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KegiatanFindFirstOrThrowArgs} args - Arguments to find a Kegiatan
     * @example
     * // Get one Kegiatan
     * const kegiatan = await prisma.kegiatan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KegiatanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KegiatanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Kegiatans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KegiatanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kegiatans
     * const kegiatans = await prisma.kegiatan.findMany()
     * 
     * // Get first 10 Kegiatans
     * const kegiatans = await prisma.kegiatan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kegiatanWithIdOnly = await prisma.kegiatan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KegiatanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KegiatanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Kegiatan.
     * @param {KegiatanCreateArgs} args - Arguments to create a Kegiatan.
     * @example
     * // Create one Kegiatan
     * const Kegiatan = await prisma.kegiatan.create({
     *   data: {
     *     // ... data to create a Kegiatan
     *   }
     * })
     * 
    **/
    create<T extends KegiatanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KegiatanCreateArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Kegiatans.
     *     @param {KegiatanCreateManyArgs} args - Arguments to create many Kegiatans.
     *     @example
     *     // Create many Kegiatans
     *     const kegiatan = await prisma.kegiatan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KegiatanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KegiatanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kegiatan.
     * @param {KegiatanDeleteArgs} args - Arguments to delete one Kegiatan.
     * @example
     * // Delete one Kegiatan
     * const Kegiatan = await prisma.kegiatan.delete({
     *   where: {
     *     // ... filter to delete one Kegiatan
     *   }
     * })
     * 
    **/
    delete<T extends KegiatanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KegiatanDeleteArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Kegiatan.
     * @param {KegiatanUpdateArgs} args - Arguments to update one Kegiatan.
     * @example
     * // Update one Kegiatan
     * const kegiatan = await prisma.kegiatan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KegiatanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KegiatanUpdateArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Kegiatans.
     * @param {KegiatanDeleteManyArgs} args - Arguments to filter Kegiatans to delete.
     * @example
     * // Delete a few Kegiatans
     * const { count } = await prisma.kegiatan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KegiatanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KegiatanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kegiatans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KegiatanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kegiatans
     * const kegiatan = await prisma.kegiatan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KegiatanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KegiatanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kegiatan.
     * @param {KegiatanUpsertArgs} args - Arguments to update or create a Kegiatan.
     * @example
     * // Update or create a Kegiatan
     * const kegiatan = await prisma.kegiatan.upsert({
     *   create: {
     *     // ... data to create a Kegiatan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kegiatan we want to update
     *   }
     * })
    **/
    upsert<T extends KegiatanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KegiatanUpsertArgs<ExtArgs>>
    ): Prisma__KegiatanClient<$Result.GetResult<Prisma.$KegiatanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Kegiatans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KegiatanCountArgs} args - Arguments to filter Kegiatans to count.
     * @example
     * // Count the number of Kegiatans
     * const count = await prisma.kegiatan.count({
     *   where: {
     *     // ... the filter for the Kegiatans we want to count
     *   }
     * })
    **/
    count<T extends KegiatanCountArgs>(
      args?: Subset<T, KegiatanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KegiatanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kegiatan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KegiatanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KegiatanAggregateArgs>(args: Subset<T, KegiatanAggregateArgs>): Prisma.PrismaPromise<GetKegiatanAggregateType<T>>

    /**
     * Group by Kegiatan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KegiatanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KegiatanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KegiatanGroupByArgs['orderBy'] }
        : { orderBy?: KegiatanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KegiatanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKegiatanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Kegiatan model
   */
  readonly fields: KegiatanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Kegiatan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KegiatanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Kegiatan model
   */ 
  interface KegiatanFieldRefs {
    readonly id: FieldRef<"Kegiatan", 'Int'>
    readonly komisi: FieldRef<"Kegiatan", 'String'>
    readonly judulKegiatan: FieldRef<"Kegiatan", 'String'>
    readonly deskripsiKegiatan: FieldRef<"Kegiatan", 'String'>
    readonly imageURL: FieldRef<"Kegiatan", 'String'>
    readonly createdAt: FieldRef<"Kegiatan", 'DateTime'>
    readonly updatedAt: FieldRef<"Kegiatan", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Kegiatan findUnique
   */
  export type KegiatanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * Filter, which Kegiatan to fetch.
     */
    where: KegiatanWhereUniqueInput
  }


  /**
   * Kegiatan findUniqueOrThrow
   */
  export type KegiatanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * Filter, which Kegiatan to fetch.
     */
    where: KegiatanWhereUniqueInput
  }


  /**
   * Kegiatan findFirst
   */
  export type KegiatanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * Filter, which Kegiatan to fetch.
     */
    where?: KegiatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kegiatans to fetch.
     */
    orderBy?: KegiatanOrderByWithRelationInput | KegiatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kegiatans.
     */
    cursor?: KegiatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kegiatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kegiatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kegiatans.
     */
    distinct?: KegiatanScalarFieldEnum | KegiatanScalarFieldEnum[]
  }


  /**
   * Kegiatan findFirstOrThrow
   */
  export type KegiatanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * Filter, which Kegiatan to fetch.
     */
    where?: KegiatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kegiatans to fetch.
     */
    orderBy?: KegiatanOrderByWithRelationInput | KegiatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Kegiatans.
     */
    cursor?: KegiatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kegiatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kegiatans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Kegiatans.
     */
    distinct?: KegiatanScalarFieldEnum | KegiatanScalarFieldEnum[]
  }


  /**
   * Kegiatan findMany
   */
  export type KegiatanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * Filter, which Kegiatans to fetch.
     */
    where?: KegiatanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Kegiatans to fetch.
     */
    orderBy?: KegiatanOrderByWithRelationInput | KegiatanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Kegiatans.
     */
    cursor?: KegiatanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Kegiatans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Kegiatans.
     */
    skip?: number
    distinct?: KegiatanScalarFieldEnum | KegiatanScalarFieldEnum[]
  }


  /**
   * Kegiatan create
   */
  export type KegiatanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * The data needed to create a Kegiatan.
     */
    data: XOR<KegiatanCreateInput, KegiatanUncheckedCreateInput>
  }


  /**
   * Kegiatan createMany
   */
  export type KegiatanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Kegiatans.
     */
    data: KegiatanCreateManyInput | KegiatanCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Kegiatan update
   */
  export type KegiatanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * The data needed to update a Kegiatan.
     */
    data: XOR<KegiatanUpdateInput, KegiatanUncheckedUpdateInput>
    /**
     * Choose, which Kegiatan to update.
     */
    where: KegiatanWhereUniqueInput
  }


  /**
   * Kegiatan updateMany
   */
  export type KegiatanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Kegiatans.
     */
    data: XOR<KegiatanUpdateManyMutationInput, KegiatanUncheckedUpdateManyInput>
    /**
     * Filter which Kegiatans to update
     */
    where?: KegiatanWhereInput
  }


  /**
   * Kegiatan upsert
   */
  export type KegiatanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * The filter to search for the Kegiatan to update in case it exists.
     */
    where: KegiatanWhereUniqueInput
    /**
     * In case the Kegiatan found by the `where` argument doesn't exist, create a new Kegiatan with this data.
     */
    create: XOR<KegiatanCreateInput, KegiatanUncheckedCreateInput>
    /**
     * In case the Kegiatan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KegiatanUpdateInput, KegiatanUncheckedUpdateInput>
  }


  /**
   * Kegiatan delete
   */
  export type KegiatanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
    /**
     * Filter which Kegiatan to delete.
     */
    where: KegiatanWhereUniqueInput
  }


  /**
   * Kegiatan deleteMany
   */
  export type KegiatanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Kegiatans to delete
     */
    where?: KegiatanWhereInput
  }


  /**
   * Kegiatan without action
   */
  export type KegiatanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Kegiatan
     */
    select?: KegiatanSelect<ExtArgs> | null
  }



  /**
   * Model Karyawan
   */

  export type AggregateKaryawan = {
    _count: KaryawanCountAggregateOutputType | null
    _avg: KaryawanAvgAggregateOutputType | null
    _sum: KaryawanSumAggregateOutputType | null
    _min: KaryawanMinAggregateOutputType | null
    _max: KaryawanMaxAggregateOutputType | null
  }

  export type KaryawanAvgAggregateOutputType = {
    id: number | null
  }

  export type KaryawanSumAggregateOutputType = {
    id: number | null
  }

  export type KaryawanMinAggregateOutputType = {
    id: number | null
    namaDepan: string | null
    namaTengah: string | null
    status: boolean | null
    namaKeluarga: string | null
    imageURL: string | null
    posisi: $Enums.posisiKaryawan | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KaryawanMaxAggregateOutputType = {
    id: number | null
    namaDepan: string | null
    namaTengah: string | null
    status: boolean | null
    namaKeluarga: string | null
    imageURL: string | null
    posisi: $Enums.posisiKaryawan | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type KaryawanCountAggregateOutputType = {
    id: number
    namaDepan: number
    namaTengah: number
    status: number
    namaKeluarga: number
    imageURL: number
    posisi: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type KaryawanAvgAggregateInputType = {
    id?: true
  }

  export type KaryawanSumAggregateInputType = {
    id?: true
  }

  export type KaryawanMinAggregateInputType = {
    id?: true
    namaDepan?: true
    namaTengah?: true
    status?: true
    namaKeluarga?: true
    imageURL?: true
    posisi?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KaryawanMaxAggregateInputType = {
    id?: true
    namaDepan?: true
    namaTengah?: true
    status?: true
    namaKeluarga?: true
    imageURL?: true
    posisi?: true
    createdAt?: true
    updatedAt?: true
  }

  export type KaryawanCountAggregateInputType = {
    id?: true
    namaDepan?: true
    namaTengah?: true
    status?: true
    namaKeluarga?: true
    imageURL?: true
    posisi?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type KaryawanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Karyawan to aggregate.
     */
    where?: KaryawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Karyawans to fetch.
     */
    orderBy?: KaryawanOrderByWithRelationInput | KaryawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: KaryawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Karyawans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Karyawans
    **/
    _count?: true | KaryawanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KaryawanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KaryawanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KaryawanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KaryawanMaxAggregateInputType
  }

  export type GetKaryawanAggregateType<T extends KaryawanAggregateArgs> = {
        [P in keyof T & keyof AggregateKaryawan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKaryawan[P]>
      : GetScalarType<T[P], AggregateKaryawan[P]>
  }




  export type KaryawanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: KaryawanWhereInput
    orderBy?: KaryawanOrderByWithAggregationInput | KaryawanOrderByWithAggregationInput[]
    by: KaryawanScalarFieldEnum[] | KaryawanScalarFieldEnum
    having?: KaryawanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KaryawanCountAggregateInputType | true
    _avg?: KaryawanAvgAggregateInputType
    _sum?: KaryawanSumAggregateInputType
    _min?: KaryawanMinAggregateInputType
    _max?: KaryawanMaxAggregateInputType
  }

  export type KaryawanGroupByOutputType = {
    id: number
    namaDepan: string
    namaTengah: string | null
    status: boolean
    namaKeluarga: string
    imageURL: string
    posisi: $Enums.posisiKaryawan
    createdAt: Date
    updatedAt: Date
    _count: KaryawanCountAggregateOutputType | null
    _avg: KaryawanAvgAggregateOutputType | null
    _sum: KaryawanSumAggregateOutputType | null
    _min: KaryawanMinAggregateOutputType | null
    _max: KaryawanMaxAggregateOutputType | null
  }

  type GetKaryawanGroupByPayload<T extends KaryawanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KaryawanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KaryawanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KaryawanGroupByOutputType[P]>
            : GetScalarType<T[P], KaryawanGroupByOutputType[P]>
        }
      >
    >


  export type KaryawanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    status?: boolean
    namaKeluarga?: boolean
    imageURL?: boolean
    posisi?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["karyawan"]>

  export type KaryawanSelectScalar = {
    id?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    status?: boolean
    namaKeluarga?: boolean
    imageURL?: boolean
    posisi?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $KaryawanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Karyawan"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      namaDepan: string
      namaTengah: string | null
      status: boolean
      namaKeluarga: string
      imageURL: string
      posisi: $Enums.posisiKaryawan
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["karyawan"]>
    composites: {}
  }


  type KaryawanGetPayload<S extends boolean | null | undefined | KaryawanDefaultArgs> = $Result.GetResult<Prisma.$KaryawanPayload, S>

  type KaryawanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<KaryawanFindManyArgs, 'select' | 'include'> & {
      select?: KaryawanCountAggregateInputType | true
    }

  export interface KaryawanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Karyawan'], meta: { name: 'Karyawan' } }
    /**
     * Find zero or one Karyawan that matches the filter.
     * @param {KaryawanFindUniqueArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends KaryawanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, KaryawanFindUniqueArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Karyawan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {KaryawanFindUniqueOrThrowArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends KaryawanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KaryawanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Karyawan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanFindFirstArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends KaryawanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, KaryawanFindFirstArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Karyawan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanFindFirstOrThrowArgs} args - Arguments to find a Karyawan
     * @example
     * // Get one Karyawan
     * const karyawan = await prisma.karyawan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends KaryawanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, KaryawanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Karyawans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Karyawans
     * const karyawans = await prisma.karyawan.findMany()
     * 
     * // Get first 10 Karyawans
     * const karyawans = await prisma.karyawan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const karyawanWithIdOnly = await prisma.karyawan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends KaryawanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KaryawanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Karyawan.
     * @param {KaryawanCreateArgs} args - Arguments to create a Karyawan.
     * @example
     * // Create one Karyawan
     * const Karyawan = await prisma.karyawan.create({
     *   data: {
     *     // ... data to create a Karyawan
     *   }
     * })
     * 
    **/
    create<T extends KaryawanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, KaryawanCreateArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Karyawans.
     *     @param {KaryawanCreateManyArgs} args - Arguments to create many Karyawans.
     *     @example
     *     // Create many Karyawans
     *     const karyawan = await prisma.karyawan.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends KaryawanCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KaryawanCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Karyawan.
     * @param {KaryawanDeleteArgs} args - Arguments to delete one Karyawan.
     * @example
     * // Delete one Karyawan
     * const Karyawan = await prisma.karyawan.delete({
     *   where: {
     *     // ... filter to delete one Karyawan
     *   }
     * })
     * 
    **/
    delete<T extends KaryawanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, KaryawanDeleteArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Karyawan.
     * @param {KaryawanUpdateArgs} args - Arguments to update one Karyawan.
     * @example
     * // Update one Karyawan
     * const karyawan = await prisma.karyawan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends KaryawanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, KaryawanUpdateArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Karyawans.
     * @param {KaryawanDeleteManyArgs} args - Arguments to filter Karyawans to delete.
     * @example
     * // Delete a few Karyawans
     * const { count } = await prisma.karyawan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends KaryawanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, KaryawanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Karyawans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Karyawans
     * const karyawan = await prisma.karyawan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends KaryawanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, KaryawanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Karyawan.
     * @param {KaryawanUpsertArgs} args - Arguments to update or create a Karyawan.
     * @example
     * // Update or create a Karyawan
     * const karyawan = await prisma.karyawan.upsert({
     *   create: {
     *     // ... data to create a Karyawan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Karyawan we want to update
     *   }
     * })
    **/
    upsert<T extends KaryawanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, KaryawanUpsertArgs<ExtArgs>>
    ): Prisma__KaryawanClient<$Result.GetResult<Prisma.$KaryawanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Karyawans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanCountArgs} args - Arguments to filter Karyawans to count.
     * @example
     * // Count the number of Karyawans
     * const count = await prisma.karyawan.count({
     *   where: {
     *     // ... the filter for the Karyawans we want to count
     *   }
     * })
    **/
    count<T extends KaryawanCountArgs>(
      args?: Subset<T, KaryawanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KaryawanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Karyawan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KaryawanAggregateArgs>(args: Subset<T, KaryawanAggregateArgs>): Prisma.PrismaPromise<GetKaryawanAggregateType<T>>

    /**
     * Group by Karyawan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KaryawanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends KaryawanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: KaryawanGroupByArgs['orderBy'] }
        : { orderBy?: KaryawanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, KaryawanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKaryawanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Karyawan model
   */
  readonly fields: KaryawanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Karyawan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__KaryawanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Karyawan model
   */ 
  interface KaryawanFieldRefs {
    readonly id: FieldRef<"Karyawan", 'Int'>
    readonly namaDepan: FieldRef<"Karyawan", 'String'>
    readonly namaTengah: FieldRef<"Karyawan", 'String'>
    readonly status: FieldRef<"Karyawan", 'Boolean'>
    readonly namaKeluarga: FieldRef<"Karyawan", 'String'>
    readonly imageURL: FieldRef<"Karyawan", 'String'>
    readonly posisi: FieldRef<"Karyawan", 'posisiKaryawan'>
    readonly createdAt: FieldRef<"Karyawan", 'DateTime'>
    readonly updatedAt: FieldRef<"Karyawan", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Karyawan findUnique
   */
  export type KaryawanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * Filter, which Karyawan to fetch.
     */
    where: KaryawanWhereUniqueInput
  }


  /**
   * Karyawan findUniqueOrThrow
   */
  export type KaryawanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * Filter, which Karyawan to fetch.
     */
    where: KaryawanWhereUniqueInput
  }


  /**
   * Karyawan findFirst
   */
  export type KaryawanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * Filter, which Karyawan to fetch.
     */
    where?: KaryawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Karyawans to fetch.
     */
    orderBy?: KaryawanOrderByWithRelationInput | KaryawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Karyawans.
     */
    cursor?: KaryawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Karyawans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Karyawans.
     */
    distinct?: KaryawanScalarFieldEnum | KaryawanScalarFieldEnum[]
  }


  /**
   * Karyawan findFirstOrThrow
   */
  export type KaryawanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * Filter, which Karyawan to fetch.
     */
    where?: KaryawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Karyawans to fetch.
     */
    orderBy?: KaryawanOrderByWithRelationInput | KaryawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Karyawans.
     */
    cursor?: KaryawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Karyawans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Karyawans.
     */
    distinct?: KaryawanScalarFieldEnum | KaryawanScalarFieldEnum[]
  }


  /**
   * Karyawan findMany
   */
  export type KaryawanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * Filter, which Karyawans to fetch.
     */
    where?: KaryawanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Karyawans to fetch.
     */
    orderBy?: KaryawanOrderByWithRelationInput | KaryawanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Karyawans.
     */
    cursor?: KaryawanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Karyawans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Karyawans.
     */
    skip?: number
    distinct?: KaryawanScalarFieldEnum | KaryawanScalarFieldEnum[]
  }


  /**
   * Karyawan create
   */
  export type KaryawanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * The data needed to create a Karyawan.
     */
    data: XOR<KaryawanCreateInput, KaryawanUncheckedCreateInput>
  }


  /**
   * Karyawan createMany
   */
  export type KaryawanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Karyawans.
     */
    data: KaryawanCreateManyInput | KaryawanCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Karyawan update
   */
  export type KaryawanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * The data needed to update a Karyawan.
     */
    data: XOR<KaryawanUpdateInput, KaryawanUncheckedUpdateInput>
    /**
     * Choose, which Karyawan to update.
     */
    where: KaryawanWhereUniqueInput
  }


  /**
   * Karyawan updateMany
   */
  export type KaryawanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Karyawans.
     */
    data: XOR<KaryawanUpdateManyMutationInput, KaryawanUncheckedUpdateManyInput>
    /**
     * Filter which Karyawans to update
     */
    where?: KaryawanWhereInput
  }


  /**
   * Karyawan upsert
   */
  export type KaryawanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * The filter to search for the Karyawan to update in case it exists.
     */
    where: KaryawanWhereUniqueInput
    /**
     * In case the Karyawan found by the `where` argument doesn't exist, create a new Karyawan with this data.
     */
    create: XOR<KaryawanCreateInput, KaryawanUncheckedCreateInput>
    /**
     * In case the Karyawan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<KaryawanUpdateInput, KaryawanUncheckedUpdateInput>
  }


  /**
   * Karyawan delete
   */
  export type KaryawanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
    /**
     * Filter which Karyawan to delete.
     */
    where: KaryawanWhereUniqueInput
  }


  /**
   * Karyawan deleteMany
   */
  export type KaryawanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Karyawans to delete
     */
    where?: KaryawanWhereInput
  }


  /**
   * Karyawan without action
   */
  export type KaryawanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Karyawan
     */
    select?: KaryawanSelect<ExtArgs> | null
  }



  /**
   * Model Pendeta
   */

  export type AggregatePendeta = {
    _count: PendetaCountAggregateOutputType | null
    _avg: PendetaAvgAggregateOutputType | null
    _sum: PendetaSumAggregateOutputType | null
    _min: PendetaMinAggregateOutputType | null
    _max: PendetaMaxAggregateOutputType | null
  }

  export type PendetaAvgAggregateOutputType = {
    id: number | null
  }

  export type PendetaSumAggregateOutputType = {
    id: number | null
  }

  export type PendetaMinAggregateOutputType = {
    id: number | null
    namaDepan: string | null
    namaTengah: string | null
    status: $Enums.status | null
    namaKeluarga: string | null
    imageURL: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PendetaMaxAggregateOutputType = {
    id: number | null
    namaDepan: string | null
    namaTengah: string | null
    status: $Enums.status | null
    namaKeluarga: string | null
    imageURL: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PendetaCountAggregateOutputType = {
    id: number
    namaDepan: number
    namaTengah: number
    status: number
    namaKeluarga: number
    imageURL: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PendetaAvgAggregateInputType = {
    id?: true
  }

  export type PendetaSumAggregateInputType = {
    id?: true
  }

  export type PendetaMinAggregateInputType = {
    id?: true
    namaDepan?: true
    namaTengah?: true
    status?: true
    namaKeluarga?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PendetaMaxAggregateInputType = {
    id?: true
    namaDepan?: true
    namaTengah?: true
    status?: true
    namaKeluarga?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PendetaCountAggregateInputType = {
    id?: true
    namaDepan?: true
    namaTengah?: true
    status?: true
    namaKeluarga?: true
    imageURL?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PendetaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pendeta to aggregate.
     */
    where?: PendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pendetas to fetch.
     */
    orderBy?: PendetaOrderByWithRelationInput | PendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pendetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pendetas
    **/
    _count?: true | PendetaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PendetaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PendetaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PendetaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PendetaMaxAggregateInputType
  }

  export type GetPendetaAggregateType<T extends PendetaAggregateArgs> = {
        [P in keyof T & keyof AggregatePendeta]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePendeta[P]>
      : GetScalarType<T[P], AggregatePendeta[P]>
  }




  export type PendetaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PendetaWhereInput
    orderBy?: PendetaOrderByWithAggregationInput | PendetaOrderByWithAggregationInput[]
    by: PendetaScalarFieldEnum[] | PendetaScalarFieldEnum
    having?: PendetaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PendetaCountAggregateInputType | true
    _avg?: PendetaAvgAggregateInputType
    _sum?: PendetaSumAggregateInputType
    _min?: PendetaMinAggregateInputType
    _max?: PendetaMaxAggregateInputType
  }

  export type PendetaGroupByOutputType = {
    id: number
    namaDepan: string
    namaTengah: string | null
    status: $Enums.status
    namaKeluarga: string
    imageURL: string
    createdAt: Date
    updatedAt: Date
    _count: PendetaCountAggregateOutputType | null
    _avg: PendetaAvgAggregateOutputType | null
    _sum: PendetaSumAggregateOutputType | null
    _min: PendetaMinAggregateOutputType | null
    _max: PendetaMaxAggregateOutputType | null
  }

  type GetPendetaGroupByPayload<T extends PendetaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PendetaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PendetaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PendetaGroupByOutputType[P]>
            : GetScalarType<T[P], PendetaGroupByOutputType[P]>
        }
      >
    >


  export type PendetaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    status?: boolean
    namaKeluarga?: boolean
    imageURL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["pendeta"]>

  export type PendetaSelectScalar = {
    id?: boolean
    namaDepan?: boolean
    namaTengah?: boolean
    status?: boolean
    namaKeluarga?: boolean
    imageURL?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $PendetaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pendeta"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      namaDepan: string
      namaTengah: string | null
      status: $Enums.status
      namaKeluarga: string
      imageURL: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pendeta"]>
    composites: {}
  }


  type PendetaGetPayload<S extends boolean | null | undefined | PendetaDefaultArgs> = $Result.GetResult<Prisma.$PendetaPayload, S>

  type PendetaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PendetaFindManyArgs, 'select' | 'include'> & {
      select?: PendetaCountAggregateInputType | true
    }

  export interface PendetaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pendeta'], meta: { name: 'Pendeta' } }
    /**
     * Find zero or one Pendeta that matches the filter.
     * @param {PendetaFindUniqueArgs} args - Arguments to find a Pendeta
     * @example
     * // Get one Pendeta
     * const pendeta = await prisma.pendeta.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PendetaFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PendetaFindUniqueArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pendeta that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PendetaFindUniqueOrThrowArgs} args - Arguments to find a Pendeta
     * @example
     * // Get one Pendeta
     * const pendeta = await prisma.pendeta.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PendetaFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PendetaFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pendeta that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendetaFindFirstArgs} args - Arguments to find a Pendeta
     * @example
     * // Get one Pendeta
     * const pendeta = await prisma.pendeta.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PendetaFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PendetaFindFirstArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pendeta that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendetaFindFirstOrThrowArgs} args - Arguments to find a Pendeta
     * @example
     * // Get one Pendeta
     * const pendeta = await prisma.pendeta.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PendetaFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PendetaFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pendetas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendetaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pendetas
     * const pendetas = await prisma.pendeta.findMany()
     * 
     * // Get first 10 Pendetas
     * const pendetas = await prisma.pendeta.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pendetaWithIdOnly = await prisma.pendeta.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PendetaFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PendetaFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pendeta.
     * @param {PendetaCreateArgs} args - Arguments to create a Pendeta.
     * @example
     * // Create one Pendeta
     * const Pendeta = await prisma.pendeta.create({
     *   data: {
     *     // ... data to create a Pendeta
     *   }
     * })
     * 
    **/
    create<T extends PendetaCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PendetaCreateArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pendetas.
     *     @param {PendetaCreateManyArgs} args - Arguments to create many Pendetas.
     *     @example
     *     // Create many Pendetas
     *     const pendeta = await prisma.pendeta.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PendetaCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PendetaCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pendeta.
     * @param {PendetaDeleteArgs} args - Arguments to delete one Pendeta.
     * @example
     * // Delete one Pendeta
     * const Pendeta = await prisma.pendeta.delete({
     *   where: {
     *     // ... filter to delete one Pendeta
     *   }
     * })
     * 
    **/
    delete<T extends PendetaDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PendetaDeleteArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pendeta.
     * @param {PendetaUpdateArgs} args - Arguments to update one Pendeta.
     * @example
     * // Update one Pendeta
     * const pendeta = await prisma.pendeta.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PendetaUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PendetaUpdateArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pendetas.
     * @param {PendetaDeleteManyArgs} args - Arguments to filter Pendetas to delete.
     * @example
     * // Delete a few Pendetas
     * const { count } = await prisma.pendeta.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PendetaDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PendetaDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pendetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendetaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pendetas
     * const pendeta = await prisma.pendeta.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PendetaUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PendetaUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pendeta.
     * @param {PendetaUpsertArgs} args - Arguments to update or create a Pendeta.
     * @example
     * // Update or create a Pendeta
     * const pendeta = await prisma.pendeta.upsert({
     *   create: {
     *     // ... data to create a Pendeta
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pendeta we want to update
     *   }
     * })
    **/
    upsert<T extends PendetaUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PendetaUpsertArgs<ExtArgs>>
    ): Prisma__PendetaClient<$Result.GetResult<Prisma.$PendetaPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pendetas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendetaCountArgs} args - Arguments to filter Pendetas to count.
     * @example
     * // Count the number of Pendetas
     * const count = await prisma.pendeta.count({
     *   where: {
     *     // ... the filter for the Pendetas we want to count
     *   }
     * })
    **/
    count<T extends PendetaCountArgs>(
      args?: Subset<T, PendetaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PendetaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pendeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendetaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PendetaAggregateArgs>(args: Subset<T, PendetaAggregateArgs>): Prisma.PrismaPromise<GetPendetaAggregateType<T>>

    /**
     * Group by Pendeta.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PendetaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PendetaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PendetaGroupByArgs['orderBy'] }
        : { orderBy?: PendetaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PendetaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPendetaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pendeta model
   */
  readonly fields: PendetaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pendeta.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PendetaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pendeta model
   */ 
  interface PendetaFieldRefs {
    readonly id: FieldRef<"Pendeta", 'Int'>
    readonly namaDepan: FieldRef<"Pendeta", 'String'>
    readonly namaTengah: FieldRef<"Pendeta", 'String'>
    readonly status: FieldRef<"Pendeta", 'status'>
    readonly namaKeluarga: FieldRef<"Pendeta", 'String'>
    readonly imageURL: FieldRef<"Pendeta", 'String'>
    readonly createdAt: FieldRef<"Pendeta", 'DateTime'>
    readonly updatedAt: FieldRef<"Pendeta", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Pendeta findUnique
   */
  export type PendetaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * Filter, which Pendeta to fetch.
     */
    where: PendetaWhereUniqueInput
  }


  /**
   * Pendeta findUniqueOrThrow
   */
  export type PendetaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * Filter, which Pendeta to fetch.
     */
    where: PendetaWhereUniqueInput
  }


  /**
   * Pendeta findFirst
   */
  export type PendetaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * Filter, which Pendeta to fetch.
     */
    where?: PendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pendetas to fetch.
     */
    orderBy?: PendetaOrderByWithRelationInput | PendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pendetas.
     */
    cursor?: PendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pendetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pendetas.
     */
    distinct?: PendetaScalarFieldEnum | PendetaScalarFieldEnum[]
  }


  /**
   * Pendeta findFirstOrThrow
   */
  export type PendetaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * Filter, which Pendeta to fetch.
     */
    where?: PendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pendetas to fetch.
     */
    orderBy?: PendetaOrderByWithRelationInput | PendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pendetas.
     */
    cursor?: PendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pendetas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pendetas.
     */
    distinct?: PendetaScalarFieldEnum | PendetaScalarFieldEnum[]
  }


  /**
   * Pendeta findMany
   */
  export type PendetaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * Filter, which Pendetas to fetch.
     */
    where?: PendetaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pendetas to fetch.
     */
    orderBy?: PendetaOrderByWithRelationInput | PendetaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pendetas.
     */
    cursor?: PendetaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pendetas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pendetas.
     */
    skip?: number
    distinct?: PendetaScalarFieldEnum | PendetaScalarFieldEnum[]
  }


  /**
   * Pendeta create
   */
  export type PendetaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * The data needed to create a Pendeta.
     */
    data: XOR<PendetaCreateInput, PendetaUncheckedCreateInput>
  }


  /**
   * Pendeta createMany
   */
  export type PendetaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pendetas.
     */
    data: PendetaCreateManyInput | PendetaCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pendeta update
   */
  export type PendetaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * The data needed to update a Pendeta.
     */
    data: XOR<PendetaUpdateInput, PendetaUncheckedUpdateInput>
    /**
     * Choose, which Pendeta to update.
     */
    where: PendetaWhereUniqueInput
  }


  /**
   * Pendeta updateMany
   */
  export type PendetaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pendetas.
     */
    data: XOR<PendetaUpdateManyMutationInput, PendetaUncheckedUpdateManyInput>
    /**
     * Filter which Pendetas to update
     */
    where?: PendetaWhereInput
  }


  /**
   * Pendeta upsert
   */
  export type PendetaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * The filter to search for the Pendeta to update in case it exists.
     */
    where: PendetaWhereUniqueInput
    /**
     * In case the Pendeta found by the `where` argument doesn't exist, create a new Pendeta with this data.
     */
    create: XOR<PendetaCreateInput, PendetaUncheckedCreateInput>
    /**
     * In case the Pendeta was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PendetaUpdateInput, PendetaUncheckedUpdateInput>
  }


  /**
   * Pendeta delete
   */
  export type PendetaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
    /**
     * Filter which Pendeta to delete.
     */
    where: PendetaWhereUniqueInput
  }


  /**
   * Pendeta deleteMany
   */
  export type PendetaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pendetas to delete
     */
    where?: PendetaWhereInput
  }


  /**
   * Pendeta without action
   */
  export type PendetaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pendeta
     */
    select?: PendetaSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RenunganScalarFieldEnum: {
    id: 'id',
    title: 'title',
    kitab: 'kitab',
    ayat: 'ayat',
    content: 'content',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RenunganScalarFieldEnum = (typeof RenunganScalarFieldEnum)[keyof typeof RenunganScalarFieldEnum]


  export const JemaatScalarFieldEnum: {
    id: 'id',
    noAnggota: 'noAnggota',
    namaDepan: 'namaDepan',
    namaTengah: 'namaTengah',
    namaKeluarga: 'namaKeluarga',
    noWA: 'noWA',
    noTelpRumah: 'noTelpRumah',
    tempatLahir: 'tempatLahir',
    ayahId: 'ayahId',
    ibuId: 'ibuId',
    tanggalLahir: 'tanggalLahir',
    golonganDarah: 'golonganDarah',
    alamatRumah: 'alamatRumah',
    wilayah: 'wilayah',
    pekerjaan: 'pekerjaan',
    jabatan: 'jabatan',
    perusahaan: 'perusahaan',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type JemaatScalarFieldEnum = (typeof JemaatScalarFieldEnum)[keyof typeof JemaatScalarFieldEnum]


  export const IbadahScalarFieldEnum: {
    id: 'id',
    category: 'category',
    temaIbadah: 'temaIbadah',
    pemimpin: 'pemimpin',
    linkVideo: 'linkVideo',
    infoTambahan: 'infoTambahan',
    waktuMulai: 'waktuMulai',
    waktuSelesai: 'waktuSelesai',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type IbadahScalarFieldEnum = (typeof IbadahScalarFieldEnum)[keyof typeof IbadahScalarFieldEnum]


  export const DoaScalarFieldEnum: {
    id: 'id',
    category: 'category',
    tema: 'tema',
    pemimpin: 'pemimpin',
    infoTambahan: 'infoTambahan',
    waktuMulai: 'waktuMulai',
    waktuSelesai: 'waktuSelesai',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DoaScalarFieldEnum = (typeof DoaScalarFieldEnum)[keyof typeof DoaScalarFieldEnum]


  export const LayananBaptisScalarFieldEnum: {
    id: 'id',
    category: 'category',
    infoPendaftaran: 'infoPendaftaran',
    jadwal: 'jadwal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LayananBaptisScalarFieldEnum = (typeof LayananBaptisScalarFieldEnum)[keyof typeof LayananBaptisScalarFieldEnum]


  export const LayananPernikahanScalarFieldEnum: {
    id: 'id',
    category: 'category',
    infoPendaftaran: 'infoPendaftaran',
    jadwal: 'jadwal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LayananPernikahanScalarFieldEnum = (typeof LayananPernikahanScalarFieldEnum)[keyof typeof LayananPernikahanScalarFieldEnum]


  export const KonselingPendetaScalarFieldEnum: {
    id: 'id',
    info: 'info',
    jadwal: 'jadwal',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KonselingPendetaScalarFieldEnum = (typeof KonselingPendetaScalarFieldEnum)[keyof typeof KonselingPendetaScalarFieldEnum]


  export const OrangTuaScalarFieldEnum: {
    id: 'id',
    noAnggota: 'noAnggota',
    namaDepan: 'namaDepan',
    namaTengah: 'namaTengah',
    namaKeluarga: 'namaKeluarga',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type OrangTuaScalarFieldEnum = (typeof OrangTuaScalarFieldEnum)[keyof typeof OrangTuaScalarFieldEnum]


  export const KegiatanScalarFieldEnum: {
    id: 'id',
    komisi: 'komisi',
    judulKegiatan: 'judulKegiatan',
    deskripsiKegiatan: 'deskripsiKegiatan',
    imageURL: 'imageURL',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KegiatanScalarFieldEnum = (typeof KegiatanScalarFieldEnum)[keyof typeof KegiatanScalarFieldEnum]


  export const KaryawanScalarFieldEnum: {
    id: 'id',
    namaDepan: 'namaDepan',
    namaTengah: 'namaTengah',
    status: 'status',
    namaKeluarga: 'namaKeluarga',
    imageURL: 'imageURL',
    posisi: 'posisi',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type KaryawanScalarFieldEnum = (typeof KaryawanScalarFieldEnum)[keyof typeof KaryawanScalarFieldEnum]


  export const PendetaScalarFieldEnum: {
    id: 'id',
    namaDepan: 'namaDepan',
    namaTengah: 'namaTengah',
    status: 'status',
    namaKeluarga: 'namaKeluarga',
    imageURL: 'imageURL',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PendetaScalarFieldEnum = (typeof PendetaScalarFieldEnum)[keyof typeof PendetaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'userRole'
   */
  export type EnumuserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userRole'>
    


  /**
   * Reference to a field of type 'userRole[]'
   */
  export type ListEnumuserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'userRole[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'CategoryPernikahan'
   */
  export type EnumCategoryPernikahanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryPernikahan'>
    


  /**
   * Reference to a field of type 'CategoryPernikahan[]'
   */
  export type ListEnumCategoryPernikahanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CategoryPernikahan[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'posisiKaryawan'
   */
  export type EnumposisiKaryawanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'posisiKaryawan'>
    


  /**
   * Reference to a field of type 'posisiKaryawan[]'
   */
  export type ListEnumposisiKaryawanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'posisiKaryawan[]'>
    


  /**
   * Reference to a field of type 'status'
   */
  export type EnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status'>
    


  /**
   * Reference to a field of type 'status[]'
   */
  export type ListEnumstatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'status[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumuserRoleFilter<"User"> | $Enums.userRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumuserRoleFilter<"User"> | $Enums.userRole
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumuserRoleWithAggregatesFilter<"User"> | $Enums.userRole
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type RenunganWhereInput = {
    AND?: RenunganWhereInput | RenunganWhereInput[]
    OR?: RenunganWhereInput[]
    NOT?: RenunganWhereInput | RenunganWhereInput[]
    id?: IntFilter<"Renungan"> | number
    title?: StringFilter<"Renungan"> | string
    kitab?: StringFilter<"Renungan"> | string
    ayat?: StringFilter<"Renungan"> | string
    content?: StringFilter<"Renungan"> | string
    createdAt?: DateTimeFilter<"Renungan"> | Date | string
    updatedAt?: DateTimeFilter<"Renungan"> | Date | string
  }

  export type RenunganOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    kitab?: SortOrder
    ayat?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RenunganWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RenunganWhereInput | RenunganWhereInput[]
    OR?: RenunganWhereInput[]
    NOT?: RenunganWhereInput | RenunganWhereInput[]
    title?: StringFilter<"Renungan"> | string
    kitab?: StringFilter<"Renungan"> | string
    ayat?: StringFilter<"Renungan"> | string
    content?: StringFilter<"Renungan"> | string
    createdAt?: DateTimeFilter<"Renungan"> | Date | string
    updatedAt?: DateTimeFilter<"Renungan"> | Date | string
  }, "id">

  export type RenunganOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    kitab?: SortOrder
    ayat?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RenunganCountOrderByAggregateInput
    _avg?: RenunganAvgOrderByAggregateInput
    _max?: RenunganMaxOrderByAggregateInput
    _min?: RenunganMinOrderByAggregateInput
    _sum?: RenunganSumOrderByAggregateInput
  }

  export type RenunganScalarWhereWithAggregatesInput = {
    AND?: RenunganScalarWhereWithAggregatesInput | RenunganScalarWhereWithAggregatesInput[]
    OR?: RenunganScalarWhereWithAggregatesInput[]
    NOT?: RenunganScalarWhereWithAggregatesInput | RenunganScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Renungan"> | number
    title?: StringWithAggregatesFilter<"Renungan"> | string
    kitab?: StringWithAggregatesFilter<"Renungan"> | string
    ayat?: StringWithAggregatesFilter<"Renungan"> | string
    content?: StringWithAggregatesFilter<"Renungan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Renungan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Renungan"> | Date | string
  }

  export type JemaatWhereInput = {
    AND?: JemaatWhereInput | JemaatWhereInput[]
    OR?: JemaatWhereInput[]
    NOT?: JemaatWhereInput | JemaatWhereInput[]
    id?: IntFilter<"Jemaat"> | number
    noAnggota?: IntFilter<"Jemaat"> | number
    namaDepan?: StringFilter<"Jemaat"> | string
    namaTengah?: StringNullableFilter<"Jemaat"> | string | null
    namaKeluarga?: StringFilter<"Jemaat"> | string
    noWA?: IntFilter<"Jemaat"> | number
    noTelpRumah?: IntFilter<"Jemaat"> | number
    tempatLahir?: StringFilter<"Jemaat"> | string
    ayahId?: IntNullableFilter<"Jemaat"> | number | null
    ibuId?: IntNullableFilter<"Jemaat"> | number | null
    tanggalLahir?: DateTimeFilter<"Jemaat"> | Date | string
    golonganDarah?: StringFilter<"Jemaat"> | string
    alamatRumah?: StringFilter<"Jemaat"> | string
    wilayah?: StringFilter<"Jemaat"> | string
    pekerjaan?: StringNullableFilter<"Jemaat"> | string | null
    jabatan?: StringNullableFilter<"Jemaat"> | string | null
    perusahaan?: StringNullableFilter<"Jemaat"> | string | null
    createdAt?: DateTimeFilter<"Jemaat"> | Date | string
    updatedAt?: DateTimeFilter<"Jemaat"> | Date | string
    ayah?: XOR<OrangTuaNullableRelationFilter, OrangTuaWhereInput> | null
    ibu?: XOR<OrangTuaNullableRelationFilter, OrangTuaWhereInput> | null
    jemaat?: XOR<OrangTuaNullableRelationFilter, OrangTuaWhereInput> | null
  }

  export type JemaatOrderByWithRelationInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    namaKeluarga?: SortOrder
    noWA?: SortOrder
    noTelpRumah?: SortOrder
    tempatLahir?: SortOrder
    ayahId?: SortOrderInput | SortOrder
    ibuId?: SortOrderInput | SortOrder
    tanggalLahir?: SortOrder
    golonganDarah?: SortOrder
    alamatRumah?: SortOrder
    wilayah?: SortOrder
    pekerjaan?: SortOrderInput | SortOrder
    jabatan?: SortOrderInput | SortOrder
    perusahaan?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ayah?: OrangTuaOrderByWithRelationInput
    ibu?: OrangTuaOrderByWithRelationInput
    jemaat?: OrangTuaOrderByWithRelationInput
  }

  export type JemaatWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    noAnggota?: number
    AND?: JemaatWhereInput | JemaatWhereInput[]
    OR?: JemaatWhereInput[]
    NOT?: JemaatWhereInput | JemaatWhereInput[]
    namaDepan?: StringFilter<"Jemaat"> | string
    namaTengah?: StringNullableFilter<"Jemaat"> | string | null
    namaKeluarga?: StringFilter<"Jemaat"> | string
    noWA?: IntFilter<"Jemaat"> | number
    noTelpRumah?: IntFilter<"Jemaat"> | number
    tempatLahir?: StringFilter<"Jemaat"> | string
    ayahId?: IntNullableFilter<"Jemaat"> | number | null
    ibuId?: IntNullableFilter<"Jemaat"> | number | null
    tanggalLahir?: DateTimeFilter<"Jemaat"> | Date | string
    golonganDarah?: StringFilter<"Jemaat"> | string
    alamatRumah?: StringFilter<"Jemaat"> | string
    wilayah?: StringFilter<"Jemaat"> | string
    pekerjaan?: StringNullableFilter<"Jemaat"> | string | null
    jabatan?: StringNullableFilter<"Jemaat"> | string | null
    perusahaan?: StringNullableFilter<"Jemaat"> | string | null
    createdAt?: DateTimeFilter<"Jemaat"> | Date | string
    updatedAt?: DateTimeFilter<"Jemaat"> | Date | string
    ayah?: XOR<OrangTuaNullableRelationFilter, OrangTuaWhereInput> | null
    ibu?: XOR<OrangTuaNullableRelationFilter, OrangTuaWhereInput> | null
    jemaat?: XOR<OrangTuaNullableRelationFilter, OrangTuaWhereInput> | null
  }, "id" | "noAnggota">

  export type JemaatOrderByWithAggregationInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    namaKeluarga?: SortOrder
    noWA?: SortOrder
    noTelpRumah?: SortOrder
    tempatLahir?: SortOrder
    ayahId?: SortOrderInput | SortOrder
    ibuId?: SortOrderInput | SortOrder
    tanggalLahir?: SortOrder
    golonganDarah?: SortOrder
    alamatRumah?: SortOrder
    wilayah?: SortOrder
    pekerjaan?: SortOrderInput | SortOrder
    jabatan?: SortOrderInput | SortOrder
    perusahaan?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: JemaatCountOrderByAggregateInput
    _avg?: JemaatAvgOrderByAggregateInput
    _max?: JemaatMaxOrderByAggregateInput
    _min?: JemaatMinOrderByAggregateInput
    _sum?: JemaatSumOrderByAggregateInput
  }

  export type JemaatScalarWhereWithAggregatesInput = {
    AND?: JemaatScalarWhereWithAggregatesInput | JemaatScalarWhereWithAggregatesInput[]
    OR?: JemaatScalarWhereWithAggregatesInput[]
    NOT?: JemaatScalarWhereWithAggregatesInput | JemaatScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Jemaat"> | number
    noAnggota?: IntWithAggregatesFilter<"Jemaat"> | number
    namaDepan?: StringWithAggregatesFilter<"Jemaat"> | string
    namaTengah?: StringNullableWithAggregatesFilter<"Jemaat"> | string | null
    namaKeluarga?: StringWithAggregatesFilter<"Jemaat"> | string
    noWA?: IntWithAggregatesFilter<"Jemaat"> | number
    noTelpRumah?: IntWithAggregatesFilter<"Jemaat"> | number
    tempatLahir?: StringWithAggregatesFilter<"Jemaat"> | string
    ayahId?: IntNullableWithAggregatesFilter<"Jemaat"> | number | null
    ibuId?: IntNullableWithAggregatesFilter<"Jemaat"> | number | null
    tanggalLahir?: DateTimeWithAggregatesFilter<"Jemaat"> | Date | string
    golonganDarah?: StringWithAggregatesFilter<"Jemaat"> | string
    alamatRumah?: StringWithAggregatesFilter<"Jemaat"> | string
    wilayah?: StringWithAggregatesFilter<"Jemaat"> | string
    pekerjaan?: StringNullableWithAggregatesFilter<"Jemaat"> | string | null
    jabatan?: StringNullableWithAggregatesFilter<"Jemaat"> | string | null
    perusahaan?: StringNullableWithAggregatesFilter<"Jemaat"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Jemaat"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Jemaat"> | Date | string
  }

  export type IbadahWhereInput = {
    AND?: IbadahWhereInput | IbadahWhereInput[]
    OR?: IbadahWhereInput[]
    NOT?: IbadahWhereInput | IbadahWhereInput[]
    id?: IntFilter<"Ibadah"> | number
    category?: StringFilter<"Ibadah"> | string
    temaIbadah?: StringFilter<"Ibadah"> | string
    pemimpin?: StringFilter<"Ibadah"> | string
    linkVideo?: StringFilter<"Ibadah"> | string
    infoTambahan?: StringFilter<"Ibadah"> | string
    waktuMulai?: DateTimeFilter<"Ibadah"> | Date | string
    waktuSelesai?: DateTimeFilter<"Ibadah"> | Date | string
    createdAt?: DateTimeFilter<"Ibadah"> | Date | string
    updatedAt?: DateTimeFilter<"Ibadah"> | Date | string
  }

  export type IbadahOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    temaIbadah?: SortOrder
    pemimpin?: SortOrder
    linkVideo?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IbadahWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    category?: string
    AND?: IbadahWhereInput | IbadahWhereInput[]
    OR?: IbadahWhereInput[]
    NOT?: IbadahWhereInput | IbadahWhereInput[]
    temaIbadah?: StringFilter<"Ibadah"> | string
    pemimpin?: StringFilter<"Ibadah"> | string
    linkVideo?: StringFilter<"Ibadah"> | string
    infoTambahan?: StringFilter<"Ibadah"> | string
    waktuMulai?: DateTimeFilter<"Ibadah"> | Date | string
    waktuSelesai?: DateTimeFilter<"Ibadah"> | Date | string
    createdAt?: DateTimeFilter<"Ibadah"> | Date | string
    updatedAt?: DateTimeFilter<"Ibadah"> | Date | string
  }, "id" | "category">

  export type IbadahOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    temaIbadah?: SortOrder
    pemimpin?: SortOrder
    linkVideo?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: IbadahCountOrderByAggregateInput
    _avg?: IbadahAvgOrderByAggregateInput
    _max?: IbadahMaxOrderByAggregateInput
    _min?: IbadahMinOrderByAggregateInput
    _sum?: IbadahSumOrderByAggregateInput
  }

  export type IbadahScalarWhereWithAggregatesInput = {
    AND?: IbadahScalarWhereWithAggregatesInput | IbadahScalarWhereWithAggregatesInput[]
    OR?: IbadahScalarWhereWithAggregatesInput[]
    NOT?: IbadahScalarWhereWithAggregatesInput | IbadahScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Ibadah"> | number
    category?: StringWithAggregatesFilter<"Ibadah"> | string
    temaIbadah?: StringWithAggregatesFilter<"Ibadah"> | string
    pemimpin?: StringWithAggregatesFilter<"Ibadah"> | string
    linkVideo?: StringWithAggregatesFilter<"Ibadah"> | string
    infoTambahan?: StringWithAggregatesFilter<"Ibadah"> | string
    waktuMulai?: DateTimeWithAggregatesFilter<"Ibadah"> | Date | string
    waktuSelesai?: DateTimeWithAggregatesFilter<"Ibadah"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Ibadah"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Ibadah"> | Date | string
  }

  export type DoaWhereInput = {
    AND?: DoaWhereInput | DoaWhereInput[]
    OR?: DoaWhereInput[]
    NOT?: DoaWhereInput | DoaWhereInput[]
    id?: IntFilter<"Doa"> | number
    category?: StringFilter<"Doa"> | string
    tema?: StringFilter<"Doa"> | string
    pemimpin?: StringFilter<"Doa"> | string
    infoTambahan?: StringFilter<"Doa"> | string
    waktuMulai?: DateTimeFilter<"Doa"> | Date | string
    waktuSelesai?: DateTimeFilter<"Doa"> | Date | string
    createdAt?: DateTimeFilter<"Doa"> | Date | string
    updatedAt?: DateTimeFilter<"Doa"> | Date | string
  }

  export type DoaOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    tema?: SortOrder
    pemimpin?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    category?: string
    AND?: DoaWhereInput | DoaWhereInput[]
    OR?: DoaWhereInput[]
    NOT?: DoaWhereInput | DoaWhereInput[]
    tema?: StringFilter<"Doa"> | string
    pemimpin?: StringFilter<"Doa"> | string
    infoTambahan?: StringFilter<"Doa"> | string
    waktuMulai?: DateTimeFilter<"Doa"> | Date | string
    waktuSelesai?: DateTimeFilter<"Doa"> | Date | string
    createdAt?: DateTimeFilter<"Doa"> | Date | string
    updatedAt?: DateTimeFilter<"Doa"> | Date | string
  }, "id" | "category">

  export type DoaOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    tema?: SortOrder
    pemimpin?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DoaCountOrderByAggregateInput
    _avg?: DoaAvgOrderByAggregateInput
    _max?: DoaMaxOrderByAggregateInput
    _min?: DoaMinOrderByAggregateInput
    _sum?: DoaSumOrderByAggregateInput
  }

  export type DoaScalarWhereWithAggregatesInput = {
    AND?: DoaScalarWhereWithAggregatesInput | DoaScalarWhereWithAggregatesInput[]
    OR?: DoaScalarWhereWithAggregatesInput[]
    NOT?: DoaScalarWhereWithAggregatesInput | DoaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Doa"> | number
    category?: StringWithAggregatesFilter<"Doa"> | string
    tema?: StringWithAggregatesFilter<"Doa"> | string
    pemimpin?: StringWithAggregatesFilter<"Doa"> | string
    infoTambahan?: StringWithAggregatesFilter<"Doa"> | string
    waktuMulai?: DateTimeWithAggregatesFilter<"Doa"> | Date | string
    waktuSelesai?: DateTimeWithAggregatesFilter<"Doa"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Doa"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Doa"> | Date | string
  }

  export type LayananBaptisWhereInput = {
    AND?: LayananBaptisWhereInput | LayananBaptisWhereInput[]
    OR?: LayananBaptisWhereInput[]
    NOT?: LayananBaptisWhereInput | LayananBaptisWhereInput[]
    id?: IntFilter<"LayananBaptis"> | number
    category?: StringFilter<"LayananBaptis"> | string
    infoPendaftaran?: StringFilter<"LayananBaptis"> | string
    jadwal?: DateTimeFilter<"LayananBaptis"> | Date | string
    createdAt?: DateTimeFilter<"LayananBaptis"> | Date | string
    updatedAt?: DateTimeFilter<"LayananBaptis"> | Date | string
  }

  export type LayananBaptisOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananBaptisWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    category?: string
    AND?: LayananBaptisWhereInput | LayananBaptisWhereInput[]
    OR?: LayananBaptisWhereInput[]
    NOT?: LayananBaptisWhereInput | LayananBaptisWhereInput[]
    infoPendaftaran?: StringFilter<"LayananBaptis"> | string
    jadwal?: DateTimeFilter<"LayananBaptis"> | Date | string
    createdAt?: DateTimeFilter<"LayananBaptis"> | Date | string
    updatedAt?: DateTimeFilter<"LayananBaptis"> | Date | string
  }, "id" | "category">

  export type LayananBaptisOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LayananBaptisCountOrderByAggregateInput
    _avg?: LayananBaptisAvgOrderByAggregateInput
    _max?: LayananBaptisMaxOrderByAggregateInput
    _min?: LayananBaptisMinOrderByAggregateInput
    _sum?: LayananBaptisSumOrderByAggregateInput
  }

  export type LayananBaptisScalarWhereWithAggregatesInput = {
    AND?: LayananBaptisScalarWhereWithAggregatesInput | LayananBaptisScalarWhereWithAggregatesInput[]
    OR?: LayananBaptisScalarWhereWithAggregatesInput[]
    NOT?: LayananBaptisScalarWhereWithAggregatesInput | LayananBaptisScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LayananBaptis"> | number
    category?: StringWithAggregatesFilter<"LayananBaptis"> | string
    infoPendaftaran?: StringWithAggregatesFilter<"LayananBaptis"> | string
    jadwal?: DateTimeWithAggregatesFilter<"LayananBaptis"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"LayananBaptis"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LayananBaptis"> | Date | string
  }

  export type LayananPernikahanWhereInput = {
    AND?: LayananPernikahanWhereInput | LayananPernikahanWhereInput[]
    OR?: LayananPernikahanWhereInput[]
    NOT?: LayananPernikahanWhereInput | LayananPernikahanWhereInput[]
    id?: IntFilter<"LayananPernikahan"> | number
    category?: EnumCategoryPernikahanFilter<"LayananPernikahan"> | $Enums.CategoryPernikahan
    infoPendaftaran?: StringFilter<"LayananPernikahan"> | string
    jadwal?: DateTimeFilter<"LayananPernikahan"> | Date | string
    createdAt?: DateTimeFilter<"LayananPernikahan"> | Date | string
    updatedAt?: DateTimeFilter<"LayananPernikahan"> | Date | string
  }

  export type LayananPernikahanOrderByWithRelationInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananPernikahanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    category?: $Enums.CategoryPernikahan
    AND?: LayananPernikahanWhereInput | LayananPernikahanWhereInput[]
    OR?: LayananPernikahanWhereInput[]
    NOT?: LayananPernikahanWhereInput | LayananPernikahanWhereInput[]
    infoPendaftaran?: StringFilter<"LayananPernikahan"> | string
    jadwal?: DateTimeFilter<"LayananPernikahan"> | Date | string
    createdAt?: DateTimeFilter<"LayananPernikahan"> | Date | string
    updatedAt?: DateTimeFilter<"LayananPernikahan"> | Date | string
  }, "id" | "category">

  export type LayananPernikahanOrderByWithAggregationInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LayananPernikahanCountOrderByAggregateInput
    _avg?: LayananPernikahanAvgOrderByAggregateInput
    _max?: LayananPernikahanMaxOrderByAggregateInput
    _min?: LayananPernikahanMinOrderByAggregateInput
    _sum?: LayananPernikahanSumOrderByAggregateInput
  }

  export type LayananPernikahanScalarWhereWithAggregatesInput = {
    AND?: LayananPernikahanScalarWhereWithAggregatesInput | LayananPernikahanScalarWhereWithAggregatesInput[]
    OR?: LayananPernikahanScalarWhereWithAggregatesInput[]
    NOT?: LayananPernikahanScalarWhereWithAggregatesInput | LayananPernikahanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"LayananPernikahan"> | number
    category?: EnumCategoryPernikahanWithAggregatesFilter<"LayananPernikahan"> | $Enums.CategoryPernikahan
    infoPendaftaran?: StringWithAggregatesFilter<"LayananPernikahan"> | string
    jadwal?: DateTimeWithAggregatesFilter<"LayananPernikahan"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"LayananPernikahan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"LayananPernikahan"> | Date | string
  }

  export type KonselingPendetaWhereInput = {
    AND?: KonselingPendetaWhereInput | KonselingPendetaWhereInput[]
    OR?: KonselingPendetaWhereInput[]
    NOT?: KonselingPendetaWhereInput | KonselingPendetaWhereInput[]
    id?: IntFilter<"KonselingPendeta"> | number
    info?: StringFilter<"KonselingPendeta"> | string
    jadwal?: DateTimeFilter<"KonselingPendeta"> | Date | string
    createdAt?: DateTimeFilter<"KonselingPendeta"> | Date | string
    updatedAt?: DateTimeFilter<"KonselingPendeta"> | Date | string
  }

  export type KonselingPendetaOrderByWithRelationInput = {
    id?: SortOrder
    info?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KonselingPendetaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KonselingPendetaWhereInput | KonselingPendetaWhereInput[]
    OR?: KonselingPendetaWhereInput[]
    NOT?: KonselingPendetaWhereInput | KonselingPendetaWhereInput[]
    info?: StringFilter<"KonselingPendeta"> | string
    jadwal?: DateTimeFilter<"KonselingPendeta"> | Date | string
    createdAt?: DateTimeFilter<"KonselingPendeta"> | Date | string
    updatedAt?: DateTimeFilter<"KonselingPendeta"> | Date | string
  }, "id">

  export type KonselingPendetaOrderByWithAggregationInput = {
    id?: SortOrder
    info?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KonselingPendetaCountOrderByAggregateInput
    _avg?: KonselingPendetaAvgOrderByAggregateInput
    _max?: KonselingPendetaMaxOrderByAggregateInput
    _min?: KonselingPendetaMinOrderByAggregateInput
    _sum?: KonselingPendetaSumOrderByAggregateInput
  }

  export type KonselingPendetaScalarWhereWithAggregatesInput = {
    AND?: KonselingPendetaScalarWhereWithAggregatesInput | KonselingPendetaScalarWhereWithAggregatesInput[]
    OR?: KonselingPendetaScalarWhereWithAggregatesInput[]
    NOT?: KonselingPendetaScalarWhereWithAggregatesInput | KonselingPendetaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"KonselingPendeta"> | number
    info?: StringWithAggregatesFilter<"KonselingPendeta"> | string
    jadwal?: DateTimeWithAggregatesFilter<"KonselingPendeta"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"KonselingPendeta"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"KonselingPendeta"> | Date | string
  }

  export type OrangTuaWhereInput = {
    AND?: OrangTuaWhereInput | OrangTuaWhereInput[]
    OR?: OrangTuaWhereInput[]
    NOT?: OrangTuaWhereInput | OrangTuaWhereInput[]
    id?: IntFilter<"OrangTua"> | number
    noAnggota?: IntNullableFilter<"OrangTua"> | number | null
    namaDepan?: StringFilter<"OrangTua"> | string
    namaTengah?: StringNullableFilter<"OrangTua"> | string | null
    namaKeluarga?: StringFilter<"OrangTua"> | string
    createdAt?: DateTimeFilter<"OrangTua"> | Date | string
    updatedAt?: DateTimeFilter<"OrangTua"> | Date | string
    jemaat?: XOR<JemaatNullableRelationFilter, JemaatWhereInput> | null
    ayah?: JemaatListRelationFilter
    ibu?: JemaatListRelationFilter
  }

  export type OrangTuaOrderByWithRelationInput = {
    id?: SortOrder
    noAnggota?: SortOrderInput | SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    namaKeluarga?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    jemaat?: JemaatOrderByWithRelationInput
    ayah?: JemaatOrderByRelationAggregateInput
    ibu?: JemaatOrderByRelationAggregateInput
  }

  export type OrangTuaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    noAnggota?: number
    AND?: OrangTuaWhereInput | OrangTuaWhereInput[]
    OR?: OrangTuaWhereInput[]
    NOT?: OrangTuaWhereInput | OrangTuaWhereInput[]
    namaDepan?: StringFilter<"OrangTua"> | string
    namaTengah?: StringNullableFilter<"OrangTua"> | string | null
    namaKeluarga?: StringFilter<"OrangTua"> | string
    createdAt?: DateTimeFilter<"OrangTua"> | Date | string
    updatedAt?: DateTimeFilter<"OrangTua"> | Date | string
    jemaat?: XOR<JemaatNullableRelationFilter, JemaatWhereInput> | null
    ayah?: JemaatListRelationFilter
    ibu?: JemaatListRelationFilter
  }, "id" | "noAnggota">

  export type OrangTuaOrderByWithAggregationInput = {
    id?: SortOrder
    noAnggota?: SortOrderInput | SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    namaKeluarga?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OrangTuaCountOrderByAggregateInput
    _avg?: OrangTuaAvgOrderByAggregateInput
    _max?: OrangTuaMaxOrderByAggregateInput
    _min?: OrangTuaMinOrderByAggregateInput
    _sum?: OrangTuaSumOrderByAggregateInput
  }

  export type OrangTuaScalarWhereWithAggregatesInput = {
    AND?: OrangTuaScalarWhereWithAggregatesInput | OrangTuaScalarWhereWithAggregatesInput[]
    OR?: OrangTuaScalarWhereWithAggregatesInput[]
    NOT?: OrangTuaScalarWhereWithAggregatesInput | OrangTuaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OrangTua"> | number
    noAnggota?: IntNullableWithAggregatesFilter<"OrangTua"> | number | null
    namaDepan?: StringWithAggregatesFilter<"OrangTua"> | string
    namaTengah?: StringNullableWithAggregatesFilter<"OrangTua"> | string | null
    namaKeluarga?: StringWithAggregatesFilter<"OrangTua"> | string
    createdAt?: DateTimeWithAggregatesFilter<"OrangTua"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"OrangTua"> | Date | string
  }

  export type KegiatanWhereInput = {
    AND?: KegiatanWhereInput | KegiatanWhereInput[]
    OR?: KegiatanWhereInput[]
    NOT?: KegiatanWhereInput | KegiatanWhereInput[]
    id?: IntFilter<"Kegiatan"> | number
    komisi?: StringFilter<"Kegiatan"> | string
    judulKegiatan?: StringFilter<"Kegiatan"> | string
    deskripsiKegiatan?: StringFilter<"Kegiatan"> | string
    imageURL?: StringFilter<"Kegiatan"> | string
    createdAt?: DateTimeFilter<"Kegiatan"> | Date | string
    updatedAt?: DateTimeFilter<"Kegiatan"> | Date | string
  }

  export type KegiatanOrderByWithRelationInput = {
    id?: SortOrder
    komisi?: SortOrder
    judulKegiatan?: SortOrder
    deskripsiKegiatan?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KegiatanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KegiatanWhereInput | KegiatanWhereInput[]
    OR?: KegiatanWhereInput[]
    NOT?: KegiatanWhereInput | KegiatanWhereInput[]
    komisi?: StringFilter<"Kegiatan"> | string
    judulKegiatan?: StringFilter<"Kegiatan"> | string
    deskripsiKegiatan?: StringFilter<"Kegiatan"> | string
    imageURL?: StringFilter<"Kegiatan"> | string
    createdAt?: DateTimeFilter<"Kegiatan"> | Date | string
    updatedAt?: DateTimeFilter<"Kegiatan"> | Date | string
  }, "id">

  export type KegiatanOrderByWithAggregationInput = {
    id?: SortOrder
    komisi?: SortOrder
    judulKegiatan?: SortOrder
    deskripsiKegiatan?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KegiatanCountOrderByAggregateInput
    _avg?: KegiatanAvgOrderByAggregateInput
    _max?: KegiatanMaxOrderByAggregateInput
    _min?: KegiatanMinOrderByAggregateInput
    _sum?: KegiatanSumOrderByAggregateInput
  }

  export type KegiatanScalarWhereWithAggregatesInput = {
    AND?: KegiatanScalarWhereWithAggregatesInput | KegiatanScalarWhereWithAggregatesInput[]
    OR?: KegiatanScalarWhereWithAggregatesInput[]
    NOT?: KegiatanScalarWhereWithAggregatesInput | KegiatanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Kegiatan"> | number
    komisi?: StringWithAggregatesFilter<"Kegiatan"> | string
    judulKegiatan?: StringWithAggregatesFilter<"Kegiatan"> | string
    deskripsiKegiatan?: StringWithAggregatesFilter<"Kegiatan"> | string
    imageURL?: StringWithAggregatesFilter<"Kegiatan"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Kegiatan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Kegiatan"> | Date | string
  }

  export type KaryawanWhereInput = {
    AND?: KaryawanWhereInput | KaryawanWhereInput[]
    OR?: KaryawanWhereInput[]
    NOT?: KaryawanWhereInput | KaryawanWhereInput[]
    id?: IntFilter<"Karyawan"> | number
    namaDepan?: StringFilter<"Karyawan"> | string
    namaTengah?: StringNullableFilter<"Karyawan"> | string | null
    status?: BoolFilter<"Karyawan"> | boolean
    namaKeluarga?: StringFilter<"Karyawan"> | string
    imageURL?: StringFilter<"Karyawan"> | string
    posisi?: EnumposisiKaryawanFilter<"Karyawan"> | $Enums.posisiKaryawan
    createdAt?: DateTimeFilter<"Karyawan"> | Date | string
    updatedAt?: DateTimeFilter<"Karyawan"> | Date | string
  }

  export type KaryawanOrderByWithRelationInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    posisi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaryawanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: KaryawanWhereInput | KaryawanWhereInput[]
    OR?: KaryawanWhereInput[]
    NOT?: KaryawanWhereInput | KaryawanWhereInput[]
    namaDepan?: StringFilter<"Karyawan"> | string
    namaTengah?: StringNullableFilter<"Karyawan"> | string | null
    status?: BoolFilter<"Karyawan"> | boolean
    namaKeluarga?: StringFilter<"Karyawan"> | string
    imageURL?: StringFilter<"Karyawan"> | string
    posisi?: EnumposisiKaryawanFilter<"Karyawan"> | $Enums.posisiKaryawan
    createdAt?: DateTimeFilter<"Karyawan"> | Date | string
    updatedAt?: DateTimeFilter<"Karyawan"> | Date | string
  }, "id">

  export type KaryawanOrderByWithAggregationInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    posisi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: KaryawanCountOrderByAggregateInput
    _avg?: KaryawanAvgOrderByAggregateInput
    _max?: KaryawanMaxOrderByAggregateInput
    _min?: KaryawanMinOrderByAggregateInput
    _sum?: KaryawanSumOrderByAggregateInput
  }

  export type KaryawanScalarWhereWithAggregatesInput = {
    AND?: KaryawanScalarWhereWithAggregatesInput | KaryawanScalarWhereWithAggregatesInput[]
    OR?: KaryawanScalarWhereWithAggregatesInput[]
    NOT?: KaryawanScalarWhereWithAggregatesInput | KaryawanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Karyawan"> | number
    namaDepan?: StringWithAggregatesFilter<"Karyawan"> | string
    namaTengah?: StringNullableWithAggregatesFilter<"Karyawan"> | string | null
    status?: BoolWithAggregatesFilter<"Karyawan"> | boolean
    namaKeluarga?: StringWithAggregatesFilter<"Karyawan"> | string
    imageURL?: StringWithAggregatesFilter<"Karyawan"> | string
    posisi?: EnumposisiKaryawanWithAggregatesFilter<"Karyawan"> | $Enums.posisiKaryawan
    createdAt?: DateTimeWithAggregatesFilter<"Karyawan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Karyawan"> | Date | string
  }

  export type PendetaWhereInput = {
    AND?: PendetaWhereInput | PendetaWhereInput[]
    OR?: PendetaWhereInput[]
    NOT?: PendetaWhereInput | PendetaWhereInput[]
    id?: IntFilter<"Pendeta"> | number
    namaDepan?: StringFilter<"Pendeta"> | string
    namaTengah?: StringNullableFilter<"Pendeta"> | string | null
    status?: EnumstatusFilter<"Pendeta"> | $Enums.status
    namaKeluarga?: StringFilter<"Pendeta"> | string
    imageURL?: StringFilter<"Pendeta"> | string
    createdAt?: DateTimeFilter<"Pendeta"> | Date | string
    updatedAt?: DateTimeFilter<"Pendeta"> | Date | string
  }

  export type PendetaOrderByWithRelationInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PendetaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PendetaWhereInput | PendetaWhereInput[]
    OR?: PendetaWhereInput[]
    NOT?: PendetaWhereInput | PendetaWhereInput[]
    namaDepan?: StringFilter<"Pendeta"> | string
    namaTengah?: StringNullableFilter<"Pendeta"> | string | null
    status?: EnumstatusFilter<"Pendeta"> | $Enums.status
    namaKeluarga?: StringFilter<"Pendeta"> | string
    imageURL?: StringFilter<"Pendeta"> | string
    createdAt?: DateTimeFilter<"Pendeta"> | Date | string
    updatedAt?: DateTimeFilter<"Pendeta"> | Date | string
  }, "id">

  export type PendetaOrderByWithAggregationInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrderInput | SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PendetaCountOrderByAggregateInput
    _avg?: PendetaAvgOrderByAggregateInput
    _max?: PendetaMaxOrderByAggregateInput
    _min?: PendetaMinOrderByAggregateInput
    _sum?: PendetaSumOrderByAggregateInput
  }

  export type PendetaScalarWhereWithAggregatesInput = {
    AND?: PendetaScalarWhereWithAggregatesInput | PendetaScalarWhereWithAggregatesInput[]
    OR?: PendetaScalarWhereWithAggregatesInput[]
    NOT?: PendetaScalarWhereWithAggregatesInput | PendetaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pendeta"> | number
    namaDepan?: StringWithAggregatesFilter<"Pendeta"> | string
    namaTengah?: StringNullableWithAggregatesFilter<"Pendeta"> | string | null
    status?: EnumstatusWithAggregatesFilter<"Pendeta"> | $Enums.status
    namaKeluarga?: StringWithAggregatesFilter<"Pendeta"> | string
    imageURL?: StringWithAggregatesFilter<"Pendeta"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Pendeta"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pendeta"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    password: string
    role?: $Enums.userRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    role?: $Enums.userRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    password: string
    role?: $Enums.userRole
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumuserRoleFieldUpdateOperationsInput | $Enums.userRole
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenunganCreateInput = {
    title: string
    kitab: string
    ayat: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RenunganUncheckedCreateInput = {
    id?: number
    title: string
    kitab: string
    ayat: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RenunganUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    kitab?: StringFieldUpdateOperationsInput | string
    ayat?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenunganUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    kitab?: StringFieldUpdateOperationsInput | string
    ayat?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenunganCreateManyInput = {
    id?: number
    title: string
    kitab: string
    ayat: string
    content: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RenunganUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    kitab?: StringFieldUpdateOperationsInput | string
    ayat?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RenunganUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    kitab?: StringFieldUpdateOperationsInput | string
    ayat?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JemaatCreateInput = {
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ayah?: OrangTuaCreateNestedOneWithoutAyahInput
    ibu?: OrangTuaCreateNestedOneWithoutIbuInput
    jemaat?: OrangTuaCreateNestedOneWithoutJemaatInput
  }

  export type JemaatUncheckedCreateInput = {
    id?: number
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ayahId?: number | null
    ibuId?: number | null
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jemaat?: OrangTuaUncheckedCreateNestedOneWithoutJemaatInput
  }

  export type JemaatUpdateInput = {
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ayah?: OrangTuaUpdateOneWithoutAyahNestedInput
    ibu?: OrangTuaUpdateOneWithoutIbuNestedInput
    jemaat?: OrangTuaUpdateOneWithoutJemaatNestedInput
  }

  export type JemaatUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    ayahId?: NullableIntFieldUpdateOperationsInput | number | null
    ibuId?: NullableIntFieldUpdateOperationsInput | number | null
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jemaat?: OrangTuaUncheckedUpdateOneWithoutJemaatNestedInput
  }

  export type JemaatCreateManyInput = {
    id?: number
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ayahId?: number | null
    ibuId?: number | null
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JemaatUpdateManyMutationInput = {
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JemaatUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    ayahId?: NullableIntFieldUpdateOperationsInput | number | null
    ibuId?: NullableIntFieldUpdateOperationsInput | number | null
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IbadahCreateInput = {
    category: string
    temaIbadah: string
    pemimpin: string
    linkVideo: string
    infoTambahan: string
    waktuMulai: Date | string
    waktuSelesai: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IbadahUncheckedCreateInput = {
    id?: number
    category: string
    temaIbadah: string
    pemimpin: string
    linkVideo: string
    infoTambahan: string
    waktuMulai: Date | string
    waktuSelesai: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IbadahUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    temaIbadah?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    linkVideo?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IbadahUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    temaIbadah?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    linkVideo?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IbadahCreateManyInput = {
    id?: number
    category: string
    temaIbadah: string
    pemimpin: string
    linkVideo: string
    infoTambahan: string
    waktuMulai: Date | string
    waktuSelesai: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IbadahUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
    temaIbadah?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    linkVideo?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IbadahUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    temaIbadah?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    linkVideo?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoaCreateInput = {
    category: string
    tema: string
    pemimpin: string
    infoTambahan: string
    waktuMulai: Date | string
    waktuSelesai: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoaUncheckedCreateInput = {
    id?: number
    category: string
    tema: string
    pemimpin: string
    infoTambahan: string
    waktuMulai: Date | string
    waktuSelesai: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoaUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    tema?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    tema?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoaCreateManyInput = {
    id?: number
    category: string
    tema: string
    pemimpin: string
    infoTambahan: string
    waktuMulai: Date | string
    waktuSelesai: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DoaUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
    tema?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DoaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    tema?: StringFieldUpdateOperationsInput | string
    pemimpin?: StringFieldUpdateOperationsInput | string
    infoTambahan?: StringFieldUpdateOperationsInput | string
    waktuMulai?: DateTimeFieldUpdateOperationsInput | Date | string
    waktuSelesai?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananBaptisCreateInput = {
    category: string
    infoPendaftaran: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LayananBaptisUncheckedCreateInput = {
    id?: number
    category: string
    infoPendaftaran: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LayananBaptisUpdateInput = {
    category?: StringFieldUpdateOperationsInput | string
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananBaptisUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananBaptisCreateManyInput = {
    id?: number
    category: string
    infoPendaftaran: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LayananBaptisUpdateManyMutationInput = {
    category?: StringFieldUpdateOperationsInput | string
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananBaptisUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: StringFieldUpdateOperationsInput | string
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananPernikahanCreateInput = {
    category: $Enums.CategoryPernikahan
    infoPendaftaran: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LayananPernikahanUncheckedCreateInput = {
    id?: number
    category: $Enums.CategoryPernikahan
    infoPendaftaran: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LayananPernikahanUpdateInput = {
    category?: EnumCategoryPernikahanFieldUpdateOperationsInput | $Enums.CategoryPernikahan
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananPernikahanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: EnumCategoryPernikahanFieldUpdateOperationsInput | $Enums.CategoryPernikahan
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananPernikahanCreateManyInput = {
    id?: number
    category: $Enums.CategoryPernikahan
    infoPendaftaran: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LayananPernikahanUpdateManyMutationInput = {
    category?: EnumCategoryPernikahanFieldUpdateOperationsInput | $Enums.CategoryPernikahan
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LayananPernikahanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    category?: EnumCategoryPernikahanFieldUpdateOperationsInput | $Enums.CategoryPernikahan
    infoPendaftaran?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KonselingPendetaCreateInput = {
    info: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KonselingPendetaUncheckedCreateInput = {
    id?: number
    info: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KonselingPendetaUpdateInput = {
    info?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KonselingPendetaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    info?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KonselingPendetaCreateManyInput = {
    id?: number
    info: string
    jadwal: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KonselingPendetaUpdateManyMutationInput = {
    info?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KonselingPendetaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    info?: StringFieldUpdateOperationsInput | string
    jadwal?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrangTuaCreateInput = {
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jemaat?: JemaatCreateNestedOneWithoutJemaatInput
    ayah?: JemaatCreateNestedManyWithoutAyahInput
    ibu?: JemaatCreateNestedManyWithoutIbuInput
  }

  export type OrangTuaUncheckedCreateInput = {
    id?: number
    noAnggota?: number | null
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ayah?: JemaatUncheckedCreateNestedManyWithoutAyahInput
    ibu?: JemaatUncheckedCreateNestedManyWithoutIbuInput
  }

  export type OrangTuaUpdateInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jemaat?: JemaatUpdateOneWithoutJemaatNestedInput
    ayah?: JemaatUpdateManyWithoutAyahNestedInput
    ibu?: JemaatUpdateManyWithoutIbuNestedInput
  }

  export type OrangTuaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: NullableIntFieldUpdateOperationsInput | number | null
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ayah?: JemaatUncheckedUpdateManyWithoutAyahNestedInput
    ibu?: JemaatUncheckedUpdateManyWithoutIbuNestedInput
  }

  export type OrangTuaCreateManyInput = {
    id?: number
    noAnggota?: number | null
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type OrangTuaUpdateManyMutationInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrangTuaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: NullableIntFieldUpdateOperationsInput | number | null
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KegiatanCreateInput = {
    komisi: string
    judulKegiatan: string
    deskripsiKegiatan: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KegiatanUncheckedCreateInput = {
    id?: number
    komisi: string
    judulKegiatan: string
    deskripsiKegiatan: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KegiatanUpdateInput = {
    komisi?: StringFieldUpdateOperationsInput | string
    judulKegiatan?: StringFieldUpdateOperationsInput | string
    deskripsiKegiatan?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KegiatanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    komisi?: StringFieldUpdateOperationsInput | string
    judulKegiatan?: StringFieldUpdateOperationsInput | string
    deskripsiKegiatan?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KegiatanCreateManyInput = {
    id?: number
    komisi: string
    judulKegiatan: string
    deskripsiKegiatan: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KegiatanUpdateManyMutationInput = {
    komisi?: StringFieldUpdateOperationsInput | string
    judulKegiatan?: StringFieldUpdateOperationsInput | string
    deskripsiKegiatan?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KegiatanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    komisi?: StringFieldUpdateOperationsInput | string
    judulKegiatan?: StringFieldUpdateOperationsInput | string
    deskripsiKegiatan?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KaryawanCreateInput = {
    namaDepan: string
    namaTengah?: string | null
    status: boolean
    namaKeluarga: string
    imageURL: string
    posisi?: $Enums.posisiKaryawan
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KaryawanUncheckedCreateInput = {
    id?: number
    namaDepan: string
    namaTengah?: string | null
    status: boolean
    namaKeluarga: string
    imageURL: string
    posisi?: $Enums.posisiKaryawan
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KaryawanUpdateInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    posisi?: EnumposisiKaryawanFieldUpdateOperationsInput | $Enums.posisiKaryawan
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KaryawanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    posisi?: EnumposisiKaryawanFieldUpdateOperationsInput | $Enums.posisiKaryawan
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KaryawanCreateManyInput = {
    id?: number
    namaDepan: string
    namaTengah?: string | null
    status: boolean
    namaKeluarga: string
    imageURL: string
    posisi?: $Enums.posisiKaryawan
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type KaryawanUpdateManyMutationInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    posisi?: EnumposisiKaryawanFieldUpdateOperationsInput | $Enums.posisiKaryawan
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type KaryawanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: BoolFieldUpdateOperationsInput | boolean
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    posisi?: EnumposisiKaryawanFieldUpdateOperationsInput | $Enums.posisiKaryawan
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendetaCreateInput = {
    namaDepan: string
    namaTengah?: string | null
    status?: $Enums.status
    namaKeluarga: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PendetaUncheckedCreateInput = {
    id?: number
    namaDepan: string
    namaTengah?: string | null
    status?: $Enums.status
    namaKeluarga: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PendetaUpdateInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendetaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendetaCreateManyInput = {
    id?: number
    namaDepan: string
    namaTengah?: string | null
    status?: $Enums.status
    namaKeluarga: string
    imageURL: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PendetaUpdateManyMutationInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PendetaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumstatusFieldUpdateOperationsInput | $Enums.status
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    imageURL?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumuserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleFilter<$PrismaModel> | $Enums.userRole
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumuserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleWithAggregatesFilter<$PrismaModel> | $Enums.userRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserRoleFilter<$PrismaModel>
    _max?: NestedEnumuserRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type RenunganCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    kitab?: SortOrder
    ayat?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RenunganAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RenunganMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    kitab?: SortOrder
    ayat?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RenunganMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    kitab?: SortOrder
    ayat?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RenunganSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type OrangTuaNullableRelationFilter = {
    is?: OrangTuaWhereInput | null
    isNot?: OrangTuaWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type JemaatCountOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    namaKeluarga?: SortOrder
    noWA?: SortOrder
    noTelpRumah?: SortOrder
    tempatLahir?: SortOrder
    ayahId?: SortOrder
    ibuId?: SortOrder
    tanggalLahir?: SortOrder
    golonganDarah?: SortOrder
    alamatRumah?: SortOrder
    wilayah?: SortOrder
    pekerjaan?: SortOrder
    jabatan?: SortOrder
    perusahaan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JemaatAvgOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    noWA?: SortOrder
    noTelpRumah?: SortOrder
    ayahId?: SortOrder
    ibuId?: SortOrder
  }

  export type JemaatMaxOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    namaKeluarga?: SortOrder
    noWA?: SortOrder
    noTelpRumah?: SortOrder
    tempatLahir?: SortOrder
    ayahId?: SortOrder
    ibuId?: SortOrder
    tanggalLahir?: SortOrder
    golonganDarah?: SortOrder
    alamatRumah?: SortOrder
    wilayah?: SortOrder
    pekerjaan?: SortOrder
    jabatan?: SortOrder
    perusahaan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JemaatMinOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    namaKeluarga?: SortOrder
    noWA?: SortOrder
    noTelpRumah?: SortOrder
    tempatLahir?: SortOrder
    ayahId?: SortOrder
    ibuId?: SortOrder
    tanggalLahir?: SortOrder
    golonganDarah?: SortOrder
    alamatRumah?: SortOrder
    wilayah?: SortOrder
    pekerjaan?: SortOrder
    jabatan?: SortOrder
    perusahaan?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type JemaatSumOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    noWA?: SortOrder
    noTelpRumah?: SortOrder
    ayahId?: SortOrder
    ibuId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IbadahCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    temaIbadah?: SortOrder
    pemimpin?: SortOrder
    linkVideo?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IbadahAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IbadahMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    temaIbadah?: SortOrder
    pemimpin?: SortOrder
    linkVideo?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IbadahMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    temaIbadah?: SortOrder
    pemimpin?: SortOrder
    linkVideo?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IbadahSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoaCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    tema?: SortOrder
    pemimpin?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DoaMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    tema?: SortOrder
    pemimpin?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoaMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    tema?: SortOrder
    pemimpin?: SortOrder
    infoTambahan?: SortOrder
    waktuMulai?: SortOrder
    waktuSelesai?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DoaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LayananBaptisCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananBaptisAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LayananBaptisMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananBaptisMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananBaptisSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumCategoryPernikahanFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryPernikahan | EnumCategoryPernikahanFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryPernikahanFilter<$PrismaModel> | $Enums.CategoryPernikahan
  }

  export type LayananPernikahanCountOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananPernikahanAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LayananPernikahanMaxOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananPernikahanMinOrderByAggregateInput = {
    id?: SortOrder
    category?: SortOrder
    infoPendaftaran?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LayananPernikahanSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumCategoryPernikahanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryPernikahan | EnumCategoryPernikahanFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryPernikahanWithAggregatesFilter<$PrismaModel> | $Enums.CategoryPernikahan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryPernikahanFilter<$PrismaModel>
    _max?: NestedEnumCategoryPernikahanFilter<$PrismaModel>
  }

  export type KonselingPendetaCountOrderByAggregateInput = {
    id?: SortOrder
    info?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KonselingPendetaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KonselingPendetaMaxOrderByAggregateInput = {
    id?: SortOrder
    info?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KonselingPendetaMinOrderByAggregateInput = {
    id?: SortOrder
    info?: SortOrder
    jadwal?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KonselingPendetaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type JemaatNullableRelationFilter = {
    is?: JemaatWhereInput | null
    isNot?: JemaatWhereInput | null
  }

  export type JemaatListRelationFilter = {
    every?: JemaatWhereInput
    some?: JemaatWhereInput
    none?: JemaatWhereInput
  }

  export type JemaatOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrangTuaCountOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    namaKeluarga?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrangTuaAvgOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
  }

  export type OrangTuaMaxOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    namaKeluarga?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrangTuaMinOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    namaKeluarga?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OrangTuaSumOrderByAggregateInput = {
    id?: SortOrder
    noAnggota?: SortOrder
  }

  export type KegiatanCountOrderByAggregateInput = {
    id?: SortOrder
    komisi?: SortOrder
    judulKegiatan?: SortOrder
    deskripsiKegiatan?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KegiatanAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KegiatanMaxOrderByAggregateInput = {
    id?: SortOrder
    komisi?: SortOrder
    judulKegiatan?: SortOrder
    deskripsiKegiatan?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KegiatanMinOrderByAggregateInput = {
    id?: SortOrder
    komisi?: SortOrder
    judulKegiatan?: SortOrder
    deskripsiKegiatan?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KegiatanSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumposisiKaryawanFilter<$PrismaModel = never> = {
    equals?: $Enums.posisiKaryawan | EnumposisiKaryawanFieldRefInput<$PrismaModel>
    in?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    notIn?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    not?: NestedEnumposisiKaryawanFilter<$PrismaModel> | $Enums.posisiKaryawan
  }

  export type KaryawanCountOrderByAggregateInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    posisi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaryawanAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type KaryawanMaxOrderByAggregateInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    posisi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaryawanMinOrderByAggregateInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    posisi?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type KaryawanSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumposisiKaryawanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.posisiKaryawan | EnumposisiKaryawanFieldRefInput<$PrismaModel>
    in?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    notIn?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    not?: NestedEnumposisiKaryawanWithAggregatesFilter<$PrismaModel> | $Enums.posisiKaryawan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumposisiKaryawanFilter<$PrismaModel>
    _max?: NestedEnumposisiKaryawanFilter<$PrismaModel>
  }

  export type EnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type PendetaCountOrderByAggregateInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PendetaAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PendetaMaxOrderByAggregateInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PendetaMinOrderByAggregateInput = {
    id?: SortOrder
    namaDepan?: SortOrder
    namaTengah?: SortOrder
    status?: SortOrder
    namaKeluarga?: SortOrder
    imageURL?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PendetaSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type EnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumuserRoleFieldUpdateOperationsInput = {
    set?: $Enums.userRole
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrangTuaCreateNestedOneWithoutAyahInput = {
    create?: XOR<OrangTuaCreateWithoutAyahInput, OrangTuaUncheckedCreateWithoutAyahInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutAyahInput
    connect?: OrangTuaWhereUniqueInput
  }

  export type OrangTuaCreateNestedOneWithoutIbuInput = {
    create?: XOR<OrangTuaCreateWithoutIbuInput, OrangTuaUncheckedCreateWithoutIbuInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutIbuInput
    connect?: OrangTuaWhereUniqueInput
  }

  export type OrangTuaCreateNestedOneWithoutJemaatInput = {
    create?: XOR<OrangTuaCreateWithoutJemaatInput, OrangTuaUncheckedCreateWithoutJemaatInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutJemaatInput
    connect?: OrangTuaWhereUniqueInput
  }

  export type OrangTuaUncheckedCreateNestedOneWithoutJemaatInput = {
    create?: XOR<OrangTuaCreateWithoutJemaatInput, OrangTuaUncheckedCreateWithoutJemaatInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutJemaatInput
    connect?: OrangTuaWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type OrangTuaUpdateOneWithoutAyahNestedInput = {
    create?: XOR<OrangTuaCreateWithoutAyahInput, OrangTuaUncheckedCreateWithoutAyahInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutAyahInput
    upsert?: OrangTuaUpsertWithoutAyahInput
    disconnect?: OrangTuaWhereInput | boolean
    delete?: OrangTuaWhereInput | boolean
    connect?: OrangTuaWhereUniqueInput
    update?: XOR<XOR<OrangTuaUpdateToOneWithWhereWithoutAyahInput, OrangTuaUpdateWithoutAyahInput>, OrangTuaUncheckedUpdateWithoutAyahInput>
  }

  export type OrangTuaUpdateOneWithoutIbuNestedInput = {
    create?: XOR<OrangTuaCreateWithoutIbuInput, OrangTuaUncheckedCreateWithoutIbuInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutIbuInput
    upsert?: OrangTuaUpsertWithoutIbuInput
    disconnect?: OrangTuaWhereInput | boolean
    delete?: OrangTuaWhereInput | boolean
    connect?: OrangTuaWhereUniqueInput
    update?: XOR<XOR<OrangTuaUpdateToOneWithWhereWithoutIbuInput, OrangTuaUpdateWithoutIbuInput>, OrangTuaUncheckedUpdateWithoutIbuInput>
  }

  export type OrangTuaUpdateOneWithoutJemaatNestedInput = {
    create?: XOR<OrangTuaCreateWithoutJemaatInput, OrangTuaUncheckedCreateWithoutJemaatInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutJemaatInput
    upsert?: OrangTuaUpsertWithoutJemaatInput
    disconnect?: OrangTuaWhereInput | boolean
    delete?: OrangTuaWhereInput | boolean
    connect?: OrangTuaWhereUniqueInput
    update?: XOR<XOR<OrangTuaUpdateToOneWithWhereWithoutJemaatInput, OrangTuaUpdateWithoutJemaatInput>, OrangTuaUncheckedUpdateWithoutJemaatInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type OrangTuaUncheckedUpdateOneWithoutJemaatNestedInput = {
    create?: XOR<OrangTuaCreateWithoutJemaatInput, OrangTuaUncheckedCreateWithoutJemaatInput>
    connectOrCreate?: OrangTuaCreateOrConnectWithoutJemaatInput
    upsert?: OrangTuaUpsertWithoutJemaatInput
    disconnect?: OrangTuaWhereInput | boolean
    delete?: OrangTuaWhereInput | boolean
    connect?: OrangTuaWhereUniqueInput
    update?: XOR<XOR<OrangTuaUpdateToOneWithWhereWithoutJemaatInput, OrangTuaUpdateWithoutJemaatInput>, OrangTuaUncheckedUpdateWithoutJemaatInput>
  }

  export type EnumCategoryPernikahanFieldUpdateOperationsInput = {
    set?: $Enums.CategoryPernikahan
  }

  export type JemaatCreateNestedOneWithoutJemaatInput = {
    create?: XOR<JemaatCreateWithoutJemaatInput, JemaatUncheckedCreateWithoutJemaatInput>
    connectOrCreate?: JemaatCreateOrConnectWithoutJemaatInput
    connect?: JemaatWhereUniqueInput
  }

  export type JemaatCreateNestedManyWithoutAyahInput = {
    create?: XOR<JemaatCreateWithoutAyahInput, JemaatUncheckedCreateWithoutAyahInput> | JemaatCreateWithoutAyahInput[] | JemaatUncheckedCreateWithoutAyahInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutAyahInput | JemaatCreateOrConnectWithoutAyahInput[]
    createMany?: JemaatCreateManyAyahInputEnvelope
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
  }

  export type JemaatCreateNestedManyWithoutIbuInput = {
    create?: XOR<JemaatCreateWithoutIbuInput, JemaatUncheckedCreateWithoutIbuInput> | JemaatCreateWithoutIbuInput[] | JemaatUncheckedCreateWithoutIbuInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutIbuInput | JemaatCreateOrConnectWithoutIbuInput[]
    createMany?: JemaatCreateManyIbuInputEnvelope
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
  }

  export type JemaatUncheckedCreateNestedManyWithoutAyahInput = {
    create?: XOR<JemaatCreateWithoutAyahInput, JemaatUncheckedCreateWithoutAyahInput> | JemaatCreateWithoutAyahInput[] | JemaatUncheckedCreateWithoutAyahInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutAyahInput | JemaatCreateOrConnectWithoutAyahInput[]
    createMany?: JemaatCreateManyAyahInputEnvelope
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
  }

  export type JemaatUncheckedCreateNestedManyWithoutIbuInput = {
    create?: XOR<JemaatCreateWithoutIbuInput, JemaatUncheckedCreateWithoutIbuInput> | JemaatCreateWithoutIbuInput[] | JemaatUncheckedCreateWithoutIbuInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutIbuInput | JemaatCreateOrConnectWithoutIbuInput[]
    createMany?: JemaatCreateManyIbuInputEnvelope
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
  }

  export type JemaatUpdateOneWithoutJemaatNestedInput = {
    create?: XOR<JemaatCreateWithoutJemaatInput, JemaatUncheckedCreateWithoutJemaatInput>
    connectOrCreate?: JemaatCreateOrConnectWithoutJemaatInput
    upsert?: JemaatUpsertWithoutJemaatInput
    disconnect?: JemaatWhereInput | boolean
    delete?: JemaatWhereInput | boolean
    connect?: JemaatWhereUniqueInput
    update?: XOR<XOR<JemaatUpdateToOneWithWhereWithoutJemaatInput, JemaatUpdateWithoutJemaatInput>, JemaatUncheckedUpdateWithoutJemaatInput>
  }

  export type JemaatUpdateManyWithoutAyahNestedInput = {
    create?: XOR<JemaatCreateWithoutAyahInput, JemaatUncheckedCreateWithoutAyahInput> | JemaatCreateWithoutAyahInput[] | JemaatUncheckedCreateWithoutAyahInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutAyahInput | JemaatCreateOrConnectWithoutAyahInput[]
    upsert?: JemaatUpsertWithWhereUniqueWithoutAyahInput | JemaatUpsertWithWhereUniqueWithoutAyahInput[]
    createMany?: JemaatCreateManyAyahInputEnvelope
    set?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    disconnect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    delete?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    update?: JemaatUpdateWithWhereUniqueWithoutAyahInput | JemaatUpdateWithWhereUniqueWithoutAyahInput[]
    updateMany?: JemaatUpdateManyWithWhereWithoutAyahInput | JemaatUpdateManyWithWhereWithoutAyahInput[]
    deleteMany?: JemaatScalarWhereInput | JemaatScalarWhereInput[]
  }

  export type JemaatUpdateManyWithoutIbuNestedInput = {
    create?: XOR<JemaatCreateWithoutIbuInput, JemaatUncheckedCreateWithoutIbuInput> | JemaatCreateWithoutIbuInput[] | JemaatUncheckedCreateWithoutIbuInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutIbuInput | JemaatCreateOrConnectWithoutIbuInput[]
    upsert?: JemaatUpsertWithWhereUniqueWithoutIbuInput | JemaatUpsertWithWhereUniqueWithoutIbuInput[]
    createMany?: JemaatCreateManyIbuInputEnvelope
    set?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    disconnect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    delete?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    update?: JemaatUpdateWithWhereUniqueWithoutIbuInput | JemaatUpdateWithWhereUniqueWithoutIbuInput[]
    updateMany?: JemaatUpdateManyWithWhereWithoutIbuInput | JemaatUpdateManyWithWhereWithoutIbuInput[]
    deleteMany?: JemaatScalarWhereInput | JemaatScalarWhereInput[]
  }

  export type JemaatUncheckedUpdateManyWithoutAyahNestedInput = {
    create?: XOR<JemaatCreateWithoutAyahInput, JemaatUncheckedCreateWithoutAyahInput> | JemaatCreateWithoutAyahInput[] | JemaatUncheckedCreateWithoutAyahInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutAyahInput | JemaatCreateOrConnectWithoutAyahInput[]
    upsert?: JemaatUpsertWithWhereUniqueWithoutAyahInput | JemaatUpsertWithWhereUniqueWithoutAyahInput[]
    createMany?: JemaatCreateManyAyahInputEnvelope
    set?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    disconnect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    delete?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    update?: JemaatUpdateWithWhereUniqueWithoutAyahInput | JemaatUpdateWithWhereUniqueWithoutAyahInput[]
    updateMany?: JemaatUpdateManyWithWhereWithoutAyahInput | JemaatUpdateManyWithWhereWithoutAyahInput[]
    deleteMany?: JemaatScalarWhereInput | JemaatScalarWhereInput[]
  }

  export type JemaatUncheckedUpdateManyWithoutIbuNestedInput = {
    create?: XOR<JemaatCreateWithoutIbuInput, JemaatUncheckedCreateWithoutIbuInput> | JemaatCreateWithoutIbuInput[] | JemaatUncheckedCreateWithoutIbuInput[]
    connectOrCreate?: JemaatCreateOrConnectWithoutIbuInput | JemaatCreateOrConnectWithoutIbuInput[]
    upsert?: JemaatUpsertWithWhereUniqueWithoutIbuInput | JemaatUpsertWithWhereUniqueWithoutIbuInput[]
    createMany?: JemaatCreateManyIbuInputEnvelope
    set?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    disconnect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    delete?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    connect?: JemaatWhereUniqueInput | JemaatWhereUniqueInput[]
    update?: JemaatUpdateWithWhereUniqueWithoutIbuInput | JemaatUpdateWithWhereUniqueWithoutIbuInput[]
    updateMany?: JemaatUpdateManyWithWhereWithoutIbuInput | JemaatUpdateManyWithWhereWithoutIbuInput[]
    deleteMany?: JemaatScalarWhereInput | JemaatScalarWhereInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumposisiKaryawanFieldUpdateOperationsInput = {
    set?: $Enums.posisiKaryawan
  }

  export type EnumstatusFieldUpdateOperationsInput = {
    set?: $Enums.status
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumuserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleFilter<$PrismaModel> | $Enums.userRole
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumuserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.userRole | EnumuserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.userRole[] | ListEnumuserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumuserRoleWithAggregatesFilter<$PrismaModel> | $Enums.userRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuserRoleFilter<$PrismaModel>
    _max?: NestedEnumuserRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCategoryPernikahanFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryPernikahan | EnumCategoryPernikahanFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryPernikahanFilter<$PrismaModel> | $Enums.CategoryPernikahan
  }

  export type NestedEnumCategoryPernikahanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CategoryPernikahan | EnumCategoryPernikahanFieldRefInput<$PrismaModel>
    in?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    notIn?: $Enums.CategoryPernikahan[] | ListEnumCategoryPernikahanFieldRefInput<$PrismaModel>
    not?: NestedEnumCategoryPernikahanWithAggregatesFilter<$PrismaModel> | $Enums.CategoryPernikahan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategoryPernikahanFilter<$PrismaModel>
    _max?: NestedEnumCategoryPernikahanFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumposisiKaryawanFilter<$PrismaModel = never> = {
    equals?: $Enums.posisiKaryawan | EnumposisiKaryawanFieldRefInput<$PrismaModel>
    in?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    notIn?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    not?: NestedEnumposisiKaryawanFilter<$PrismaModel> | $Enums.posisiKaryawan
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumposisiKaryawanWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.posisiKaryawan | EnumposisiKaryawanFieldRefInput<$PrismaModel>
    in?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    notIn?: $Enums.posisiKaryawan[] | ListEnumposisiKaryawanFieldRefInput<$PrismaModel>
    not?: NestedEnumposisiKaryawanWithAggregatesFilter<$PrismaModel> | $Enums.posisiKaryawan
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumposisiKaryawanFilter<$PrismaModel>
    _max?: NestedEnumposisiKaryawanFilter<$PrismaModel>
  }

  export type NestedEnumstatusFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusFilter<$PrismaModel> | $Enums.status
  }

  export type NestedEnumstatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.status | EnumstatusFieldRefInput<$PrismaModel>
    in?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.status[] | ListEnumstatusFieldRefInput<$PrismaModel>
    not?: NestedEnumstatusWithAggregatesFilter<$PrismaModel> | $Enums.status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumstatusFilter<$PrismaModel>
    _max?: NestedEnumstatusFilter<$PrismaModel>
  }

  export type OrangTuaCreateWithoutAyahInput = {
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jemaat?: JemaatCreateNestedOneWithoutJemaatInput
    ibu?: JemaatCreateNestedManyWithoutIbuInput
  }

  export type OrangTuaUncheckedCreateWithoutAyahInput = {
    id?: number
    noAnggota?: number | null
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ibu?: JemaatUncheckedCreateNestedManyWithoutIbuInput
  }

  export type OrangTuaCreateOrConnectWithoutAyahInput = {
    where: OrangTuaWhereUniqueInput
    create: XOR<OrangTuaCreateWithoutAyahInput, OrangTuaUncheckedCreateWithoutAyahInput>
  }

  export type OrangTuaCreateWithoutIbuInput = {
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    jemaat?: JemaatCreateNestedOneWithoutJemaatInput
    ayah?: JemaatCreateNestedManyWithoutAyahInput
  }

  export type OrangTuaUncheckedCreateWithoutIbuInput = {
    id?: number
    noAnggota?: number | null
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ayah?: JemaatUncheckedCreateNestedManyWithoutAyahInput
  }

  export type OrangTuaCreateOrConnectWithoutIbuInput = {
    where: OrangTuaWhereUniqueInput
    create: XOR<OrangTuaCreateWithoutIbuInput, OrangTuaUncheckedCreateWithoutIbuInput>
  }

  export type OrangTuaCreateWithoutJemaatInput = {
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ayah?: JemaatCreateNestedManyWithoutAyahInput
    ibu?: JemaatCreateNestedManyWithoutIbuInput
  }

  export type OrangTuaUncheckedCreateWithoutJemaatInput = {
    id?: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ayah?: JemaatUncheckedCreateNestedManyWithoutAyahInput
    ibu?: JemaatUncheckedCreateNestedManyWithoutIbuInput
  }

  export type OrangTuaCreateOrConnectWithoutJemaatInput = {
    where: OrangTuaWhereUniqueInput
    create: XOR<OrangTuaCreateWithoutJemaatInput, OrangTuaUncheckedCreateWithoutJemaatInput>
  }

  export type OrangTuaUpsertWithoutAyahInput = {
    update: XOR<OrangTuaUpdateWithoutAyahInput, OrangTuaUncheckedUpdateWithoutAyahInput>
    create: XOR<OrangTuaCreateWithoutAyahInput, OrangTuaUncheckedCreateWithoutAyahInput>
    where?: OrangTuaWhereInput
  }

  export type OrangTuaUpdateToOneWithWhereWithoutAyahInput = {
    where?: OrangTuaWhereInput
    data: XOR<OrangTuaUpdateWithoutAyahInput, OrangTuaUncheckedUpdateWithoutAyahInput>
  }

  export type OrangTuaUpdateWithoutAyahInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jemaat?: JemaatUpdateOneWithoutJemaatNestedInput
    ibu?: JemaatUpdateManyWithoutIbuNestedInput
  }

  export type OrangTuaUncheckedUpdateWithoutAyahInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: NullableIntFieldUpdateOperationsInput | number | null
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ibu?: JemaatUncheckedUpdateManyWithoutIbuNestedInput
  }

  export type OrangTuaUpsertWithoutIbuInput = {
    update: XOR<OrangTuaUpdateWithoutIbuInput, OrangTuaUncheckedUpdateWithoutIbuInput>
    create: XOR<OrangTuaCreateWithoutIbuInput, OrangTuaUncheckedCreateWithoutIbuInput>
    where?: OrangTuaWhereInput
  }

  export type OrangTuaUpdateToOneWithWhereWithoutIbuInput = {
    where?: OrangTuaWhereInput
    data: XOR<OrangTuaUpdateWithoutIbuInput, OrangTuaUncheckedUpdateWithoutIbuInput>
  }

  export type OrangTuaUpdateWithoutIbuInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jemaat?: JemaatUpdateOneWithoutJemaatNestedInput
    ayah?: JemaatUpdateManyWithoutAyahNestedInput
  }

  export type OrangTuaUncheckedUpdateWithoutIbuInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: NullableIntFieldUpdateOperationsInput | number | null
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ayah?: JemaatUncheckedUpdateManyWithoutAyahNestedInput
  }

  export type OrangTuaUpsertWithoutJemaatInput = {
    update: XOR<OrangTuaUpdateWithoutJemaatInput, OrangTuaUncheckedUpdateWithoutJemaatInput>
    create: XOR<OrangTuaCreateWithoutJemaatInput, OrangTuaUncheckedCreateWithoutJemaatInput>
    where?: OrangTuaWhereInput
  }

  export type OrangTuaUpdateToOneWithWhereWithoutJemaatInput = {
    where?: OrangTuaWhereInput
    data: XOR<OrangTuaUpdateWithoutJemaatInput, OrangTuaUncheckedUpdateWithoutJemaatInput>
  }

  export type OrangTuaUpdateWithoutJemaatInput = {
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ayah?: JemaatUpdateManyWithoutAyahNestedInput
    ibu?: JemaatUpdateManyWithoutIbuNestedInput
  }

  export type OrangTuaUncheckedUpdateWithoutJemaatInput = {
    id?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ayah?: JemaatUncheckedUpdateManyWithoutAyahNestedInput
    ibu?: JemaatUncheckedUpdateManyWithoutIbuNestedInput
  }

  export type JemaatCreateWithoutJemaatInput = {
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ayah?: OrangTuaCreateNestedOneWithoutAyahInput
    ibu?: OrangTuaCreateNestedOneWithoutIbuInput
  }

  export type JemaatUncheckedCreateWithoutJemaatInput = {
    id?: number
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ayahId?: number | null
    ibuId?: number | null
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JemaatCreateOrConnectWithoutJemaatInput = {
    where: JemaatWhereUniqueInput
    create: XOR<JemaatCreateWithoutJemaatInput, JemaatUncheckedCreateWithoutJemaatInput>
  }

  export type JemaatCreateWithoutAyahInput = {
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ibu?: OrangTuaCreateNestedOneWithoutIbuInput
    jemaat?: OrangTuaCreateNestedOneWithoutJemaatInput
  }

  export type JemaatUncheckedCreateWithoutAyahInput = {
    id?: number
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ibuId?: number | null
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jemaat?: OrangTuaUncheckedCreateNestedOneWithoutJemaatInput
  }

  export type JemaatCreateOrConnectWithoutAyahInput = {
    where: JemaatWhereUniqueInput
    create: XOR<JemaatCreateWithoutAyahInput, JemaatUncheckedCreateWithoutAyahInput>
  }

  export type JemaatCreateManyAyahInputEnvelope = {
    data: JemaatCreateManyAyahInput | JemaatCreateManyAyahInput[]
    skipDuplicates?: boolean
  }

  export type JemaatCreateWithoutIbuInput = {
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    ayah?: OrangTuaCreateNestedOneWithoutAyahInput
    jemaat?: OrangTuaCreateNestedOneWithoutJemaatInput
  }

  export type JemaatUncheckedCreateWithoutIbuInput = {
    id?: number
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ayahId?: number | null
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    jemaat?: OrangTuaUncheckedCreateNestedOneWithoutJemaatInput
  }

  export type JemaatCreateOrConnectWithoutIbuInput = {
    where: JemaatWhereUniqueInput
    create: XOR<JemaatCreateWithoutIbuInput, JemaatUncheckedCreateWithoutIbuInput>
  }

  export type JemaatCreateManyIbuInputEnvelope = {
    data: JemaatCreateManyIbuInput | JemaatCreateManyIbuInput[]
    skipDuplicates?: boolean
  }

  export type JemaatUpsertWithoutJemaatInput = {
    update: XOR<JemaatUpdateWithoutJemaatInput, JemaatUncheckedUpdateWithoutJemaatInput>
    create: XOR<JemaatCreateWithoutJemaatInput, JemaatUncheckedCreateWithoutJemaatInput>
    where?: JemaatWhereInput
  }

  export type JemaatUpdateToOneWithWhereWithoutJemaatInput = {
    where?: JemaatWhereInput
    data: XOR<JemaatUpdateWithoutJemaatInput, JemaatUncheckedUpdateWithoutJemaatInput>
  }

  export type JemaatUpdateWithoutJemaatInput = {
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ayah?: OrangTuaUpdateOneWithoutAyahNestedInput
    ibu?: OrangTuaUpdateOneWithoutIbuNestedInput
  }

  export type JemaatUncheckedUpdateWithoutJemaatInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    ayahId?: NullableIntFieldUpdateOperationsInput | number | null
    ibuId?: NullableIntFieldUpdateOperationsInput | number | null
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JemaatUpsertWithWhereUniqueWithoutAyahInput = {
    where: JemaatWhereUniqueInput
    update: XOR<JemaatUpdateWithoutAyahInput, JemaatUncheckedUpdateWithoutAyahInput>
    create: XOR<JemaatCreateWithoutAyahInput, JemaatUncheckedCreateWithoutAyahInput>
  }

  export type JemaatUpdateWithWhereUniqueWithoutAyahInput = {
    where: JemaatWhereUniqueInput
    data: XOR<JemaatUpdateWithoutAyahInput, JemaatUncheckedUpdateWithoutAyahInput>
  }

  export type JemaatUpdateManyWithWhereWithoutAyahInput = {
    where: JemaatScalarWhereInput
    data: XOR<JemaatUpdateManyMutationInput, JemaatUncheckedUpdateManyWithoutAyahInput>
  }

  export type JemaatScalarWhereInput = {
    AND?: JemaatScalarWhereInput | JemaatScalarWhereInput[]
    OR?: JemaatScalarWhereInput[]
    NOT?: JemaatScalarWhereInput | JemaatScalarWhereInput[]
    id?: IntFilter<"Jemaat"> | number
    noAnggota?: IntFilter<"Jemaat"> | number
    namaDepan?: StringFilter<"Jemaat"> | string
    namaTengah?: StringNullableFilter<"Jemaat"> | string | null
    namaKeluarga?: StringFilter<"Jemaat"> | string
    noWA?: IntFilter<"Jemaat"> | number
    noTelpRumah?: IntFilter<"Jemaat"> | number
    tempatLahir?: StringFilter<"Jemaat"> | string
    ayahId?: IntNullableFilter<"Jemaat"> | number | null
    ibuId?: IntNullableFilter<"Jemaat"> | number | null
    tanggalLahir?: DateTimeFilter<"Jemaat"> | Date | string
    golonganDarah?: StringFilter<"Jemaat"> | string
    alamatRumah?: StringFilter<"Jemaat"> | string
    wilayah?: StringFilter<"Jemaat"> | string
    pekerjaan?: StringNullableFilter<"Jemaat"> | string | null
    jabatan?: StringNullableFilter<"Jemaat"> | string | null
    perusahaan?: StringNullableFilter<"Jemaat"> | string | null
    createdAt?: DateTimeFilter<"Jemaat"> | Date | string
    updatedAt?: DateTimeFilter<"Jemaat"> | Date | string
  }

  export type JemaatUpsertWithWhereUniqueWithoutIbuInput = {
    where: JemaatWhereUniqueInput
    update: XOR<JemaatUpdateWithoutIbuInput, JemaatUncheckedUpdateWithoutIbuInput>
    create: XOR<JemaatCreateWithoutIbuInput, JemaatUncheckedCreateWithoutIbuInput>
  }

  export type JemaatUpdateWithWhereUniqueWithoutIbuInput = {
    where: JemaatWhereUniqueInput
    data: XOR<JemaatUpdateWithoutIbuInput, JemaatUncheckedUpdateWithoutIbuInput>
  }

  export type JemaatUpdateManyWithWhereWithoutIbuInput = {
    where: JemaatScalarWhereInput
    data: XOR<JemaatUpdateManyMutationInput, JemaatUncheckedUpdateManyWithoutIbuInput>
  }

  export type JemaatCreateManyAyahInput = {
    id?: number
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ibuId?: number | null
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JemaatCreateManyIbuInput = {
    id?: number
    noAnggota: number
    namaDepan: string
    namaTengah?: string | null
    namaKeluarga: string
    noWA: number
    noTelpRumah: number
    tempatLahir: string
    ayahId?: number | null
    tanggalLahir: Date | string
    golonganDarah: string
    alamatRumah: string
    wilayah: string
    pekerjaan?: string | null
    jabatan?: string | null
    perusahaan?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type JemaatUpdateWithoutAyahInput = {
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ibu?: OrangTuaUpdateOneWithoutIbuNestedInput
    jemaat?: OrangTuaUpdateOneWithoutJemaatNestedInput
  }

  export type JemaatUncheckedUpdateWithoutAyahInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    ibuId?: NullableIntFieldUpdateOperationsInput | number | null
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jemaat?: OrangTuaUncheckedUpdateOneWithoutJemaatNestedInput
  }

  export type JemaatUncheckedUpdateManyWithoutAyahInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    ibuId?: NullableIntFieldUpdateOperationsInput | number | null
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JemaatUpdateWithoutIbuInput = {
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ayah?: OrangTuaUpdateOneWithoutAyahNestedInput
    jemaat?: OrangTuaUpdateOneWithoutJemaatNestedInput
  }

  export type JemaatUncheckedUpdateWithoutIbuInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    ayahId?: NullableIntFieldUpdateOperationsInput | number | null
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    jemaat?: OrangTuaUncheckedUpdateOneWithoutJemaatNestedInput
  }

  export type JemaatUncheckedUpdateManyWithoutIbuInput = {
    id?: IntFieldUpdateOperationsInput | number
    noAnggota?: IntFieldUpdateOperationsInput | number
    namaDepan?: StringFieldUpdateOperationsInput | string
    namaTengah?: NullableStringFieldUpdateOperationsInput | string | null
    namaKeluarga?: StringFieldUpdateOperationsInput | string
    noWA?: IntFieldUpdateOperationsInput | number
    noTelpRumah?: IntFieldUpdateOperationsInput | number
    tempatLahir?: StringFieldUpdateOperationsInput | string
    ayahId?: NullableIntFieldUpdateOperationsInput | number | null
    tanggalLahir?: DateTimeFieldUpdateOperationsInput | Date | string
    golonganDarah?: StringFieldUpdateOperationsInput | string
    alamatRumah?: StringFieldUpdateOperationsInput | string
    wilayah?: StringFieldUpdateOperationsInput | string
    pekerjaan?: NullableStringFieldUpdateOperationsInput | string | null
    jabatan?: NullableStringFieldUpdateOperationsInput | string | null
    perusahaan?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use OrangTuaCountOutputTypeDefaultArgs instead
     */
    export type OrangTuaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrangTuaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RenunganDefaultArgs instead
     */
    export type RenunganArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RenunganDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JemaatDefaultArgs instead
     */
    export type JemaatArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JemaatDefaultArgs<ExtArgs>
    /**
     * @deprecated Use IbadahDefaultArgs instead
     */
    export type IbadahArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = IbadahDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DoaDefaultArgs instead
     */
    export type DoaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DoaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LayananBaptisDefaultArgs instead
     */
    export type LayananBaptisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LayananBaptisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LayananPernikahanDefaultArgs instead
     */
    export type LayananPernikahanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LayananPernikahanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KonselingPendetaDefaultArgs instead
     */
    export type KonselingPendetaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KonselingPendetaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OrangTuaDefaultArgs instead
     */
    export type OrangTuaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OrangTuaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KegiatanDefaultArgs instead
     */
    export type KegiatanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KegiatanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KaryawanDefaultArgs instead
     */
    export type KaryawanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KaryawanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PendetaDefaultArgs instead
     */
    export type PendetaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PendetaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}